{"version":3,"file":"component---src-pages-browse-tsx-2552b0248fe774012e25.js","mappings":"oLAwEA,UApDkD,SAAC,GAAuB,IAArBA,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC1D,OACCC,EAAAA,cAACC,EAAAA,EAAD,CAAQF,SAAUA,GACjBC,EAAAA,cAACE,EAAAA,EAAD,CACCC,MAAM,yCACNC,YAAY,0CAEbJ,EAAAA,cAAAA,KAAAA,KAAAA,8BACAA,EAAAA,cAAAA,KAAAA,KACEF,EAAKO,OAAOC,MACXC,MAAK,SAACC,EAAIC,GAAL,OAAYD,EAAGE,IAAIC,cAAcF,EAAGC,IAD1C,IAECE,KAAI,SAACN,EAAOO,GACZ,IAAMC,EAAUhB,EAAKO,OAAOU,MAAMC,MACjC,SAACC,GAAD,OAAUA,EAAKC,OAAOC,OAAZF,IAAyBX,EAAMI,IAA/B,GADK,IAGhB,OACCV,EAAAA,cAAAA,KAAAA,CAAIoB,IAAKP,GACRb,EAAAA,cAACqB,EAAAA,KAAD,CACCC,GAAE,IAAMhB,EAAMI,IACda,MAAO,CAAEC,SAAa,EAAIlB,EAAMmB,WAAa,IAAM,IAAlC,QAEhBX,aAAAA,EAAAA,EAASY,YAAYvB,SAASwB,EAAAA,EAAAA,IAAUrB,EAAMI,MAZnD,KATL,C,sHClBO,SAASiB,EAAUjB,GACzB,OAAOA,EACLkB,MAAM,KACNhB,KAAI,SAACiB,GAAD,OACJA,EACED,MAAM,KACNhB,KAAI,SAACiB,GAAD,OAAUA,EAAK,GAAGC,cAAgBD,EAAKE,OAAO,EAFpD,IAGEC,KAAK,MANF,IAQLA,KAAK,IAGR,CAAO,SAASC,EAAYC,GAC3B,IAAMC,EAASD,EAAKE,WAAW,KAAOF,EAAKG,MAAM,EAAGH,EAAKI,QAAUJ,EACnE,OAAOC,EAAOI,SAAS,KAAOJ,EAAOE,MAAM,GAAI,GAAKF,CAmBrD,CAAO,SAASK,EACfC,EACAC,GAEA,IAAQrC,GAAwCsC,EAAAA,EAAAA,gBAAe,cAAvDtC,OAkBFc,EAAOc,EAAYQ,GAEnBN,EAAS,CAEdS,SAAUvC,aAAF,EAAEA,EAAQU,MAAM8B,QAAO,SAAC/B,GAAD,yBAC9BA,EAAQY,mBADsB,iBAC9BoB,EAAqBJ,YADS,aAC9BK,EAA2BC,SAAS7B,EAD3B,IAIVuB,KAAMrC,aAAF,EAAEA,EAAQU,MAAM8B,QAAO,SAAC/B,GAAD,OAC1B4B,aAD0B,EAC1BA,EAAMM,SAASlC,EAAQI,OAAOC,KAAKkB,MAAM,GAAI,GADxC,KAKP,GAAIF,EAAOO,MAAQP,EAAOO,KAAKJ,UAAWI,aAAvB,EAAuBA,EAAMJ,QAC/C,MAAM,IAAIW,MAAJ,iDAC4CC,KAAKC,UACrDT,GAFI,YAGQvB,EAHR,eAG2B+B,KAAKC,UACpChB,EAAOO,KAAK9B,KAAI,SAACwC,GAAD,OAAOA,EAAElC,OAAOC,IAAhC,MAKH,OAAOgB,CACP,C","sources":["webpack://jamestharpe.com/./src/pages/browse.tsx","webpack://jamestharpe.com/./src/tags.ts"],"sourcesContent":["import { graphql, Link, PageProps } from \"gatsby\";\nimport React, { FC } from \"react\";\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nimport { forHumans } from \"../tags\";\n\ntype BrowsePageData = {\n\tallMdx: {\n\t\ttotalCount: number;\n\t\tgroup: {\n\t\t\ttag: string;\n\t\t\ttotalCount: number;\n\t\t}[];\n\t\tnodes: {\n\t\t\tfields: { slug: string };\n\t\t\tfrontmatter: { title: string; tags: string[] };\n\t\t}[];\n\t};\n};\n\nconst BrowsePage: FC<PageProps<BrowsePageData>> = ({ data, location }) => {\n\treturn (\n\t\t<Layout location={location}>\n\t\t\t<SEO\n\t\t\t\ttitle=\"Browse James's Knowledge Graph: Topics\"\n\t\t\t\tdescription=\"Browse James Tharpe's Knowledge Graph\"\n\t\t\t/>\n\t\t\t<h1>Browse the Knowledge Graph</h1>\n\t\t\t<ul>\n\t\t\t\t{data.allMdx.group\n\t\t\t\t\t.sort((g1, g2) => g1.tag.localeCompare(g2.tag))\n\t\t\t\t\t.map((group, index) => {\n\t\t\t\t\t\tconst article = data.allMdx.nodes.find(\n\t\t\t\t\t\t\t(node) => node.fields.slug === `/${group.tag}/`\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<li key={index}>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto={`/${group.tag}`}\n\t\t\t\t\t\t\t\t\tstyle={{ fontSize: `${1 + group.totalCount / 100 - 0.01}em` }}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{article?.frontmatter.title || forHumans(group.tag)}\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t</ul>\n\t\t</Layout>\n\t);\n};\n\nexport const query = graphql`\n\tquery Browse {\n\t\tallMdx(filter: { frontmatter: { draft: { ne: true } } }) {\n\t\t\ttotalCount\n\t\t\tgroup(field: frontmatter___tags) {\n\t\t\t\ttag: fieldValue\n\t\t\t\ttotalCount\n\t\t\t}\n\t\t\tnodes {\n\t\t\t\tfields {\n\t\t\t\t\tslug\n\t\t\t\t}\n\t\t\t\tfrontmatter {\n\t\t\t\t\ttitle\n\t\t\t\t\ttags\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n`;\n\nexport default BrowsePage;\n","import { graphql, useStaticQuery } from \"gatsby\";\n\nexport function forHumans(tag: string) {\n\treturn tag\n\t\t.split(\"-\")\n\t\t.map((word) =>\n\t\t\tword\n\t\t\t\t.split(\"/\")\n\t\t\t\t.map((word) => word[0].toUpperCase() + word.substr(1))\n\t\t\t\t.join(\" / \")\n\t\t)\n\t\t.join(\" \");\n}\n\nexport function tagFromSlug(path: string) {\n\tconst result = path.startsWith(\"/\") ? path.slice(1, path.length) : path;\n\treturn result.endsWith(\"/\") ? result.slice(0, -1) : result;\n}\n\ntype KnowledgeNetworkQueryResult = {\n\tallMdx?: {\n\t\tnodes: {\n\t\t\texcerpt: string;\n\t\t\tfields: {\n\t\t\t\tslug: string;\n\t\t\t};\n\t\t\tfrontmatter: {\n\t\t\t\tdescription?: string;\n\t\t\t\ttitle?: string;\n\t\t\t\ttags?: string[];\n\t\t\t};\n\t\t}[];\n\t};\n};\n\nexport function useKnowledgeNetworkQuery(\n\tlocationPathname: string,\n\ttags?: string[]\n) {\n\tconst { allMdx }: KnowledgeNetworkQueryResult = useStaticQuery(graphql`\n\t\tquery KnowledgeNetworkQuery {\n\t\t\tallMdx(filter: { frontmatter: { draft: { ne: true } } }) {\n\t\t\t\tnodes {\n\t\t\t\t\texcerpt\n\t\t\t\t\tfrontmatter {\n\t\t\t\t\t\ttitle\n\t\t\t\t\t\ttags\n\t\t\t\t\t\tdescription\n\t\t\t\t\t}\n\t\t\t\t\tfields {\n\t\t\t\t\t\tslug\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t`);\n\n\tconst slug = tagFromSlug(locationPathname);\n\n\tconst result = {\n\t\t// Tagged with this article's slug\n\t\tarticles: allMdx?.nodes.filter((article) =>\n\t\t\tarticle.frontmatter?.tags?.includes(slug)\n\t\t),\n\t\t// Tagged by this article\n\t\ttags: allMdx?.nodes.filter((article) =>\n\t\t\ttags?.includes(article.fields.slug.slice(1, -1))\n\t\t)\n\t};\n\n\tif (result.tags && result.tags.length !== tags?.length) {\n\t\tthrow new Error(\n\t\t\t`Pages for one or more tags is missing for tag ${JSON.stringify(\n\t\t\t\ttags\n\t\t\t)} on page ${slug}. Received: ${JSON.stringify(\n\t\t\t\tresult.tags.map((t) => t.fields.slug)\n\t\t\t)}`\n\t\t);\n\t}\n\n\treturn result;\n}\n"],"names":["data","location","React","Layout","SEO","title","description","allMdx","group","sort","g1","g2","tag","localeCompare","map","index","article","nodes","find","node","fields","slug","key","Link","to","style","fontSize","totalCount","frontmatter","forHumans","split","word","toUpperCase","substr","join","tagFromSlug","path","result","startsWith","slice","length","endsWith","useKnowledgeNetworkQuery","locationPathname","tags","useStaticQuery","articles","filter","_article$frontmatter","_article$frontmatter$","includes","Error","JSON","stringify","t"],"sourceRoot":""}