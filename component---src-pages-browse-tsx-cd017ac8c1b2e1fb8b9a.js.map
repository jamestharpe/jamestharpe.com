{"version":3,"sources":["webpack:///./src/pages/browse.tsx","webpack:///./src/tags.ts"],"names":["query","BrowsePage","data","location","title","description","allMarkdownRemark","group","sort","g1","g2","tag","localeCompare","map","index","key","to","style","fontSize","totalCount","nodes","find","node","fields","slug","frontmatter","forHumans","split","word","toUpperCase","substr","join","tagFromSlug","path","result","startsWith","slice","length","endsWith","useKnowledgeNetworkQuery","tags","useStaticQuery","pathname","articles","filter","article","includes","Error","JSON","stringify","t"],"mappings":"6FAAA,sHAgDaA,EAAQ,aAqBNC,UAjDmC,SAAC,GAAuB,IAArBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC1D,OACC,kBAAC,IAAD,CAAQA,SAAUA,GACjB,kBAAC,IAAD,CACCC,MAAM,yCACNC,YAAY,0CAEb,0DACA,4BACEH,EAAKI,kBAAkBC,MACtBC,MAAK,SAACC,EAAIC,GAAL,OAAYD,EAAGE,IAAIC,cAAcF,EAAGC,QACzCE,KAAI,SAACN,EAAOO,GAAR,aACJ,wBAAIC,IAAKD,GACR,kBAAC,OAAD,CACCE,GAAE,IAAMT,EAAMI,IACdM,MAAO,CAAEC,SAAa,EAAIX,EAAMY,WAAa,IAAM,IAAlC,QAEhB,UAAAjB,EAAKI,kBAAkBc,MAAMC,MAC7B,SAACC,GAAD,OAAUA,EAAKC,OAAOC,OAAZ,IAAyBjB,EAAMI,IAA/B,cADV,eAEEc,YAAYrB,QAASsB,YAAUnB,EAAMI,c,oCCtChD,sHAEO,SAASe,EAAUf,GACzB,OAAOA,EACLgB,MAAM,KACNd,KAAI,SAACe,GAAD,OACJA,EACED,MAAM,KACNd,KAAI,SAACe,GAAD,OAAUA,EAAK,GAAGC,cAAgBD,EAAKE,OAAO,MAClDC,KAAK,UAEPA,KAAK,KAGD,SAASC,EAAYC,GAC3B,IAAMC,EAASD,EAAKE,WAAW,KAAOF,EAAKG,MAAM,EAAGH,EAAKI,QAAUJ,EACnE,OAAOC,EAAOI,SAAS,KAAOJ,EAAOE,MAAM,GAAI,GAAKF,EAmB9C,SAASK,EACfpC,EACAqC,GACC,IAEAlC,EACgCmC,yBAAe,cAD/CnC,kBAmBKkB,EAAOQ,EAAY7B,EAASuC,UAE5BR,EAAS,CAEdS,SAAUrC,aAAF,EAAEA,EAAmBc,MAAMwB,QAAO,SAACC,GAAD,yBACzCA,EAAQpB,mBADiC,iBACzC,EAAqBe,YADoB,aACzC,EAA2BM,SAAStB,MAGrCgB,KAAMlC,aAAF,EAAEA,EAAmBc,MAAMwB,QAAO,SAACC,GAAD,OACrCL,aADqC,EACrCA,EAAMM,SAASD,EAAQtB,OAAOC,KAAKY,MAAM,GAAI,QAI/C,GAAIF,EAAOM,MAAQN,EAAOM,KAAKH,UAAWG,aAAvB,EAAuBA,EAAMH,QAC/C,MAAM,IAAIU,MAAJ,iDAC4CC,KAAKC,UACrDT,GAFI,YAGQhB,EAHR,eAG2BwB,KAAKC,UACpCf,EAAOM,KAAK3B,KAAI,SAACqC,GAAD,OAAOA,EAAE3B,OAAOC,UAKnC,OAAOU","file":"component---src-pages-browse-tsx-cd017ac8c1b2e1fb8b9a.js","sourcesContent":["import { graphql, Link, PageProps } from \"gatsby\";\nimport React, { FC } from \"react\";\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nimport { forHumans } from \"../tags\";\n\ntype BrowsePageData = {\n\tallMarkdownRemark: {\n\t\ttotalCount: number;\n\t\tgroup: {\n\t\t\ttag: string;\n\t\t\ttotalCount: number;\n\t\t}[];\n\t\tnodes: {\n\t\t\tfields: { slug: string };\n\t\t\tfrontmatter: { title: string; tags: string[] };\n\t\t}[];\n\t};\n};\n\nconst BrowsePage: FC<PageProps<BrowsePageData>> = ({ data, location }) => {\n\treturn (\n\t\t<Layout location={location}>\n\t\t\t<SEO\n\t\t\t\ttitle=\"Browse James's Knowledge Graph: Topics\"\n\t\t\t\tdescription=\"Browse James Tharpe's Knowledge Graph\"\n\t\t\t/>\n\t\t\t<h1>Browse the Knowledge Graph</h1>\n\t\t\t<ul>\n\t\t\t\t{data.allMarkdownRemark.group\n\t\t\t\t\t.sort((g1, g2) => g1.tag.localeCompare(g2.tag))\n\t\t\t\t\t.map((group, index) => (\n\t\t\t\t\t\t<li key={index}>\n\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\tto={`/${group.tag}`}\n\t\t\t\t\t\t\t\tstyle={{ fontSize: `${1 + group.totalCount / 100 - 0.01}em` }}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{data.allMarkdownRemark.nodes.find(\n\t\t\t\t\t\t\t\t\t(node) => node.fields.slug === `/${group.tag}/`\n\t\t\t\t\t\t\t\t)?.frontmatter.title || forHumans(group.tag)}\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t))}\n\t\t\t</ul>\n\t\t</Layout>\n\t);\n};\n\nexport const query = graphql`\n\tquery Browse {\n\t\tallMarkdownRemark(filter: { frontmatter: { draft: { ne: true } } }) {\n\t\t\ttotalCount\n\t\t\tgroup(field: frontmatter___tags) {\n\t\t\t\ttag: fieldValue\n\t\t\t\ttotalCount\n\t\t\t}\n\t\t\tnodes {\n\t\t\t\tfields {\n\t\t\t\t\tslug\n\t\t\t\t}\n\t\t\t\tfrontmatter {\n\t\t\t\t\ttitle\n\t\t\t\t\ttags\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n`;\n\nexport default BrowsePage;\n","import { WindowLocation } from \"@reach/router\";\nimport { graphql, useStaticQuery } from \"gatsby\";\n\nexport function forHumans(tag: string) {\n\treturn tag\n\t\t.split(\"-\")\n\t\t.map((word) =>\n\t\t\tword\n\t\t\t\t.split(\"/\")\n\t\t\t\t.map((word) => word[0].toUpperCase() + word.substr(1))\n\t\t\t\t.join(\" / \")\n\t\t)\n\t\t.join(\" \");\n}\n\nexport function tagFromSlug(path: string) {\n\tconst result = path.startsWith(\"/\") ? path.slice(1, path.length) : path;\n\treturn result.endsWith(\"/\") ? result.slice(0, -1) : result;\n}\n\ntype KnowledgeNetworkQueryResult = {\n\tallMarkdownRemark?: {\n\t\tnodes: {\n\t\t\texcerpt: string;\n\t\t\tfields: {\n\t\t\t\tslug: string;\n\t\t\t};\n\t\t\tfrontmatter: {\n\t\t\t\tdescription?: string;\n\t\t\t\ttitle?: string;\n\t\t\t\ttags?: string[];\n\t\t\t};\n\t\t}[];\n\t};\n};\n\nexport function useKnowledgeNetworkQuery(\n\tlocation: WindowLocation,\n\ttags?: string[]\n) {\n\tconst {\n\t\tallMarkdownRemark\n\t}: KnowledgeNetworkQueryResult = useStaticQuery(graphql`\n\t\tquery KnowledgeNetworkQuery {\n\t\t\tallMarkdownRemark(filter: { frontmatter: { draft: { ne: true } } }) {\n\t\t\t\tnodes {\n\t\t\t\t\texcerpt\n\t\t\t\t\tfrontmatter {\n\t\t\t\t\t\ttitle\n\t\t\t\t\t\ttags\n\t\t\t\t\t\tdescription\n\t\t\t\t\t}\n\t\t\t\t\tfields {\n\t\t\t\t\t\tslug\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t`);\n\n\tconst slug = tagFromSlug(location.pathname);\n\n\tconst result = {\n\t\t// Tagged with this article's slug\n\t\tarticles: allMarkdownRemark?.nodes.filter((article) =>\n\t\t\tarticle.frontmatter?.tags?.includes(slug)\n\t\t),\n\t\t// Tagged by this article\n\t\ttags: allMarkdownRemark?.nodes.filter((article) =>\n\t\t\ttags?.includes(article.fields.slug.slice(1, -1))\n\t\t)\n\t};\n\n\tif (result.tags && result.tags.length !== tags?.length) {\n\t\tthrow new Error(\n\t\t\t`Pages for one or more tags is missing for tag ${JSON.stringify(\n\t\t\t\ttags\n\t\t\t)} on page ${slug}. Received: ${JSON.stringify(\n\t\t\t\tresult.tags.map((t) => t.fields.slug)\n\t\t\t)}`\n\t\t);\n\t}\n\n\treturn result;\n}\n"],"sourceRoot":""}