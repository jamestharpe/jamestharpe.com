{"expireTime":9007200860997567000,"key":"transformer-remark-markdown-html-ac11f5cada77a00a94df8b7a15546bc2-gatsby-remark-graphgatsby-remark-prismjsgatsby-remark-katex-","val":"<h1>Recipe: PCF Cloud Native App</h1>\n<p>This recipe is based on the <a href=\"https://github.com/jamestharpe/pal-tracker\">PAL Tracker</a> example project.</p>\n<h2>1. Create the PCF Developer Environment</h2>\n<p>Developing Spring apps for PAL \"the Pivotal way\" requires <a href=\"https://git-scm.com/\">Git</a>, Java 8 or above, <a href=\"https://www.jetbrains.com/idea/\">IntelliJ</a>, the <a href=\"https://github.com/cloudfoundry/cli/releases\">Cloud Foundry CLI</a>, <a href=\"https://gradle.org/\">Gradle</a>, <a href=\"https://www.mysql.com/downloads/\">MySQL</a>, and <a href=\"https://flywaydb.org/\">Flyway</a>.</p>\n<p>Once the tools are installed, log in to Cloud Foundry (CF):</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">cf login -a <span class=\"token variable\">${CF_API_ENDPOINT}</span>\n<span class=\"token comment\"># ... follow the prompts ...</span></code></pre></div>\n<p>From there, the CLI can be used to explore the Cloud Foundry environment. Here are a few useful commands:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">cf target <span class=\"token comment\"># View the targeted organization or space</span>\ncf apps <span class=\"token comment\"># List applications in the target CF space</span>\ncf services <span class=\"token comment\"># List services in the target CF space</span>\ncf marketplace <span class=\"token comment\"># List services that can added to the target CF space</span></code></pre></div>\n<p>Additional information: <a href=\"https://prerequisites.pal.pivotal.io/\">Platform Acceleration Lab</a></p>\n<h2>2. Create a Spring Boot Application</h2>\n<p>Start with Gradle:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">gradle wrapper\n<span class=\"token function\">touch</span> build.gradle</code></pre></div>\n<p>Open the project in IntelliJ using <strong>File > Open</strong> rather than the import feature.</p>\n<p>In IntelliJ, update the <strong>build.gradle</strong> file to use the Java plug-in, reference the Maven Central repository, and apply the latest <a href=\"https://docs.spring.io/spring-boot/docs/2.1.2.RELEASE/gradle-plugin/reference/html/\">Spring Boot Gradle plug-in</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\"><span class=\"token comment\">// Gradle Configuration</span>\n\nbuildscript <span class=\"token punctuation\">{</span>\n\text <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// Set Spring Boot version as variable</span>\n\t\tspringBootVersion <span class=\"token operator\">=</span> <span class=\"token string gstring\">\"2.0.6.RELEASE\"</span>\n\t<span class=\"token punctuation\">}</span>\n\n\trepositories <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// Use Maven Central to get required packages</span>\n\t\t<span class=\"token function\">mavenCentral</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tdependencies <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// Add specified version of Spring Boot to class path</span>\n\t\tclasspath <span class=\"token string gstring\">\"org.springframework.boot:spring-boot-gradle-plugin:<span class=\"token expression\"><span class=\"token punctuation\">$</span>springBootVersion</span>\"</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// PAL Tracker Configuration</span>\n\nplugins <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// It's a Java Project!</span>\n\tid <span class=\"token string gstring\">\"java\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Apply the Spring Framework plug-in</span>\napply plugin<span class=\"token punctuation\">:</span> <span class=\"token string\">'org.springframework.boot'</span>\n\nrepositories <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Use Maven Central to get required packages</span>\n\t<span class=\"token function\">mavenCentral</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\ndependencies <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Add specified version of Spring Boot to class path</span>\n\t<span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string gstring\">\"org.springframework.boot:spring-boot-starter-web:<span class=\"token expression\"><span class=\"token punctuation\">$</span>springBootVersion</span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Next, create a file <strong>settings.gradle</strong> to set the name of the Gradle project. This determines the name of the JAR file when the application is built:</p>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\">rootProject<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string gstring\">\"pal-tracker\"</span></code></pre></div>\n<h3>Gradle Project Structure</h3>\n<p>Create a minimal <a href=\"https://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html\">standard Maven directory layout</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> -p src/main/java</code></pre></div>\n<p>Use IntelliJ to create a new package called <code class=\"language-text\">io.pivotal.pal.tracker</code>. This might require setting 'src/main/java` as the \"Sources Root\" first:</p>\n<p><img src=\"/img/intellij-sources-root.png\" alt=\"Set IntelliJ sources root\"></p>\n<p>With the basic project structure established, we can create a class for our application called <code class=\"language-text\">PalTrackerApplication</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">io<span class=\"token punctuation\">.</span>pivotal<span class=\"token punctuation\">.</span>pal<span class=\"token punctuation\">.</span>tracker</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootApplication</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Tell Spring Boot that this is our main entry point</span>\n<span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PalTrackerApplication</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Start the app</span>\n        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PalTrackerApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Later: Register beans with @Bean</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">@SpringBootApplication</code> annotation tells Spring Boot that this class contains the main entrypoint of the application. The call to <code class=\"language-text\">SpringApplication.run(...)</code> is boiler-plate to tell Spring to scan for the necessary components that will be <a href=\"https://martinfowler.com/articles/injection.html\">injected</a> into the controllers and other classes that make up the application.</p>\n<p>It's now possible to run the application, though you'll receive the generic Spring Boot Whitelabel Error Page.</p>\n<p>To make running the application, and later tests, easier you can delegate these actions to Gradle in IntelliJ under <strong>File > Settings > Build, Execution, Deployment > Gradle > Runner</strong>:</p>\n<p><img src=\"/img/intellij-delegate-build-run-gradle.png\" alt=\"Delegate build run and test actions to Gradle in IntelliJ\"></p>\n<h3>Create a REST Controller</h3>\n<p>With the basic project structure in place, we can create a simple REST controller by generating a new Java class and annotating it:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">io<span class=\"token punctuation\">.</span>pivotal<span class=\"token punctuation\">.</span>pal<span class=\"token punctuation\">.</span>tracker</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GetMapping</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>web<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">RestController</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Tells spring that this controller provides REST end-points</span>\n<span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WelcomeController</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// Maps \"GET\" requests to the application root</span>\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When the application is run and launched in the browser, the \"hello\" string is returned.</p>\n<h2>3. Push to Cloud Foundry</h2>\n<p>Build and deploy the application to Cloud Foundry:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">./gradlew build <span class=\"token comment\"># build the JAR</span>\ncf push -p build/libs/pal-tracker.jar <span class=\"token comment\"># deploy to CF</span></code></pre></div>\n<p>Get the application status:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">cf app pal-tracker <span class=\"token comment\"># Get application status</span></code></pre></div>\n<p>Get recent log output from the app:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">cf logs --recent</code></pre></div>\n<p>The output of <code class=\"language-text\">cf push</code> will include a URL. Opening the URL in a web browser should bring up the application.</p>"}