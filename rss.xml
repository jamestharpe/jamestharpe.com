<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[James Tharpe's Knowledge Feed]]></title><description><![CDATA[This website captures knowledge so I can refer to it later.]]></description><link>https://www.jamestharpe.com</link><generator>GatsbyJS</generator><lastBuildDate>Thu, 19 May 2022 19:15:10 GMT</lastBuildDate><item><title><![CDATA[Unstructured Data]]></title><description><![CDATA[Data without a pre-defined or easily derivable format]]></description><link>https://www.jamestharpe.com/unstructured-data/</link><guid isPermaLink="false">https://www.jamestharpe.com/unstructured-data/</guid><pubDate>Thu, 19 May 2022 18:54:53 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2022-05-19T18:54:53.000Z&quot;,
  &quot;description&quot;: &quot;Data without a pre-defined or easily derivable format&quot;,
  &quot;tags&quot;: [&quot;data&quot;],
  &quot;title&quot;: &quot;Unstructured Data&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Unstructured Data&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Unstructured data&quot;), &quot; are &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data/&quot;
  }, &quot;data&quot;), &quot; in an unknown, unpredictable, or internally inconsistent format. A common example of unstructured data is raw video data: Though some structure can be derived (for example, the color of a pixel in a given frame), it&apos;s difficult to \&quot;make sense\&quot; of the video, such as by identifying what objects are shown within a frame.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Semi-Structured Data]]></title><description><![CDATA[Data that partially adheres to a schema]]></description><link>https://www.jamestharpe.com/semi-structured-data/</link><guid isPermaLink="false">https://www.jamestharpe.com/semi-structured-data/</guid><pubDate>Thu, 19 May 2022 18:44:53 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2022-05-19T18:44:53.000Z&quot;,
  &quot;description&quot;: &quot;Data that partially adheres to a schema&quot;,
  &quot;tags&quot;: [&quot;data&quot;],
  &quot;title&quot;: &quot;Semi-Structured Data&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Semi-structured data&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Semi-structured data&quot;), &quot; are &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data/&quot;
  }, &quot;data&quot;), &quot; that contain entities that partially conform to a schema, or contain elements internally consistent enough to derive a partial schema.&quot;), mdx(&quot;h2&quot;, null, &quot;Example of semi-structured data&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;json&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-json&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-json&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;[&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot; name&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;John Doe\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; age&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;27&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot; name&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;Jane Doe\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; age&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;28&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; height&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;66&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;]&quot;)))), mdx(&quot;p&quot;, null, &quot;Note that the common elements &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;name&quot;), &quot; and &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;age&quot;), &quot; can be used to derive a schema, however &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;height&quot;), &quot; is unique to the second record and thus creates ambiguity in what could otherwise be a rigidly defined schema.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Structured Data]]></title><description><![CDATA[Data that strictly adheres to a schema]]></description><link>https://www.jamestharpe.com/structured-data/</link><guid isPermaLink="false">https://www.jamestharpe.com/structured-data/</guid><pubDate>Thu, 19 May 2022 18:30:53 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2022-05-19T18:30:53.000Z&quot;,
  &quot;description&quot;: &quot;Data that strictly adheres to a schema&quot;,
  &quot;tags&quot;: [&quot;data&quot;],
  &quot;title&quot;: &quot;Structured Data&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Structured data&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Structured data&quot;), &quot; are &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data/&quot;
  }, &quot;data&quot;), &quot; that strictly adhere to a schema to define the fields, types, and relationships that make up the entities that make up the data.&quot;), mdx(&quot;p&quot;, null, &quot;Structured data most often refers to &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../relational-databases/&quot;
  }, &quot;relational data&quot;), &quot; stored in a tabular format, though this is not always the case&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Data Governance]]></title><description><![CDATA[The people, processes, and standards that define how data is managed within an organization]]></description><link>https://www.jamestharpe.com/data-governance/</link><guid isPermaLink="false">https://www.jamestharpe.com/data-governance/</guid><pubDate>Fri, 01 Apr 2022 15:26:32 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2022-04-01T15:26:32.000Z&quot;,
  &quot;description&quot;: &quot;The people, processes, and standards that define how data is managed within an organization&quot;,
  &quot;tags&quot;: [&quot;databases&quot;, &quot;information-technology&quot;],
  &quot;title&quot;: &quot;Data Governance&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Data governance&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Data governance&quot;), &quot; is the set of people, processes, and standards that define how data is collected, stored, used, and secured. It generally consists of a governing body that sets policies and procedures and includes mechanisms for monitoring compliance with company standards and government regulations.&quot;), mdx(&quot;p&quot;, null, &quot;Effective data governance generally consists of:&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Policies and processes for handling sensitive data, such as personally identifiable information (PII), HIPAA data, and intellectual property.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Documented roles and accountability assignments for legal, regulatory, and security compliance.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Mechanisms for the enforcement of rules&quot;)), mdx(&quot;h2&quot;, null, &quot;Principles of data governance&quot;), mdx(&quot;p&quot;, null, &quot;Data governance is based on principles of transparency, accountability, and standardization.&quot;), mdx(&quot;h3&quot;, null, &quot;Transparency&quot;), mdx(&quot;p&quot;, null, &quot;In data governance, &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;transparency&quot;), &quot; refers to the availability and understandability of information related to data governance within an organization. Members of an organization must be able to easily find and understand the processes and standards of data governance, as well as understand why the standards are required, to effectively comply.&quot;), mdx(&quot;p&quot;, null, &quot;Effective transparency helps the organization avoid surprises, gain buy in from organization members, and to build trust in how the organization manages data.&quot;), mdx(&quot;h3&quot;, null, &quot;Accountability&quot;), mdx(&quot;p&quot;, null, &quot;In data governance, &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;accountability&quot;), &quot; refers to the roles members of an organization must fill regarding data. Each role should be clearly described, easily understood, and agreed upon by all stakeholders. Some roles may be very specific, with one or more people assigned to the role to serve the organization as a whole. However, other roles may be more generalized and apply to anyone that encounters data as part of their duties within the organization.&quot;), mdx(&quot;p&quot;, null, &quot;Effective accountability helps ensure the right people take the right actions to ensure compliance, and provides a clear means for remediation when issues are uncovered.&quot;), mdx(&quot;h3&quot;, null, &quot;Standardization&quot;), mdx(&quot;p&quot;, null, &quot;In data governance, &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;standardization&quot;), &quot; refers to how data is consistently organized and described so that data can be kept consistent and compliant.&quot;), mdx(&quot;p&quot;, null, &quot;Effective standardization helps the organization reduce the overhead of data management and compliance.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Python Poetry]]></title><description><![CDATA[An alternative to pip for Python package management]]></description><link>https://www.jamestharpe.com/python-poetry/</link><guid isPermaLink="false">https://www.jamestharpe.com/python-poetry/</guid><pubDate>Thu, 31 Mar 2022 14:05:09 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2022-03-31T14:05:09.000Z&quot;,
  &quot;description&quot;: &quot;An alternative to pip for Python package management&quot;,
  &quot;tags&quot;: [&quot;python&quot;, &quot;package-managers&quot;],
  &quot;title&quot;: &quot;Python Poetry&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Python Poetry&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Poetry&quot;), &quot; is a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../package-managers/&quot;
  }, &quot;package manager&quot;), &quot; for &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../python/&quot;
  }, &quot;Python&quot;), &quot; that replaces &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../python-pip/&quot;
  }, &quot;Pip&quot;), &quot; for managing packages. Notably, Poetry is capable of producing deterministic builds, separating development and production dependencies, and providing isolated virtual environments \&quot;out of the box\&quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;Poetry Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://python-poetry.org/&quot;
  }, &quot;Python Poetry official website&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Google Cloud]]></title><description><![CDATA[The hosted cloud platform provided by Google]]></description><link>https://www.jamestharpe.com/google-cloud/</link><guid isPermaLink="false">https://www.jamestharpe.com/google-cloud/</guid><pubDate>Thu, 31 Mar 2022 13:33:39 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2022-03-31T13:33:39.000Z&quot;,
  &quot;description&quot;: &quot;The hosted cloud platform provided by Google&quot;,
  &quot;tags&quot;: [&quot;cloud-platforms&quot;],
  &quot;title&quot;: &quot;Google Cloud&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Google Cloud&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Google Cloud&quot;), &quot; is a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../cloud-platforms/&quot;
  }, &quot;cloud platform&quot;), &quot; provided by Google.&quot;), mdx(&quot;h2&quot;, null, &quot;Google Cloud Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://cloud.google.com/&quot;
  }, &quot;Official Google Cloud website&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[DevOps Research and Assessment (DORA)]]></title><description><![CDATA[A research program at Google Cloud, notable for the State of DevOps reports]]></description><link>https://www.jamestharpe.com/dora/</link><guid isPermaLink="false">https://www.jamestharpe.com/dora/</guid><pubDate>Thu, 31 Mar 2022 13:30:34 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2022-03-31T13:30:34.000Z&quot;,
  &quot;description&quot;: &quot;A research program at Google Cloud, notable for the State of DevOps reports&quot;,
  &quot;tags&quot;: [&quot;software-engineering&quot;, &quot;management&quot;, &quot;data-analysis&quot;, &quot;google-cloud&quot;],
  &quot;title&quot;: &quot;DevOps Research and Assessment (DORA)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;DevOps Research and Assessment (DORA)&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;DevOps Research and Assessment (DORA)&quot;), &quot; is a research program at Google Cloud that uses behavioral science to investigate the practices, capabilities, and organizational techniques employed by high performance technology teams to impact organizational outcomes. DORA is most notable for it&apos;s annual State of DevOps Reports and for having identified the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../dora-metrics/&quot;
  }, &quot;four key metrics&quot;), &quot; thought to indicate the performance of &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../software-engineering/&quot;
  }, &quot;software development&quot;), &quot; teams.&quot;), mdx(&quot;h2&quot;, null, &quot;DORA Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.devops-research.com/research.html&quot;
  }, &quot;Official DORA website&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Management]]></title><description><![CDATA[The art of taking responsibility for the performance of others]]></description><link>https://www.jamestharpe.com/management/</link><guid isPermaLink="false">https://www.jamestharpe.com/management/</guid><pubDate>Thu, 31 Mar 2022 13:28:54 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2022-03-31T13:28:54.000Z&quot;,
  &quot;description&quot;: &quot;The art of taking responsibility for the performance of others&quot;,
  &quot;tags&quot;: [],
  &quot;title&quot;: &quot;Management&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Management&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Management&quot;), &quot; is a broad set of disciplines and practices to coordinate, administer, and account for work undertaken to achieve goals.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[DORA's Four Key Metrics]]></title><description><![CDATA[The four key metrics for software development team performance, as identified by DevOps Research and Assessment (DORA)]]></description><link>https://www.jamestharpe.com/dora-metrics/</link><guid isPermaLink="false">https://www.jamestharpe.com/dora-metrics/</guid><pubDate>Thu, 31 Mar 2022 13:23:51 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2022-03-31T13:23:51.000Z&quot;,
  &quot;description&quot;: &quot;The four key metrics for software development team performance, as identified by DevOps Research and Assessment (DORA)&quot;,
  &quot;tags&quot;: [&quot;dora&quot;, &quot;software-engineering&quot;, &quot;management&quot;, &quot;data-analysis&quot;],
  &quot;title&quot;: &quot;DORA&apos;s Four Key Metrics&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;DORA&apos;s four key metrics&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;DORA&apos;s four key metrics&quot;), &quot;, also known as &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;DORA metrics&quot;), &quot; or &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;the four key metrics&quot;), &quot;, are &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-analysis/&quot;
  }, &quot;metrics&quot;), &quot; thought to indicate the performance of &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../software-engineering/&quot;
  }, &quot;software engineering&quot;), &quot; teams, as identified by the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../dora/&quot;
  }, &quot;DevOps Research and Assessment (DORA) research program&quot;), &quot;.&quot;), mdx(&quot;p&quot;, null, &quot;These metrics are:&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Deployment Frequency&quot;), &quot; - How often successful production releases are made within an organization.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Lead Time for Changes&quot;), &quot; - The time it takes code to reach production after it was first committed to &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;../version-control/&quot;
  }, &quot;version control&quot;), &quot;.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Change Failure Rate&quot;), &quot; - The percentage of production deployments that fail or cause failure.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Time to Restore Service&quot;), &quot; - The time it takes an organization to recover from a production failure.&quot;)), mdx(&quot;p&quot;, null, &quot;The first two metrics, Deployment Frequency and Lead Time for Changes, measure the rate of forward progress whereas the latter two metrics, Change Failure Rate and Time to Restore Service, measure resistance to progress.&quot;), mdx(&quot;p&quot;, null, &quot;DORA scores organizations into groups of Elite, High, Medium, and Low performers based on these metrics.&quot;), mdx(&quot;h2&quot;, null, &quot;DORA metric resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.devops-research.com/quickcheck.html&quot;
  }, &quot;DORA DevOps Quick Check Quiz&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://cloud.google.com/blog/products/devops-sre/using-the-four-keys-to-measure-your-devops-performance&quot;
  }, &quot;Four Keys Project&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Azure Data Lake Gen2]]></title><description><![CDATA[A data lake storage solution built on Azure Blob Storage]]></description><link>https://www.jamestharpe.com/azure-data-lake-gen2/</link><guid isPermaLink="false">https://www.jamestharpe.com/azure-data-lake-gen2/</guid><pubDate>Wed, 16 Mar 2022 17:40:29 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;tags&quot;: [&quot;azure&quot;, &quot;data-lakes&quot;],
  &quot;title&quot;: &quot;Azure Data Lake Gen2&quot;,
  &quot;description&quot;: &quot;A data lake storage solution built on Azure Blob Storage&quot;,
  &quot;date&quot;: &quot;2022-03-16T17:40:29.000Z&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Azure Data Lake Gen2&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Azure Data Lake Gen2&quot;), &quot; is a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-lakes/&quot;
  }, &quot;data lake&quot;), &quot; storage solution, built on &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../azure/&quot;
  }, &quot;Azure&quot;), &quot; Blob Storage. It supports multiple storage accounts and includes a built-in storage explorer.&quot;), mdx(&quot;h2&quot;, null, &quot;Azure Data Lake Gen2 resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-introduction&quot;
  }, &quot;Azure Data Lake Gen2 documentation&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-explorer&quot;
  }, &quot;Azure Storage Explorer documentation&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Data Lakehouses]]></title><description><![CDATA[A combination of data lakes and data warehouses]]></description><link>https://www.jamestharpe.com/data-lakehouses/</link><guid isPermaLink="false">https://www.jamestharpe.com/data-lakehouses/</guid><pubDate>Wed, 16 Mar 2022 16:58:38 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2022-03-16T16:58:38.000Z&quot;,
  &quot;description&quot;: &quot;A combination of data lakes and data warehouses&quot;,
  &quot;tags&quot;: [&quot;data-lakes&quot;, &quot;data-warehouses&quot;, &quot;data-products&quot;, &quot;data-analysis&quot;, &quot;data-science&quot;],
  &quot;title&quot;: &quot;Data Lakehouses&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Data lakehouses&quot;), mdx(&quot;p&quot;, null, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;data lakehouse&quot;), &quot; is a type of &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-products/&quot;
  }, &quot;data product&quot;), &quot; that serves as both a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-lakes/&quot;
  }, &quot;data lake&quot;), &quot; and a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-warehouses/&quot;
  }, &quot;data warehouse&quot;), &quot;, with the idea that data lakes bring \&quot;the best of both worlds\&quot; together.&quot;), mdx(&quot;p&quot;, null, &quot;Typical data lake and data warehouse architecture treats each system independently, which increases the overall operational overhead and increases the overall data volume by requiring multiple copies of the same data. Data lakehouse architecture attempts to reduce that overhead by combining both architectures into a single system that can, when appropriate, share data in multiple contexts.&quot;), mdx(&quot;h2&quot;, null, &quot;Properties of an effective data lakehouse&quot;), mdx(&quot;p&quot;, null, &quot;An effective data lakehouse...&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Handles all types of data including structured, semi-structured, and unstructured&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Provides the ability to explore, preview, and query data through both visualizations and code (e.g. &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;../sql/&quot;
  }, &quot;SQL&quot;), &quot;)&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Reduces the need for &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;../etls/&quot;
  }, &quot;ETLs&quot;), &quot; through the ability to query the same data in multiple contexts&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Manages meta data for searching, tracking, and sharing data.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Stores data in open data formats such as Parquet, JSON, and CSV.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Decouples storage from compute so that each can scale independently&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Includes integrated security and governance controls that allow data to be properly classified and protected.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Serves all &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;../data-teams/&quot;
  }, &quot;data functions&quot;), &quot; within the organization.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Is cost effective compared to distinct data lakehouse and data warehouses solutions.&quot;)));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Data Lakes]]></title><description><![CDATA[Centralized repositories of raw data from a wide range of sources]]></description><link>https://www.jamestharpe.com/data-lakes/</link><guid isPermaLink="false">https://www.jamestharpe.com/data-lakes/</guid><pubDate>Wed, 16 Mar 2022 16:57:35 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2022-03-16T16:57:35.000Z&quot;,
  &quot;description&quot;: &quot;Centralized repositories of raw data from a wide range of sources&quot;,
  &quot;tags&quot;: [&quot;databases&quot;, &quot;data-analysis&quot;, &quot;data-science&quot;, &quot;data-products&quot;],
  &quot;title&quot;: &quot;Data Lakes&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Data lakes&quot;), mdx(&quot;p&quot;, null, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;data lake&quot;), &quot; is a type of &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-products/&quot;
  }, &quot;data product&quot;), &quot; that serves as a centralized repository of raw data sourced from a wide range of sources and stored for convenient retrieval for &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-analysis/&quot;
  }, &quot;analysis&quot;), &quot;.&quot;), mdx(&quot;p&quot;, null, &quot;Data lakes generally store data \&quot;as is\&quot; with little or no restructuring during ingestion. This makes data lakes relatively easy and inexpensive to create, especially compared with the highly formalized structures of &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-warehouses/&quot;
  }, &quot;data warehouses&quot;), &quot;.&quot;), mdx(&quot;p&quot;, null, &quot;Data lakes can also be especially useful in &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-science/&quot;
  }, &quot;data science&quot;), &quot; because they can store data not traditionally kept in &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../databases/&quot;
  }, &quot;databases&quot;), &quot;, such as audio and video files that may contain important data to train machine learning models alongside more \&quot;traditional\&quot;, tabular data.&quot;), mdx(&quot;h2&quot;, null, &quot;Data swamps: Challenges with data lakes&quot;), mdx(&quot;p&quot;, null, &quot;Poorly maintained data lakes are often referred to as &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;data swamps&quot;), &quot;. When data in a data lake is not subject to effective &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-governance/&quot;
  }, &quot;governance&quot;), &quot; or gains a reputation for being unreliable, the usefulness of a data lake can quickly decline.&quot;), mdx(&quot;p&quot;, null, &quot;Additionally, access controls can be difficult to establish in data lakes due to their centralized nature. Personally identifiable information, intellectual property, and other secure data can be easily leaked if not carefully controlled. This need to control access on a granular level can negate some of the apparent simplicity of a data lake. This means that most data lakes are not suitable for &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../business-intelligence/&quot;
  }, &quot;business intelligence&quot;), &quot; workloads.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Azure Synapse Analytics]]></title><description><![CDATA[An integrated set of data services on Microsoft Azure]]></description><link>https://www.jamestharpe.com/azure-synapse-analytics/</link><guid isPermaLink="false">https://www.jamestharpe.com/azure-synapse-analytics/</guid><pubDate>Wed, 16 Mar 2022 16:14:29 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;tags&quot;: [&quot;azure&quot;, &quot;data-warehouses&quot;, &quot;data-lakes&quot;, &quot;data-lakehouses&quot;],
  &quot;title&quot;: &quot;Azure Synapse Analytics&quot;,
  &quot;description&quot;: &quot;An integrated set of data services on Microsoft Azure&quot;,
  &quot;date&quot;: &quot;2022-03-16T16:14:29.000Z&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Azure Synapse Analytics&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Azure Synapse Analytics&quot;), &quot; is an integrated set of &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-lakes/&quot;
  }, &quot;data lake&quot;), &quot;, &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-warehouses/&quot;
  }, &quot;data warehouse&quot;), &quot;, and analytics services on &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../azure/&quot;
  }, &quot;Azure&quot;), &quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;Azure Synapse Analytics Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://azure.microsoft.com/en-us/services/synapse-analytics/&quot;
  }, &quot;Azure Synapse Analytics Official Homepage&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Version Control]]></title><description><![CDATA[A distributed version-control system to track changes, typically for software development projects]]></description><link>https://www.jamestharpe.com/version-control/</link><guid isPermaLink="false">https://www.jamestharpe.com/version-control/</guid><pubDate>Wed, 16 Mar 2022 14:50:02 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2022-03-16T14:50:02.000Z&quot;,
  &quot;description&quot;: &quot;A distributed version-control system to track changes, typically for software development projects&quot;,
  &quot;tags&quot;: [&quot;software-engineering&quot;],
  &quot;title&quot;: &quot;Version Control&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Version Control&quot;), mdx(&quot;p&quot;, null, &quot;In &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../software-engineering/&quot;
  }, &quot;software engineering&quot;), &quot;, &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;version control&quot;), &quot; is a system for managing changes to sets of files to aid in collaboration and to recall specific versions of files or entire projects at later times. Generally, version control allows you to restore files back to a previous state, compare changes over time, see who made each change, and see when each change was made.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Microsoft SQL Server  (MSSQL)]]></title><description><![CDATA[Microsoft's flagship relational database]]></description><link>https://www.jamestharpe.com/mssql/</link><guid isPermaLink="false">https://www.jamestharpe.com/mssql/</guid><pubDate>Tue, 08 Mar 2022 18:33:30 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2022-03-08T18:33:30.000Z&quot;,
  &quot;description&quot;: &quot;Microsoft&apos;s flagship relational database&quot;,
  &quot;tags&quot;: [&quot;relational-databases&quot;],
  &quot;title&quot;: &quot;Microsoft SQL Server  (MSSQL)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Microsoft SQL Server  (MSSQL)&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Microsoft SQL Server (MSSQL)&quot;), &quot; is a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../relational-databases/&quot;
  }, &quot;relational database&quot;), &quot; from Microsoft, known for its exceptional developer experience. MSSQL can be run on &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../windows/&quot;
  }, &quot;Windows&quot;), &quot; or &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../linux/&quot;
  }, &quot;Linux&quot;), &quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;MSSQL Recipes&quot;), mdx(&quot;h3&quot;, null, &quot;Install MSSQL on Ubuntu&quot;), mdx(&quot;p&quot;, null, &quot;See &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://docs.microsoft.com/en-us/sql/linux/quickstart-install-connect-ubuntu&quot;
  }, &quot;How to install MSSQL on Ubuntu&quot;), &quot;.&quot;), mdx(&quot;h3&quot;, null, &quot;List all stored procedures in a database&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;sql&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-sql&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-sql&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;SELECT&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;*&quot;), &quot; \n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;FROM&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;&lt;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;database&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;&gt;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;INFORMATION_SCHEMA&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;ROUTINES &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;-- replace &lt;database&gt; with the name of the database you&apos;re querying&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;WHERE&quot;), &quot; ROUTINE_TYPE &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&apos;PROCEDURE&apos;&quot;)))), mdx(&quot;h3&quot;, null, &quot;Start MSSQL Server on WSL2&quot;), mdx(&quot;p&quot;, null, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../wsl/&quot;
  }, &quot;WSL2&quot;), &quot; does not include &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../systemd/&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;a&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;systemd&quot;)), &quot;, therefore the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;systemctl&quot;), &quot; command will not work to start the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;mssql-server&quot;), &quot; service on WSL2-hosted Linux instances:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, &quot;$ systemctl status mssql-server --no-pager\nSystem has not been booted with systemd as init system &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;PID &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;. Can&apos;t operate.\nFailed to connect to bus: Host is down&quot;))), mdx(&quot;p&quot;, null, &quot;To remedy that, start the service directly:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;sudo&quot;), &quot; /opt/mssql/bin/sqlservr&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[systemd]]></title><description><![CDATA[A system and service manager for Linux]]></description><link>https://www.jamestharpe.com/systemd/</link><guid isPermaLink="false">https://www.jamestharpe.com/systemd/</guid><pubDate>Tue, 08 Mar 2022 18:32:13 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2022-03-08T18:32:13.000Z&quot;,
  &quot;description&quot;: &quot;A system and service manager for Linux&quot;,
  &quot;tags&quot;: [&quot;linux&quot;],
  &quot;title&quot;: &quot;systemd&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, mdx(&quot;code&quot;, {
    parentName: &quot;h1&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;systemd&quot;)), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;strong&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;systemd&quot;)), &quot; provides provides a system and service manager for &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../linux/&quot;
  }, &quot;Linux&quot;), &quot; that runs as PID 1 and starts the rest of the system.&quot;), mdx(&quot;h2&quot;, null, mdx(&quot;code&quot;, {
    parentName: &quot;h2&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;systemd&quot;), &quot; resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://man7.org/linux/man-pages/man1/systemd.1.html&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;a&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;systemd&quot;), &quot; man-page&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Conway's Law]]></title><description><![CDATA[An observation on the coupling of an organizations structure to system design]]></description><link>https://www.jamestharpe.com/conways-law/</link><guid isPermaLink="false">https://www.jamestharpe.com/conways-law/</guid><pubDate>Thu, 20 Jan 2022 19:26:31 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2022-01-20T19:26:31.000Z&quot;,
  &quot;description&quot;: &quot;An observation on the coupling of an organizations structure to system design&quot;,
  &quot;tags&quot;: [&quot;software-architecture&quot;],
  &quot;title&quot;: &quot;Conway&apos;s Law&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Conway&apos;s Law&quot;), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;Any organization that designs a system will produce a design whose structure is a copy of the organization&apos;s communication structure.&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;\u2014 Melvin E. Conway&quot;)), mdx(&quot;p&quot;, null, &quot;In other words, the way software is &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../software-architecture/&quot;
  }, &quot;architected&quot;), &quot; will tend to reflect the communication of the organization that built it. Pain points perceived as limitations of software are often therefore solved through organizational changes. Thus, an &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;inverse conway maneuver&quot;), &quot; is the architectural \&quot;trick\&quot; of achieving an architectural goal through the encouragement of structural changes to how the organization communicates.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Infrastructure as Code (IaC)]]></title><description><![CDATA[A technique to version-control and automate the deployment of virtualized infrastructure]]></description><link>https://www.jamestharpe.com/infrastructure-as-code/</link><guid isPermaLink="false">https://www.jamestharpe.com/infrastructure-as-code/</guid><pubDate>Fri, 14 Jan 2022 17:22:30 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2022-01-14T17:22:30.000Z&quot;,
  &quot;description&quot;: &quot;A technique to version-control and automate the deployment of virtualized infrastructure&quot;,
  &quot;redirect_from&quot;: [&quot;/techniques/infrastructure-as-code/&quot;],
  &quot;tags&quot;: [&quot;ci-cd&quot;, &quot;devops&quot;],
  &quot;title&quot;: &quot;Infrastructure as Code (IaC)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Infrastructure as Code (IaC)&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Infrastructure as Code (IaC)&quot;), &quot; is a technique often associated with &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../devops/&quot;
  }, &quot;DevOps&quot;), &quot; to manage infrastructure (networks, virtual machines, managed cloud services) with code. Code is typically &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../version-control/&quot;
  }, &quot;versioned&quot;), &quot; like any other source code, and deployed via &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../ci-cd/&quot;
  }, &quot;CI/CD&quot;), &quot; pipelines.&quot;), mdx(&quot;p&quot;, null, &quot;Key benefit of an effective IaC practice include:&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Simplifies collaboration on infrastructure&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Predictable, repeatable, consistent environments&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Re-usable infrastructure components&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Code also serves as documentation&quot;)));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Base64]]></title><description><![CDATA[A method to encode binary data as ASCII for transport over text-based protocols]]></description><link>https://www.jamestharpe.com/base64/</link><guid isPermaLink="false">https://www.jamestharpe.com/base64/</guid><pubDate>Sun, 26 Dec 2021 10:28:27 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-12-26T10:28:27.000Z&quot;,
  &quot;description&quot;: &quot;A method to encode binary data as ASCII for transport over text-based protocols&quot;,
  &quot;tags&quot;: [&quot;ascii&quot;, &quot;binary&quot;],
  &quot;title&quot;: &quot;Base64&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Base64&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Base64&quot;), &quot; is a set of methods to encode &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../binary/&quot;
  }, &quot;binary&quot;), &quot; data as &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../ascii/&quot;
  }, &quot;ASCII&quot;), &quot; text so that the data can be transported using text-based protocols, such as HTTP.&quot;), mdx(&quot;div&quot;, {
    style: {
      &quot;float&quot;: &quot;right&quot;,
      border: &quot;solid&quot;,
      width: &quot;40%&quot;,
      padding: &quot;2em&quot;
    }
  }, mdx(&quot;h2&quot;, null, &quot;Base64 Encoder / Decoder&quot;), mdx(Coder, {
    type: &quot;base64&quot;,
    mdxType: &quot;Coder&quot;
  })), mdx(&quot;h2&quot;, null, &quot;Base64url Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://datatracker.ietf.org/doc/html/rfc4648&quot;
  }, &quot;The Base16, Base32, and Base64 Data Encodings&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Base64url]]></title><description><![CDATA[The URL-compatible form of base64 encoding]]></description><link>https://www.jamestharpe.com/base64url/</link><guid isPermaLink="false">https://www.jamestharpe.com/base64url/</guid><pubDate>Sun, 26 Dec 2021 10:28:27 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-12-26T10:28:27.000Z&quot;,
  &quot;description&quot;: &quot;The URL-compatible form of base64 encoding&quot;,
  &quot;tags&quot;: [&quot;base64&quot;],
  &quot;title&quot;: &quot;Base64url&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Base64url&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Base64url&quot;), &quot; is a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../base64/&quot;
  }, &quot;base64&quot;), &quot;-based method to encode &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../binary/&quot;
  }, &quot;binary&quot;), &quot; data as URL-encoded ASCII text so that the data can be transported in a URL.&quot;), mdx(&quot;p&quot;, null, &quot;It differs from base64 in that it forbids line separators and provides alternative character mappings for characters that have special meaning in URLs. For example, &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;+&quot;), &quot; in base64 becomes &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;-&quot;), &quot; in base64url and &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/&quot;), &quot; in base64 becomes &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;_&quot;), &quot; in base64url.&quot;), mdx(&quot;div&quot;, {
    style: {
      &quot;float&quot;: &quot;right&quot;,
      border: &quot;solid&quot;,
      width: &quot;40%&quot;,
      padding: &quot;2em&quot;
    }
  }, mdx(&quot;h2&quot;, null, &quot;Base64 Encoder / Decoder&quot;), mdx(Coder, {
    type: &quot;base64url&quot;,
    mdxType: &quot;Coder&quot;
  })), mdx(&quot;h2&quot;, null, &quot;Base64url Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://datatracker.ietf.org/doc/html/rfc4648&quot;
  }, &quot;The Base16, Base32, and Base64 Data Encodings&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Snowflake Schemas]]></title><description><![CDATA[Star schemas with normalized dimension tables]]></description><link>https://www.jamestharpe.com/snowflake-schema/</link><guid isPermaLink="false">https://www.jamestharpe.com/snowflake-schema/</guid><pubDate>Wed, 22 Dec 2021 14:06:25 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-12-22T14:06:25.000Z&quot;,
  &quot;description&quot;: &quot;Star schemas with normalized dimension tables&quot;,
  &quot;tags&quot;: [&quot;data-warehouses&quot;, &quot;star-schemas&quot;],
  &quot;title&quot;: &quot;Snowflake Schemas&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Snowflake schemas&quot;), mdx(&quot;p&quot;, null, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;snowflake schemas&quot;), &quot; extends a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../star-schemas/&quot;
  }, &quot;star schema&quot;), &quot; to normalize dimension tables by breaking them into additional tables.&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;mermaid&quot;
  }, &quot;erDiagram\n\tsales_facts {\n\t\tint DateId\n\t\tint StoreId\n\t\tint ProductId\n\t\tint UnitCount\n\t\tfloat Total\n\t}\n\n    date_dims ||--o{ sales_facts : DateId\n\tstore_dims ||--o{ sales_facts : StoreId\n\tstore_dims }o--|| location_dims: LocationId\n\tproduct_dims ||--o{ sales_facts : ProductId\n\n\tdate_dims {\n\t\tint DateId\n\t\tDatetime Date\n\t\tint Day\n\t\tstring DayOfWeek\n\t\tint Month\n\t\tstring MonthName\n\t\tint Year\n\t}\n\n\tstore_dims {\n\t\tint StoreId\n\t\tint StoreNumber\n\t\tint LocationId\n\t}\n\n\tlocation_dims {\n\t\tint LocationId\n\t\tstring City\n\t\tstring State\n\t\tstring PostalCode\n\t}\n\n\tproduct_dims {\n\t\tint ProductId\n\t\tstring Sku\n\t\tstring Name\n\t\tstring Category\n\t}&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Star Schemas]]></title><description><![CDATA[Schemas to organize data by facts and dimensions for analysis]]></description><link>https://www.jamestharpe.com/star-schemas/</link><guid isPermaLink="false">https://www.jamestharpe.com/star-schemas/</guid><pubDate>Wed, 22 Dec 2021 12:54:25 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-12-22T12:54:25.000Z&quot;,
  &quot;description&quot;: &quot;Schemas to organize data by facts and dimensions for analysis&quot;,
  &quot;tags&quot;: [&quot;data-warehouses&quot;, &quot;olap&quot;],
  &quot;title&quot;: &quot;Star Schemas&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Star schemas&quot;), mdx(&quot;p&quot;, null, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;star schemas&quot;), &quot; organizes &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../relational-databases/&quot;
  }, &quot;relational data&quot;), &quot; into fact and dimension tables, typically to store data in a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-warehouses/&quot;
  }, &quot;data warehouse&quot;), &quot;. &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Fact tables&quot;), &quot; consist of measurements and metrics (e.g. sales) while &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;dimension tables&quot;), &quot; consist of related data that can be used for filtering and categorization (e.g. which products were sold).&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;mermaid&quot;
  }, &quot;erDiagram\n\tsales_facts {\n\t\tint DateId\n\t\tint StoreId\n\t\tint ProductId\n\t\tint UnitCount\n\t\tfloat Total\n\t}\n\n    date_dims ||--o{ sales_facts : DateId\n\tstore_dims ||--o{ sales_facts : StoreId\n\tproduct_dims ||--o{ sales_facts : ProductId\n\n\tdate_dims {\n\t\tint DateId\n\t\tDatetime Date\n\t\tint Day\n\t\tstring DayOfWeek\n\t\tint Month\n\t\tstring MonthName\n\t\tint Year\n\t}\n\n\tstore_dims {\n\t\tint StoreId\n\t\tint StoreNumber\n\t\tstring State\n\t}\n\n\tproduct_dims {\n\t\tint ProductId\n\t\tstring Sku\n\t\tstring Name\n\t\tstring Category\n\t}&quot;), mdx(&quot;p&quot;, null, &quot;This allows reports to be easily built. For example, to calculate TV sales by brand and year using &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../sql/&quot;
  }, &quot;SQL&quot;), &quot;:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;sql&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-sql&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-sql&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;SELECT&quot;), &quot;\n\tdate_dims&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;Year&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\tproduct_dims&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;Brand&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;SUM&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;sales_facts&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;UnitCount&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;as&quot;), &quot; TotalUnitsSold\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;FROM&quot;), &quot; sales_facts\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;INNER&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;JOIN&quot;), &quot; date_dims &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;ON&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;sales_facts&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;DateId &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; date_dims&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;DateId&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;INNER&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;JOIN&quot;), &quot; store_dims &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;ON&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;sales_facts&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;StoreId &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; store_dims&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;StoreId&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;INNER&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;JOIN&quot;), &quot; product_dims &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;ON&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;sales_facts&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;ProductId &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; product_dims&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;ProductId&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;WHERE&quot;), &quot; \n\tproduct_dims&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;Category &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&apos;TV&apos;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;GROUP&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;BY&quot;), &quot;\n\tproduct_dims&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;Brand&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\tdate_dims&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;Year&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;ORDER&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;BY&quot;), &quot;\n\tdate_dims&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;Year&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\tproduct_dims&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;Brand&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;-- Sample output -- &quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;/*\nYear\t| Brand \t| TotalUnitsSold\n---------------------------------------\n2020\t| Panasonic\t| 123\n2020\t| Samsung\t| 121\n2020\t| Sony\t\t| 234\n2021\t| Panasonic\t| 271\n2021\t| Samsung\t| 90\n2021\t| Sony\t\t| 115\n*/&quot;)))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Cloud platforms]]></title><description><![CDATA[Platforms for cloud computing services that can be treated like utilities]]></description><link>https://www.jamestharpe.com/cloud-platforms/</link><guid isPermaLink="false">https://www.jamestharpe.com/cloud-platforms/</guid><pubDate>Wed, 22 Dec 2021 12:27:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-12-22T12:27:11.000Z&quot;,
  &quot;description&quot;: &quot;Platforms for cloud computing services that can be treated like utilities&quot;,
  &quot;tags&quot;: [&quot;information-technology&quot;],
  &quot;title&quot;: &quot;Cloud platforms&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Cloud platforms&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Online Analytical Processing (OLAP)]]></title><description><![CDATA[A technique to create views and calculations from multi-dimensional data]]></description><link>https://www.jamestharpe.com/olap/</link><guid isPermaLink="false">https://www.jamestharpe.com/olap/</guid><pubDate>Wed, 22 Dec 2021 10:43:25 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-12-22T10:43:25.000Z&quot;,
  &quot;description&quot;: &quot;A technique to create views and calculations from multi-dimensional data&quot;,
  &quot;tags&quot;: [&quot;data-analysis&quot;, &quot;data-warehouses&quot;],
  &quot;title&quot;: &quot;Online Analytical Processing (OLAP)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Online Analytical Processing (OLAP)&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Online Analytical Processing (OLAP)&quot;), &quot; is a technique for storing and accessing &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data/&quot;
  }, &quot;data&quot;), &quot; in a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-warehouses/&quot;
  }, &quot;data warehouse&quot;), &quot; for multi-dimensional &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-analysis/&quot;
  }, &quot;data analysis&quot;), &quot; and is the foundational theory behind &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../star-schemas/&quot;
  }, &quot;star schema&quot;), &quot; design.&quot;), mdx(&quot;p&quot;, null, &quot;OLAP works by forming data into &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;OLAP cubes&quot;), &quot;, which are multi-dimensional arrays of interrelated data, then performing operations on those cubes. An &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;operation&quot;), &quot; is an extraction of data from an OLAP cube.&quot;), mdx(&quot;h2&quot;, null, &quot;OLAP cubes&quot;), mdx(&quot;p&quot;, null, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;dimension&quot;), &quot; is an attribute of interest in the data that can be summarized numerically. For example, as part of an analysis an analyst may wish to summarize orders by customer segment, product, and location; these are the dimensions of data being analyzed. Each &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;cell&quot;), &quot; of an OLAP cube represents some measure at the intersection of each dimension; for example, the order revenue for a specific product, for a specific customer segment, at a specific time.&quot;), mdx(&quot;h2&quot;, null, &quot;Types of OLAP cubes&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Multidimensional OLAP (MOLAP) cubes&quot;), &quot; store pre-computed data directly into a multidimensional database. This allows for excellent performance on complex calculations, slicing, and dicing, but can be difficult to scale for &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../big-data/&quot;
  }, &quot;large datasets&quot;), &quot;.&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Relational OLAP (ROLAP) cubes&quot;), &quot; store data as &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../relational-databases/&quot;
  }, &quot;relational data&quot;), &quot; in columns and rows and retrieves data on-demand to perform aggregate functions, meaning performance is directly related to the size of the queried dataset. ROLAP uses less storage than MOLAP because it does not store pre-computed data.&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Hybrid OLAP (HOLAP) cubes&quot;), &quot; combine MOLAP and ROLAP to get the benefits of both approaches.&quot;), mdx(&quot;h2&quot;, null, &quot;OLAP operations&quot;), mdx(&quot;p&quot;, null, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;slice&quot;), &quot; operation retrieves a subset of data from a cube that consists of data in which one dimension is filtered to have a single value. For example, summarizing orders for a single customer segment. Similarly, a &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;dice&quot;), &quot; operation filters data to form a cube within a cube, such as summarizing orders for a specific product in a specific location.&quot;), mdx(&quot;p&quot;, null, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;roll-up&quot;), &quot; operation aggregates data from a cube by combining dimension data. For example, by combining zip code data to form state-level data or by computing average sales revenue. Conversely, a &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;drill-down&quot;), &quot; operation breaks down rolled up data into finer-grained dimensions.&quot;), mdx(&quot;p&quot;, null, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;pivot&quot;), &quot; or &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;rotation&quot;), &quot; operation swaps two axises, such as the columns and rows.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Data warehouses]]></title><description><![CDATA[Data warehouses: Architecture, data flow, and related topics]]></description><link>https://www.jamestharpe.com/data-warehouses/</link><guid isPermaLink="false">https://www.jamestharpe.com/data-warehouses/</guid><pubDate>Wed, 22 Dec 2021 10:18:32 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-12-22T10:18:32.000Z&quot;,
  &quot;description&quot;: &quot;Data warehouses: Architecture, data flow, and related topics&quot;,
  &quot;tags&quot;: [&quot;databases&quot;, &quot;data-analysis&quot;, &quot;data-products&quot;],
  &quot;title&quot;: &quot;Data warehouses&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Data warehouses&quot;), mdx(&quot;p&quot;, null, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;data warehouse&quot;), &quot; is a type of &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-products/&quot;
  }, &quot;data product&quot;), &quot; that consists a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../databases/&quot;
  }, &quot;database&quot;), &quot; that stores data accumulated from a wide range of sources and stored for efficient retrieval for &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-analysis/&quot;
  }, &quot;analysis&quot;), &quot;. Data warehouses are generally structured for &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../olap/&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;a&quot;
  }, &quot;online analytical processing (OLAP)&quot;)), &quot; to allow for multiple data views, filters, and refinements based on multiple &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;dimensions&quot;), &quot;, which are attributes of interest to the business. This is most commonly achieved by implementing a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../star-schemas/&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;a&quot;
  }, &quot;star schema&quot;)), &quot;, which uses a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../relational-databases/&quot;
  }, &quot;relational model&quot;), &quot; to organize data into facts and dimensions.&quot;), mdx(&quot;p&quot;, null, &quot;A typical data warehouse architecture consists of multiple data sources, a staging area, the warehouse its self, and one or more data marts.&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;mermaid&quot;
  }, &quot;flowchart TD\n\tsubgraph sources[Data Sources]\n\t\tsource1[(Database)]\n\t\tsource2[Flat File]\n\tend\n\n\tsources--ETL--&gt;stage[(Staging Area)]\n\tstage--ETL--&gt;warehouse[(Data Warehouse)]\n\n\twarehouse--ETL--&gt;dm1[(Data Mart)]\n\twarehouse--ETL--&gt;dm2[(Data Mart)]&quot;), mdx(&quot;p&quot;, null, &quot;Data is extracted, transferred, and loaded from source to destination by &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../etls/&quot;
  }, &quot;ETL&quot;), &quot; processes, the sum of which constitute a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-pipelines/&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;a&quot;
  }, &quot;data pipeline&quot;)), &quot;. Subsets of the data in a data warehouse are sometimes broken down into &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;data marts&quot;), &quot;, which are essentially \&quot;miniature data warehouses\&quot; intended for a specific audience.&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;data staging area&quot;), &quot; is a temporary storage area for source data that helps quickly extract and consolidate source data, perform quality checks and cleansing, detecting changes, troubleshooting, and performing pre-aggregation functions before the data is transferred to the data warehouse. Staging areas are often ephemeral, though they may be maintained or archived. In modern data warehouse architecture, the staging area is often a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-lakes/&quot;
  }, &quot;data lake&quot;), &quot;.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Relational Databases]]></title><description><![CDATA[Databases that organize data into tables and support relationships through distinct keys]]></description><link>https://www.jamestharpe.com/relational-databases/</link><guid isPermaLink="false">https://www.jamestharpe.com/relational-databases/</guid><pubDate>Fri, 17 Dec 2021 21:03:25 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-12-17T21:03:25.000Z&quot;,
  &quot;description&quot;: &quot;Databases that organize data into tables and support relationships through distinct keys&quot;,
  &quot;tags&quot;: [&quot;databases&quot;, &quot;structured-data&quot;],
  &quot;title&quot;: &quot;Relational Databases&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Relational databases&quot;), mdx(&quot;p&quot;, null, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;relational database&quot;), &quot; is a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../databases/&quot;
  }, &quot;database&quot;), &quot; that organizes data into one or more tables. A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;table&quot;), &quot; is a collection of rows and columns. A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;column&quot;), &quot; defines the name, size, format, and type of &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data/&quot;
  }, &quot;data&quot;), &quot; stored for that column in each row. A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;row&quot;), &quot; is a related set of values that adhere to the constraints of the columns.&quot;), mdx(&quot;p&quot;, null, &quot;Relational databases require that each row be uniquely identifiable by a &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;key&quot;), &quot; made up of one or more columns. Rows can refer to other rows in the same database by a &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;foreign key&quot;), &quot; to form relationships that are validated and enforced by the underlying database. The vast majority of relational databases support &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../sql/&quot;
  }, &quot;SQL&quot;), &quot; for data selection and manipulation.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[SQL JOIN clauses: INNER, OUTER, LEFT, RIGHT, FULL]]></title><description><![CDATA[Match data across tables with JOIN clauses in SQL]]></description><link>https://www.jamestharpe.com/sql-joins/</link><guid isPermaLink="false">https://www.jamestharpe.com/sql-joins/</guid><pubDate>Fri, 17 Dec 2021 19:57:55 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-12-17T19:57:55.000Z&quot;,
  &quot;description&quot;: &quot;Match data across tables with JOIN clauses in SQL&quot;,
  &quot;tags&quot;: [&quot;sql&quot;],
  &quot;title&quot;: &quot;SQL JOIN clauses: INNER, OUTER, LEFT, RIGHT, FULL&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;SQL &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;h1&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;JOIN&quot;), &quot; clauses&quot;), mdx(&quot;p&quot;, null, &quot;A &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../sql/&quot;
  }, &quot;SQL&quot;), &quot; &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;strong&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;JOIN&quot;), &quot; clause&quot;), &quot; merges multiple tables into a single result set. For these demos, we&apos;ll use the following schema:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;mermaid&quot;
  }, &quot;erDiagram\n\tPeople |o--o{ EmailAddresses: PersonId\n\n\tPeople {\n\t\tint PersonId\n\t\tstring FirstName\n\t\tstring LastName\n\t}\n\n\tEmailAddresses {\n\t\tint EmailAddressId\n\t\tint PersonId\n\t\tstring EmailAddress\n\t}&quot;), mdx(&quot;h2&quot;, null, mdx(&quot;code&quot;, {
    parentName: &quot;h2&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;INNER JOIN&quot;)), mdx(&quot;p&quot;, null, &quot;An &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;INNER JOIN&quot;), &quot; matches column values across tables and only returns data where the specific match was found, typically by mapping a primary key to a foreign key.&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;sql&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-sql&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-sql&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;SELECT&quot;), &quot;\n\tPeople&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;FirstName&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\tPeople&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;LastName&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\tEmailAddresses&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;EmailAddress&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;FROM&quot;), &quot;\n\tPeople\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;INNER&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;JOIN&quot;), &quot;\n\tEmailAddresses &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;ON&quot;), &quot; People&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;PersonId &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; EmailAddresses&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;PersonId\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;-- Sample output --&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;/*\nFirstName\t| LastName \t| EmailAddress\n---------------------------------------\nMicky\t\t| Mouse\t\t| micky.mouse@disney.com\n*/&quot;)))), mdx(&quot;p&quot;, null, &quot;In this example the row for Micky Mouse in the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;People&quot;), &quot; table was matched with a row from the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;EmailAddresses&quot;), &quot; table through the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;PersonId&quot;), &quot; key.&quot;), mdx(&quot;h2&quot;, null, mdx(&quot;code&quot;, {
    parentName: &quot;h2&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;OUTER JOIN&quot;)), mdx(&quot;p&quot;, null, &quot;An &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;OUTER JOIN&quot;), &quot; works similarly to an &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;INNER JOIN&quot;), &quot; except that it will include results where no match was found by returning &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;null&quot;), &quot; values for columns in the unmatched second table.&quot;), mdx(&quot;h3&quot;, null, mdx(&quot;code&quot;, {
    parentName: &quot;h3&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;FULL OUTER JOIN&quot;)), mdx(&quot;p&quot;, null, &quot;A &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;FULL OUTER JOIN&quot;), &quot; returns all rows from both tables (with &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;null&quot;), &quot;s for unmatched results):&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;sql&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-sql&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-sql&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;SELECT&quot;), &quot;\n\tPeople&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;FirstName&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\tPeople&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;LastName&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\tEmailAddresses&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;EmailAddress&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;FROM&quot;), &quot;\n\tPeople\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;FULL&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;OUTER&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;JOIN&quot;), &quot;\n\tEmailAddresses &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;ON&quot;), &quot; People&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;PersonId &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; EmailAddresses&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;PersonId\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;-- Sample output --&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;/*\nFirstName\t| LastName \t| EmailAddress\n---------------------------------------\nMicky\t\t| Mouse\t\t| micky.mouse@disney.com\nDonald\t\t| Duck\t\t| null\nnull\t\t| null\t\t| mysterious@address.com\n*/&quot;)))), mdx(&quot;p&quot;, null, &quot;In this example:&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;The row for Micky Mouse in the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;People&quot;), &quot; table was matched with a row from the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;EmailAddresses&quot;), &quot; table through the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;PersonId&quot;), &quot; key.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;The row for Donald Duck in the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;People&quot;), &quot; table was returned, but the email address was &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;null&quot;), &quot;because there was no match in the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;EmailAddresses&quot;), &quot; table through the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;PersonId&quot;), &quot; key&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;The row for the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;mysterious&quot;), &quot; email address in the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;EmailAddresses&quot;), &quot; table was returned, but the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;FirstName&quot;), &quot; and &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;LastName&quot;), &quot; were &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;null&quot;), &quot; because there was no match in the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;People&quot;), &quot; table through the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;PersonId&quot;), &quot; key&quot;)), mdx(&quot;h3&quot;, null, mdx(&quot;code&quot;, {
    parentName: &quot;h3&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;LEFT OUTER JOIN&quot;)), mdx(&quot;p&quot;, null, &quot;A &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;LEFT OUTER JOIN&quot;), &quot; will return all rows from the left table with &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;null&quot;), &quot; for non-matching right side table rows:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;sql&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-sql&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-sql&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;SELECT&quot;), &quot;\n\tPeople&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;FirstName&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\tPeople&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;LastName&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\tEmailAddresses&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;EmailAddress&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;FROM&quot;), &quot;\n\tPeople\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;LEFT&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;OUTER&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;JOIN&quot;), &quot;\n\tEmailAddresses &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;ON&quot;), &quot; People&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;PersonId &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; EmailAddresses&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;PersonId\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;-- Sample output --&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;/*\nFirstName\t| LastName \t| EmailAddress\n---------------------------------------\nMicky\t\t| Mouse\t\t| micky.mouse@disney.com\nDonald\t\t| Duck\t\t| null\n*/&quot;)))), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;The row for Micky Mouse in the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;People&quot;), &quot; table was matched with a row from the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;EmailAddresses&quot;), &quot; table through the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;PersonId&quot;), &quot; key.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;The row for Donald Duck in the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;People&quot;), &quot; table was returned, but the email address was &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;null&quot;), &quot;because there was no match in the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;EmailAddresses&quot;), &quot; table through the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;PersonId&quot;), &quot; key&quot;)), mdx(&quot;h3&quot;, null, mdx(&quot;code&quot;, {
    parentName: &quot;h3&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;RIGHT OUTER JOIN&quot;)), mdx(&quot;p&quot;, null, &quot;A &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;RIGHT OUTER JOIN&quot;), &quot; will return all rows from the right table with &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;null&quot;), &quot; for non-matching left side table rows:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;sql&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-sql&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-sql&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;SELECT&quot;), &quot;\n\tPeople&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;FirstName&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\tPeople&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;LastName&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\tEmailAddresses&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;EmailAddress&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;FROM&quot;), &quot;\n\tPeople\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;LEFT&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;OUTER&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;JOIN&quot;), &quot;\n\tEmailAddresses &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;ON&quot;), &quot; People&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;PersonId &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; EmailAddresses&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;PersonId\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;-- Sample output -- &quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;/*\nFirstName\t| LastName \t| EmailAddress\n---------------------------------------\nMicky\t\t| Mouse\t\t| micky.mouse@disney.com\nnull\t\t| null\t\t| mysterious.email@address.com\n*/&quot;)))), mdx(&quot;p&quot;, null, &quot;In this example:&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;The row for Micky Mouse in the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;People&quot;), &quot; table was matched with a row from the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;EmailAddresses&quot;), &quot; table through the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;PersonId&quot;), &quot; key.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;The row for the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;mysterious&quot;), &quot; email address in the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;EmailAddresses&quot;), &quot; table was returned, but the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;FirstName&quot;), &quot; and &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;LastName&quot;), &quot; were &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;null&quot;), &quot; because there was no match in the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;People&quot;), &quot; table through the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;PersonId&quot;), &quot; key&quot;)));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Structured Query Language (SQL)]]></title><description><![CDATA[The language of relational data]]></description><link>https://www.jamestharpe.com/sql/</link><guid isPermaLink="false">https://www.jamestharpe.com/sql/</guid><pubDate>Fri, 17 Dec 2021 17:46:55 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-12-17T17:46:55.000Z&quot;,
  &quot;description&quot;: &quot;The language of relational data&quot;,
  &quot;tags&quot;: [&quot;computer-languages&quot;, &quot;relational-databases&quot;],
  &quot;title&quot;: &quot;Structured Query Language (SQL)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Structured Query Language (SQL)&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Structured Query Language (SQL)&quot;), &quot;, sometimes pronounced \&quot;sequel\&quot;, is a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../computer-languages/&quot;
  }, &quot;programming language&quot;), &quot; designed to query and manipulate relational data. Though SQL was designed for use with &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../relational-databases/&quot;
  }, &quot;relational databases&quot;), &quot;, many other types of databases can support SQL.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[PostgreSQL]]></title><description><![CDATA[A popular open-source relational database]]></description><link>https://www.jamestharpe.com/postgresql/</link><guid isPermaLink="false">https://www.jamestharpe.com/postgresql/</guid><pubDate>Fri, 17 Dec 2021 17:34:30 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-12-17T17:34:30.000Z&quot;,
  &quot;description&quot;: &quot;A popular open-source relational database&quot;,
  &quot;tags&quot;: [&quot;relational-databases&quot;, &quot;open-source-software&quot;],
  &quot;title&quot;: &quot;PostgreSQL&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;PostgreSQL&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;PostgreSQL&quot;), &quot;, often referred to as simply &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;postgres&quot;), &quot;, is an &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../open-source-software/&quot;
  }, &quot;open-source software&quot;), &quot; &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../relational-databases/&quot;
  }, &quot;relational database&quot;), &quot;, known for its extensibility. PostgreSQL allows developers to define their own data types, and build custom functions from &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../computer-languages/&quot;
  }, &quot;programming languages&quot;), &quot; other than SQL.&quot;), mdx(&quot;h2&quot;, null, &quot;PostgreSQL resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.postgresql.org/&quot;
  }, &quot;Official PostgreSQL website&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.postgresql.org/docs/&quot;
  }, &quot;PostgreSQL documentation&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Backlog Coupling]]></title><description><![CDATA[When work on one team or product excessively depends on work from another team or product]]></description><link>https://www.jamestharpe.com/backlog-coupling/</link><guid isPermaLink="false">https://www.jamestharpe.com/backlog-coupling/</guid><pubDate>Tue, 07 Dec 2021 18:30:01 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-12-07T18:30:01.000Z&quot;,
  &quot;description&quot;: &quot;When work on one team or product excessively depends on work from another team or product&quot;,
  &quot;tags&quot;: [&quot;project-management&quot;],
  &quot;title&quot;: &quot;Backlog Coupling&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Backlog coupling&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Backlog coupling&quot;), &quot; is when work defined in one &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../product-management/&quot;
  }, &quot;product backlog&quot;), &quot; depends on work from one or more other product backlogs to be completed before the work can be completed. While some coupling is inevitable, &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;excessive&quot;), &quot; coupling between backlogs causes productivity and responsiveness to suffer and usually indicates a team topology or architectural problem. When unaddressed, backlog coupling damages a team&apos;s ability to account for outcomes, and ultimately erodes motivation and leads to apathy because it becomes easy to shift blame and give up on ideas to improve.&quot;), mdx(&quot;h2&quot;, null, &quot;Backlog coupling resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://martinfowler.com/articles/talk-about-platforms.html#TheImpactOfx201cbacklogCouplingx201d&quot;
  }, &quot;What I talk about when I talk about platforms by Evan Bottcher / Backlog Coupling&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Amazon Redshift]]></title><description><![CDATA[A columnar data warehouse solution on AWS]]></description><link>https://www.jamestharpe.com/amazon-redshift/</link><guid isPermaLink="false">https://www.jamestharpe.com/amazon-redshift/</guid><pubDate>Sat, 04 Dec 2021 20:19:30 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-12-04T20:19:30.000Z&quot;,
  &quot;description&quot;: &quot;A columnar data warehouse solution on AWS&quot;,
  &quot;redirect_from&quot;: [&quot;/tools/cloudformation/&quot;],
  &quot;tags&quot;: [&quot;aws&quot;, &quot;data-warehouses&quot;, &quot;columnar-databases&quot;],
  &quot;title&quot;: &quot;Amazon Redshift&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Amazon Redshift&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Amazon Redshift&quot;), &quot; is a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../columnar-databases/&quot;
  }, &quot;columnar&quot;), &quot; &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-warehouses/&quot;
  }, &quot;data warehouse&quot;), &quot; solution on &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../aws/&quot;
  }, &quot;AWS&quot;), &quot; that supports PostgreSQL queries. As a managed service, it simplifies automation of tasks such as backups, replication, and auto-scaling. &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Amazon Redshift Spectrum&quot;), &quot; extends Redshift to allow querying of S3 buckets so that data does not need to be loaded directly into a Redshift database.&quot;), mdx(&quot;p&quot;, null, &quot;A key difference between Redshift and relational &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../databases/&quot;
  }, &quot;databases&quot;), &quot; is that it uses a columnar architecture, which means that data is stored by column rather than by row.&quot;), mdx(&quot;h2&quot;, null, &quot;Redshift architecture&quot;), mdx(&quot;p&quot;, null, &quot;A Redshift cluster consists of a leader node and one or more compute nodes. Queries to Redshift are sent to the leader node&apos;s SQL endpoint, which breaks the work down into jobs that are forwarded to the compute nodes where they are processed in parallel.&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;mermaid&quot;
  }, &quot;flowchart TD\n    Client --&gt;|SQL Query| Leader[Leader Node]\n\n\tsubgraph Redshift Cluster\n\t\tLeader --&gt; C1[Compute Node 1]\n\t\tLeader --&gt; CDot[...]\n\t\tLeader --&gt; CN[Compute Node N]\n\t\tC1 --&gt; Leader\n\t\tCDot --&gt; Leader\n\t\tCN --&gt; Leader\n\tend\n\n\tLeader --&gt;|Data| Client&quot;), mdx(&quot;h2&quot;, null, &quot;Redshift table design&quot;), mdx(&quot;p&quot;, null, &quot;A well designed Redshift table will ensure even distribution of data across nodes so that jobs executed by each node will complete at roughly the same time. Data should also be sorted to minimize the need for table scans. Data may also be compressed to reduce disk space requirements and minimize I/O.&quot;), mdx(&quot;h3&quot;, null, &quot;Table distribution styles&quot;), mdx(&quot;table&quot;, null, mdx(&quot;thead&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;thead&quot;
  }, mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Style&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Description&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Benefits&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Drawbacks&quot;))), mdx(&quot;tbody&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;ALL&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Each node contains the full table&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Maximizes performance&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Requires excessive storage&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;AUTO&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Use &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;ALL&quot;), &quot; initially, switch to &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;EVEN&quot;), &quot; when the table gets too large&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Balances trade-offs between &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;ALL&quot;), &quot; and &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;EVEN&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Can be the \&quot;worst of both worlds\&quot;&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;EVEN&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Data is round-robin partitioned&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Ensures even distribution of data across nodes&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Poor join performance&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;KEY&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Data is distributed based on a table colum&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Balances performance with storage&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Requires evenly distributed data&quot;)))), mdx(&quot;h4&quot;, null, &quot;The &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;h4&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;ALL&quot;), &quot; distribution style&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;ALL&quot;), &quot; distribution style stores the full table on each node. While this can improve performance dramatically, it can also increase storage needs dramatically.&quot;), mdx(&quot;p&quot;, null, &quot;Use the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;ALL&quot;), &quot; distribution style for:&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Smaller, frequently used dimension tables&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Tables where performance is critical&quot;)), mdx(&quot;h4&quot;, null, &quot;The &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;h4&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;AUTO&quot;), &quot; distribution style&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;AUTO&quot;), &quot; distribution style is the default style used by Redshift and uses &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;ALL&quot;), &quot; initially, then switches to &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;EVEN&quot;), &quot; when the table gets too large. Once the table is switched to &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;EVEN&quot;), &quot;, it will not revert to &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;ALL&quot;), &quot; even if the table size decreases.&quot;), mdx(&quot;h4&quot;, null, &quot;The &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;h4&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;EVEN&quot;), &quot; distribution style&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;EVEN&quot;), &quot; distribution style distributes data evenly across all nodes in round-robin fashion, ensuring an even but essentially random distribution.&quot;), mdx(&quot;p&quot;, null, &quot;Use the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;EVEN&quot;), &quot; distribution style for:&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Tables that aren&apos;t usually joined with other tables&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;When you can&apos;t decide between other distribution styles&quot;)), mdx(&quot;h4&quot;, null, &quot;The &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;h4&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;KEY&quot;), &quot; distribution style&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;KEY&quot;), &quot; distribution style distributes data across nodes based on values from one column, referred to as the &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;distribution key column&quot;), &quot;. All records with the same value for the distribution column will be stored on the same node (the column names do not need to match, only the values). The same distribution pattern applies for other tables with the same distribution key column value which can improve performance through a reduced need for communication across nodes.&quot;), mdx(&quot;p&quot;, null, &quot;Use the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;KEY&quot;), &quot; distribution styles for:&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Keys that are evenly distributed&quot;)), mdx(&quot;h3&quot;, null, &quot;Sort strategies&quot;), mdx(&quot;p&quot;, null, &quot;In Redshift, a &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;sort key&quot;), &quot; specifies the order in which data is stored on disk. Each table can specify one of three sort options:&quot;), mdx(&quot;table&quot;, null, mdx(&quot;thead&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;thead&quot;
  }, mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Strategy&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Description&quot;))), mdx(&quot;tbody&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;sortkey&quot;), &quot; (simple)&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Data is sorted by a single column&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;compound sortkey&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Data is hierarchically sorted by multiple columns&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;interleaved sortkey&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Data is independently sorted by multiple columns (this requires additional disk space)&quot;)))), mdx(&quot;p&quot;, null, &quot;Interleaved sorted tables tend to perform worse for queries that filter by the simple or compound sort-keys, as long as the filters make use of the hierarchy defined by compound keys, due to it&apos;s more complex storage structure. However, virtually all other filters will perform better with an interleaved sort-key with the trade-off that additional storage space is required.&quot;), mdx(&quot;h2&quot;, null, &quot;Amazon Redshift Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://aws.amazon.com/redshift/&quot;
  }, &quot;Amazon Redshift Homepage&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://docs.aws.amazon.com/redshift/index.html&quot;
  }, &quot;Amazon Redshift Documentation&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://docs.aws.amazon.com/redshift/latest/dg/c_high_level_system_architecture.html&quot;
  }, &quot;Redshift high-level System Architecture&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://aws.amazon.com/redshift/pricing/&quot;
  }, &quot;Redshift Pricing Guide&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://aws.amazon.com/blogs/big-data/10-best-practices-for-amazon-redshift-spectrum/&quot;
  }, &quot;Redshift Best Practices&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Publish/Subscribe Pattern (Pub-sub)]]></title><description><![CDATA[A software engineering design pattern to separate responsibility between commands and queries]]></description><link>https://www.jamestharpe.com/pub-sub/</link><guid isPermaLink="false">https://www.jamestharpe.com/pub-sub/</guid><pubDate>Sun, 28 Nov 2021 13:34:25 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-28T13:34:25.000Z&quot;,
  &quot;description&quot;: &quot;A software engineering design pattern to separate responsibility between commands and queries&quot;,
  &quot;tags&quot;: [&quot;swe-design-patterns&quot;, &quot;software-architecture&quot;, &quot;distributed-systems&quot;],
  &quot;title&quot;: &quot;Publish/Subscribe Pattern (Pub-sub)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Publish/subscribe pattern (pub-sub)&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;publish/subscribe pattern (pub-sub)&quot;), &quot; is a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../software-engineering/&quot;
  }, &quot;software engineering&quot;), &quot; &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../swe-design-patterns/&quot;
  }, &quot;design pattern&quot;), &quot; used commonly in &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../distributed-systems/&quot;
  }, &quot;distributed systems&quot;), &quot; to communicate asynchronously and parallelize tasks across applications, &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-pipelines/&quot;
  }, &quot;data pipelines&quot;), &quot;, and &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../microservices/&quot;
  }, &quot;services&quot;), &quot; in a decoupled way.&quot;), mdx(&quot;p&quot;, null, &quot;Events are usually published by a single publisher and consumed by multiple subscribers. &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Publishers&quot;), &quot; are systems of record applications that publish events while &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;subscribers&quot;), &quot; consume and process events. Publishers generally publishes events without regard to how or when subscribers will process them. &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Events&quot;), &quot; are simply records of \&quot;something that happened\&quot; (e.g. \&quot;customer added\&quot;, \&quot;order placed\&quot;, and so on).&quot;), mdx(&quot;h2&quot;, null, &quot;Designing event models&quot;), mdx(&quot;p&quot;, null, &quot;For events to be useful, they must carry enough information for subscribers to process them successfully. Given that it&apos;s impractical, and maybe impossible, to foresee all the potential subscribers of an event, it&apos;s useful to take a methodical approach to event model design.&quot;), mdx(&quot;p&quot;, null, &quot;One such approach is to use a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../transitive-closure/&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;a&quot;
  }, &quot;transitive closure&quot;)), &quot; which calculates the relationships that would need to be added between entities to directly (as opposed to indirectly) associate related data. For example, take the following relational schema used to book musical acts at various venues:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;mermaid&quot;
  }, &quot;erDiagram\n\tBANDS {\n        int id\n        string name\n    }\n\tBAND-MEMBERS {\n        int bandId\n        int personId\n    }\n\tPEOPLE {\n        int id\n        string name\n    }\n\tSHOWS {\n\t\tint bandId\n\t\tint venueId\n\t\tstring name\n\t\tdate start\n\t\tdate end\n\t}\n\tSHOW-CHECKLIST {\n\t\tint id\n\t\tint showId\n\t\tstring toDo\n\t}\n\tVENUES {\n\t\tint id\n\t\tstring street\n\t\tstring postalCode\n\t}\n\n\tBANDS ||--o{ SHOWS : schedule\n\tBANDS ||--|{ BAND-MEMBERS : have\n\tBAND-MEMBERS }o--|| PEOPLE : are\n\tSHOWS }o--|| VENUES : have\n\tSHOWS }|--o{ SHOW-CHECKLIST: has&quot;), mdx(&quot;p&quot;, null, &quot;To generate an \&quot;show scheduled\&quot; event, we need to determine what information a subscriber would need to know whenever an event is booked. We can calculate that by identifying all of the &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;direct and indirect&quot;), &quot; relationships to the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;SHOWS&quot;), &quot; entities and then demoralize them into the event structure.&quot;), mdx(&quot;p&quot;, null, &quot;The first step is to follow the relationships &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;from&quot;), &quot; the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;SHOWS&quot;), &quot; table. In this case, we see that a show is defined by the associate BAND and VENUE entities, thus some data from the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;BANDS&quot;), &quot; and &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;VENUES&quot;), &quot; records are likely to be useful to consumers of the \&quot;show scheduled\&quot; event. However, to &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;BANDS&quot;), &quot; have &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;BAND-MEMBERS&quot;), &quot; which have &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;PEOPLE&quot;), &quot;, thus it likely makes sense to include data from these entities as well.&quot;), mdx(&quot;p&quot;, null, &quot;The second step is to follow the relationships &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;to&quot;), &quot; the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;SHOWS&quot;), &quot; table. In this case, we see that each SHOW can have zero or more CHECKLIST items, thus some data from the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;SHOW-CHECKLIST&quot;), &quot; is likely to be useful as well.&quot;), mdx(&quot;p&quot;, null, &quot;Finally, with all the required information identified, we can design a reasonable schema for the \&quot;show scheduled\&quot; event:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;mermaid&quot;
  }, &quot;erDiagram\n\tSHOW_SCHEDULED_EVENT {\n\t\tint showId\n        string showName\n\t\tdate startDate\n\t\tdate endDate\n\t\tstring bandName\n\t\tlist peopleNames\n\t\tstring venueName\n\t\tlist toDos\n    }&quot;), mdx(&quot;p&quot;, null, &quot;Though this can seem excessive or a violation of &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../yagni/&quot;
  }, &quot;YAGNI&quot;), &quot; because this data can be looked up with only the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;id&quot;), &quot; of the added &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;SHOWS&quot;), &quot; entity, it&apos;s not. Such lookups can create excessive \&quot;chatter\&quot; that actually consumes more network, storage, and compute cycles than the larger payload would tend to save. There is also the risk that the underlying data changes between when the event was published and when it was processed, leaving subscribers with inaccurate data about the event &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;when it occurred&quot;), &quot;.&quot;), mdx(&quot;p&quot;, null, &quot;Finally, this level of de-normalization can reduce dependence on message order. If, for example, we relied on the \&quot;venue created\&quot; event to be processed &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;before&quot;), &quot; the \&quot;show scheduled\&quot; event, ensuring the messages are processed in sequence can add complexity and reduce scalability.&quot;), mdx(&quot;h2&quot;, null, &quot;Subscriber patterns&quot;), mdx(&quot;h3&quot;, null, &quot;Competing consumer pattern&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;competing consumer pattern&quot;), &quot; organizes subscribers by type to simplify how services scale. When there are multiple types of subscribers, each events should be consumed by all types of subscriber. However, when there are multiple instances of a single type of subscriber then each event should only be consumed by a single subscriber instance.&quot;), mdx(&quot;p&quot;, null, &quot;To manage this distinction, subscribers can be grouped into exchanges. An &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;exchange&quot;), &quot; is a message queue that serves a single type of subscriber. This allows the system to scale based on the workload (i.e. queue size) and avoid redundant event processing.&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;mermaid&quot;
  }, &quot;flowchart TD\n    Publisher --&gt;|publish| Exchange((Exchange))\n\tExchange --&gt;|push| Q1[(Queue 1)]\n\tExchange --&gt;|push| Q2[(Queue 2)]\n\tExchange --&gt;|push| Q3[(Queue 3)]\n\tQ1 --&gt;|pull| Q1P[Q1 Subscriber Pool]\n\tQ2 --&gt;|pull| Q2P[Q2 Subscriber Pool]\n\tQ3 --&gt;|pull| Q3P[Q3 Subscriber Pool]&quot;), mdx(&quot;p&quot;, null, &quot;Each subscriber in the subscriber pool pulls from the same queue, ensuring each message is only processed once.&quot;), mdx(&quot;h3&quot;, null, &quot;Commutative message handling &quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Commutative message handling&quot;), &quot; is a desirable property of subscribers where the order in which messages are processed doesn&apos;t matter, similar to algebraic property (i.e. &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;a&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;+&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;b&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;b&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;+&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;a&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;a + b = b + a&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.66666em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.08333em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;a&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2222222222222222em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mbin&quot;
  }, &quot;+&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2222222222222222em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.69444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;b&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.77777em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.08333em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;b&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2222222222222222em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mbin&quot;
  }, &quot;+&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2222222222222222em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.43056em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;a&quot;))))), &quot;). Though message queues typically deliver messages in the order they were received, message processing may error out and have to be retried as later messages are successfully processed, or a later message may simply get processed faster than an earlier message.&quot;), mdx(&quot;p&quot;, null, &quot;Messages of the same type can be made commutative by attaching a timestamp to the event. For example, if an \&quot;venue description changed\&quot; event is processed out of order, it could cause the subscriber to revert its venue description to the older version. However, if the event includes a timestamp and the stored data is newer than the message timestamp, then the message can be safely discarded.&quot;), mdx(&quot;p&quot;, null, &quot;Messages of different types can be made commutative by storing related information as it arrives. For example, if a show is scheduled for a venue and then the venue description is changed, we can&apos;t know for sure that the related messages will be processed in that order. Thus, if the \&quot;venue description changed\&quot; event is processed before the \&quot;show scheduled\&quot; event (even though it happened afterward), we could process stale venue when the \&quot;show scheduled\&quot; event is processed. To prevent this, the venue data should &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;also&quot;), &quot; be saved by the subscriber, along with the timestamp. Then when the \&quot;show scheduled\&quot; event is processed, the timestamp can be compared to the timestamps for related data and only \&quot;new\&quot; information processed.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Content-Addressed Storage (CAS)]]></title><description><![CDATA[A method to store information so that it can be retrieved based on content rather than location]]></description><link>https://www.jamestharpe.com/content-addressed-storage/</link><guid isPermaLink="false">https://www.jamestharpe.com/content-addressed-storage/</guid><pubDate>Sun, 28 Nov 2021 09:58:25 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-28T09:58:25.000Z&quot;,
  &quot;description&quot;: &quot;A method to store information so that it can be retrieved based on content rather than location&quot;,
  &quot;tags&quot;: [&quot;swe-design-patterns&quot;, &quot;distributed-systems&quot;, &quot;hash-functions&quot;],
  &quot;title&quot;: &quot;Content-Addressed Storage (CAS)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Content-addressed storage (CAS)&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Content-addressed storage (CAS)&quot;), &quot; is a method to store information so that it can be retrieved based on content rather than location and is an important aspect of location independence and overall performance optimization in &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../distributed-systems/&quot;
  }, &quot;distributed systems&quot;), &quot;.&quot;), mdx(&quot;p&quot;, null, &quot;Content-addressed storage typically works by &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../hash-functions/&quot;
  }, &quot;hashing&quot;), &quot; content to derive an identifier that can be used to retrieve the same content later.&quot;), mdx(&quot;h2&quot;, null, &quot;General benefits of CAS&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Reliable caching&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Simplified data versioning&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Naturally idempotent&quot;)), mdx(&quot;h2&quot;, null, &quot;Real-world examples of content-addressed storage&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;../docker/&quot;
  }, &quot;Docker&quot;), &quot; hashes each layer of a container image to identify it.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;../git/&quot;
  }, &quot;Git&quot;), &quot; uses the hash of each commit as its identity.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;../angular/&quot;
  }, &quot;Angular&quot;), &quot; uses output hashing in its compiled output to prevent version mismatches.&quot;)));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Columnar Databases]]></title><description><![CDATA[Columnar databases Columnar databases , also knowns as  column-oriented databases , are  databases  that store  data  on disk as columns, as…]]></description><link>https://www.jamestharpe.com/columnar-databases/</link><guid isPermaLink="false">https://www.jamestharpe.com/columnar-databases/</guid><pubDate>Sun, 28 Nov 2021 09:46:25 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-28T09:46:25.000Z&quot;,
  &quot;description&quot;: &quot;&quot;,
  &quot;tags&quot;: [&quot;databases&quot;],
  &quot;title&quot;: &quot;Columnar Databases&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Columnar databases&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Columnar databases&quot;), &quot;, also knowns as &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;column-oriented databases&quot;), &quot;, are &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../databases/&quot;
  }, &quot;databases&quot;), &quot; that store &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data/&quot;
  }, &quot;data&quot;), &quot; on disk as columns, as opposed to rows. Data stored as columns reduces disk I/O and seeks for aggregate functions (sum, average, count, and so on), which can make columnar databases optimal for &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-analysis/&quot;
  }, &quot;analytical data&quot;), &quot; and &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-warehouses/&quot;
  }, &quot;data warehouses&quot;), &quot;. However, operations that operate on entire rows of data are less optimal.&quot;), mdx(&quot;p&quot;, null, &quot;For example, take the following data:&quot;), mdx(&quot;table&quot;, null, mdx(&quot;thead&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;thead&quot;
  }, mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Id&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Name&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;FavoriteColor&quot;))), mdx(&quot;tbody&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;1&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;James&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Red&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;2&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Kim&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Green&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;3&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;David&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Blue&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;4&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Liz&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Blue&quot;)))), mdx(&quot;p&quot;, null, &quot;While a relational database would store the above data by row, for example:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;text&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;1:\tJames \tRed\n2:\tKim \tGreen\n3:\tDavid \tBlue\n4:\tLiz \tBlue&quot;))), mdx(&quot;p&quot;, null, &quot;A columnar will store the above data as columns:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;text&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;James: 1 \tKim: 2 \t\tDavid:3, \tLiz:4\nRed: 1\t\tGreen: 2 \tBlue:3,4&quot;))), mdx(&quot;p&quot;, null, &quot;To retrieve the most popular favorite color in the above data requires fewer steps in the columnar format than in the row format. However, retrieval of a specific record requires fewer steps in the row format than the columnar format.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Insert-only Databases]]></title><description><![CDATA[A database design approach that requires deletes and updates to be performed as inserts]]></description><link>https://www.jamestharpe.com/insert-only-databases/</link><guid isPermaLink="false">https://www.jamestharpe.com/insert-only-databases/</guid><pubDate>Sun, 28 Nov 2021 09:46:25 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-28T09:46:25.000Z&quot;,
  &quot;description&quot;: &quot;A database design approach that requires deletes and updates to be performed as inserts&quot;,
  &quot;tags&quot;: [&quot;databases&quot;, &quot;distributed-systems&quot;],
  &quot;title&quot;: &quot;Insert-only Databases&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Insert-only Databases&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Insert-only databases&quot;), &quot; are &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../databases/&quot;
  }, &quot;databases&quot;), &quot; that are designed so that update and delete operations are performed as inserts, generally through the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../snapshot-pattern/&quot;
  }, &quot;snapshot&quot;), &quot; and &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../tombstone-pattern/&quot;
  }, &quot;tombstone&quot;), &quot; &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../swe-design-patterns/&quot;
  }, &quot;design patterns&quot;), &quot;. This pattern is key to solving challenges related to &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../distributed-systems/&quot;
  }, &quot;distributed systems&quot;), &quot;, including eventual consistency, parallel processing, and event-driven communication.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Tombstone Design Pattern]]></title><description><![CDATA[A software design pattern for immutable data deletes]]></description><link>https://www.jamestharpe.com/tombstone-pattern/</link><guid isPermaLink="false">https://www.jamestharpe.com/tombstone-pattern/</guid><pubDate>Sat, 27 Nov 2021 19:37:25 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-27T19:37:25.000Z&quot;,
  &quot;description&quot;: &quot;A software design pattern for immutable data deletes&quot;,
  &quot;tags&quot;: [&quot;swe-design-patterns&quot;, &quot;insert-only-databases&quot;, &quot;snapshot-pattern&quot;],
  &quot;title&quot;: &quot;Tombstone Design Pattern&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Tombstone design pattern&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;tombstone design pattern&quot;), &quot; is &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../software-engineering/&quot;
  }, &quot;software engineering&quot;), &quot; &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../swe-design-patterns/&quot;
  }, &quot;design pattern&quot;), &quot; for &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../insert-only-databases/&quot;
  }, &quot;insert-only database&quot;), &quot; deletes. Deletions are implemented by recording each deletion in a deletion (or \&quot;tombstone\&quot;) table. For immutable updates, see &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../snapshot-pattern/&quot;
  }, &quot;the snapshot pattern&quot;), &quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;Example tombstone implementation&quot;), mdx(&quot;p&quot;, null, &quot;Take a typical &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;CUSTOMERS&quot;), &quot; table that &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;does not&quot;), &quot; implement the tombstone pattern:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;mermaid&quot;
  }, &quot;erDiagram\n    CUSTOMERS {\n        int id\n        string firstName\n        string lastName\n    }&quot;), mdx(&quot;p&quot;, null, &quot;Retrieving and deleting records in the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;CUSTOMERS&quot;), &quot; table is easy, &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;however deletes destroy the data that was previously stored&quot;), &quot;:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;sql&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-sql&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-sql&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;-- Retrieve a customer:&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;SELECT&quot;), &quot; firstName&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; lastName \n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;FROM&quot;), &quot; CUSTOMERS\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;WHERE&quot;), &quot; id &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;1&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;-- Update a customer, but lose the original value for firstName!&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;DELETE&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;FROM&quot;), &quot; CUSTOMERS\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;WHERE&quot;), &quot; id &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;1&quot;)))), mdx(&quot;p&quot;, null, &quot;Using the tombstone pattern, we move the customer deletion to a new, timestamped table:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;mermaid&quot;
  }, &quot;erDiagram\n\tCUSTOMERS ||--o| CUSTOMER_DELETES : deletions\n    CUSTOMERS {\n        int id\n\t\tdate created\n\t\tstring firstName\n        string lastName\n    }\n\n\tCUSTOMER_DELETES {\n\t\tint id\n\t\tdate timestamp\n\t}&quot;), mdx(&quot;p&quot;, null, &quot;Retrieving and deleting customers is now a bit trickier, but in exchange for this added complexity we preserve the original customer data:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;sql&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-sql&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-sql&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;-- Retrieve customer data via LEFT JOIN:&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;SELECT&quot;), &quot; CUSTOMERS&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;created&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; CUSTOMERS&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;firstName&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; CUSTOMERS&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;lastName\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;FROM&quot;), &quot; CUSTOMERS\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;LEFT&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;JOIN&quot;), &quot; CUSTOMER_DELETES &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;on&quot;), &quot; CUSTOMERS&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;id &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; CUSTOMER_DELETES&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;id\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;WHERE&quot;), &quot; CUSTOMER_DELETES&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;id &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;IS&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token boolean&quot;
  }, &quot;NULL&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;-- \&quot;Delete\&quot; the customer data&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;INSERT&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;INTO&quot;), &quot; CUSTOMER_DELETES\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;id&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;timestamp&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; \n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;VALUES&quot;), &quot; \n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; strftime&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&apos;%s&apos;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&apos;now&apos;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;)))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Snapshot Design Pattern]]></title><description><![CDATA[A software design pattern for immutable data updates]]></description><link>https://www.jamestharpe.com/snapshot-pattern/</link><guid isPermaLink="false">https://www.jamestharpe.com/snapshot-pattern/</guid><pubDate>Sat, 27 Nov 2021 18:44:25 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-27T18:44:25.000Z&quot;,
  &quot;description&quot;: &quot;A software design pattern for immutable data updates&quot;,
  &quot;tags&quot;: [&quot;swe-design-patterns&quot;, &quot;insert-only-databases&quot;, &quot;tombstone-pattern&quot;],
  &quot;title&quot;: &quot;Snapshot Design Pattern&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Snapshot design pattern&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;snapshot design pattern&quot;), &quot; is &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../software-engineering/&quot;
  }, &quot;software engineering&quot;), &quot; &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../swe-design-patterns/&quot;
  }, &quot;design pattern&quot;), &quot; for immutable &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../insert-only-databases/&quot;
  }, &quot;insert-only database&quot;), &quot; updates. Snapshots are implemented by externalizing record data into one or more tables and modifying records by inserting new data rather than replacing old data. For immutable deletes, see &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../tombstone-pattern/&quot;
  }, &quot;the tombstone pattern&quot;), &quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;Example snapshot implementation&quot;), mdx(&quot;p&quot;, null, &quot;Take a typical &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;CUSTOMERS&quot;), &quot; table that &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;does not&quot;), &quot; implement the snapshots pattern:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;mermaid&quot;
  }, &quot;erDiagram\n    CUSTOMERS {\n        int id\n        string firstName\n        string lastName\n    }&quot;), mdx(&quot;p&quot;, null, &quot;Retrieving and updating records in the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;CUSTOMERS&quot;), &quot; table is easy, &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;however updates destroy the data that was previously stored&quot;), &quot;:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;sql&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-sql&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-sql&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;-- Retrieve a customer:&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;SELECT&quot;), &quot; firstName&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; lastName \n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;FROM&quot;), &quot; CUSTOMERS\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;WHERE&quot;), &quot; id &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;1&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;-- Update a customer, but lose the original value for firstName!&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;UPDATE&quot;), &quot; CUSTOMERS\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;SET&quot;), &quot; firstName &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&apos;James&apos;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;WHERE&quot;), &quot; id &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;1&quot;)))), mdx(&quot;p&quot;, null, &quot;Using the snapshots pattern, we move the customer data to a new, timestamped table:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;mermaid&quot;
  }, &quot;erDiagram\n\tCUSTOMERS ||--o{ CUSTOMER_DATA : snapshots\n    CUSTOMERS {\n        int id\n\t\tdate created\n    }\n\n\tCUSTOMER_DATA {\n\t\tint id\n\t\tdate timestamp\n\t\tstring firstName\n\t\tstring lastName\n\t}&quot;), mdx(&quot;p&quot;, null, &quot;Retrieving and updating customers is now a bit trickier, but in exchange for this added complexity we get a complete record of all changes ever made to each customer&apos;s data:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;sql&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-sql&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-sql&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;-- Retrieve customer data via INNER JOIN:&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;SELECT&quot;), &quot; CUSTOMER_DATA&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;firstName&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; CUSTOMER_DATA&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;lastName &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;FROM&quot;), &quot; CUSTOMERS\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;INNER&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;JOIN&quot;), &quot; CUSTOMER_DATA &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;ON&quot;), &quot; CUSTOMER_DATA&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;id&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot;CUSTOMERS&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;id\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;WHERE&quot;), &quot; CUSTOMERS&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;id &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;1&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;ORDER&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;BY&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;timestamp&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;DESC&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;LIMIT&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;1&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;-- \&quot;Update\&quot; the customer&apos;s data&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;INSERT&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;INTO&quot;), &quot; CUSTOMER_DATA \n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;id&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;timestamp&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; firstName&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; lastName&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; \n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;VALUES&quot;), &quot; \n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; strftime&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&apos;%s&apos;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&apos;now&apos;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;James\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;Tharpe\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;)))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Design Patterns in Software Engineering]]></title><description><![CDATA[Common solutions to common problems in software engineering]]></description><link>https://www.jamestharpe.com/swe-design-patterns/</link><guid isPermaLink="false">https://www.jamestharpe.com/swe-design-patterns/</guid><pubDate>Sat, 27 Nov 2021 18:18:25 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-27T18:18:25.000Z&quot;,
  &quot;description&quot;: &quot;Common solutions to common problems in software engineering&quot;,
  &quot;tags&quot;: [&quot;software-engineering&quot;],
  &quot;title&quot;: &quot;Design Patterns in Software Engineering&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Software engineering design patterns&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Useful Apps]]></title><description><![CDATA[Apps with good utility]]></description><link>https://www.jamestharpe.com/apps/</link><guid isPermaLink="false">https://www.jamestharpe.com/apps/</guid><pubDate>Sat, 27 Nov 2021 17:16:25 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-27T17:16:25.000Z&quot;,
  &quot;description&quot;: &quot;Apps with good utility&quot;,
  &quot;tags&quot;: [],
  &quot;title&quot;: &quot;Useful Apps&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Useful Apps&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Command Query Responsibility Segregation (CQRS)]]></title><description><![CDATA[A software engineering design pattern to separate responsibility between commands and queries]]></description><link>https://www.jamestharpe.com/cqrs/</link><guid isPermaLink="false">https://www.jamestharpe.com/cqrs/</guid><pubDate>Sat, 27 Nov 2021 17:16:25 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-27T17:16:25.000Z&quot;,
  &quot;description&quot;: &quot;A software engineering design pattern to separate responsibility between commands and queries&quot;,
  &quot;tags&quot;: [&quot;swe-design-patterns&quot;, &quot;software-architecture&quot;],
  &quot;title&quot;: &quot;Command Query Responsibility Segregation (CQRS)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Command query responsibility segregation (CQRS)&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Command query responsibility segregation (CQRS)&quot;), &quot; is a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../software-engineering/&quot;
  }, &quot;software engineering&quot;), &quot; design pattern to separate the responsibilities of commands and queries. In this context, a &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;command&quot;), &quot; is a system call that persists a change and returns no information. A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;query&quot;), &quot; is a system call that returns information and persists no changes. In other words, commands are write operations and queries are read operations. CQRS allows different &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../software-architecture/&quot;
  }, &quot;architectures&quot;), &quot; for each type of operation, a commonly desired characteristic in &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../distributed-systems/&quot;
  }, &quot;distributed systems&quot;), &quot;.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Distributed Systems]]></title><description><![CDATA[Software systems distributed and coordinated over a network]]></description><link>https://www.jamestharpe.com/distributed-systems/</link><guid isPermaLink="false">https://www.jamestharpe.com/distributed-systems/</guid><pubDate>Sat, 27 Nov 2021 17:16:25 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-27T17:16:25.000Z&quot;,
  &quot;description&quot;: &quot;Software systems distributed and coordinated over a network&quot;,
  &quot;tags&quot;: [&quot;computer-science&quot;, &quot;software-architecture&quot;],
  &quot;title&quot;: &quot;Distributed Systems&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Distributed systems&quot;), mdx(&quot;p&quot;, null, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;distributed system&quot;), &quot; is a set of software applications that implement &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../software-architecture/&quot;
  }, &quot;architectural patterns&quot;), &quot; to communicate via network and coordinate their actions to achieve a common goal.&quot;), mdx(&quot;h2&quot;, null, &quot;Core concepts of distributed systems&quot;), mdx(&quot;h3&quot;, null, &quot;Idempotence&quot;), mdx(&quot;p&quot;, null, &quot;An operation is &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;idempotent&quot;), &quot; when only the first received call can cause any change to the system. For example, when a file is saved with no changes the operation is idempotent if the save operation does nothing but it is not idempotent if the \&quot;modified\&quot; date is changed.&quot;), mdx(&quot;p&quot;, null, &quot;Idempotence is important in &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../distributed-systems/&quot;
  }, &quot;distributed systems&quot;), &quot; because retries may be necessary if system calls over the network fail. For example, if a \&quot;create\&quot; operation succeeds for a record in a database but the success message never reaches the client, the client has no way of knowing about the success and may therefore retry. If the \&quot;create\&quot; operation is not idempotent, this would undesirably result in the creation of duplicate objects.&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;mermaid&quot;
  }, &quot;sequenceDiagram\n\tloop until client receives success message\n\t\tClient -&gt;&gt; API: Save Record\n\t\tAPI -&gt;&gt; DB: `INSERT INTO ...`\n\t\tDB -&gt;&gt; API: \&quot;Success\&quot;\n\t\tAPI -x Client: (network failure)\n\tend&quot;), mdx(&quot;h3&quot;, null, &quot;Immutability&quot;), mdx(&quot;p&quot;, null, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data/&quot;
  }, &quot;Data&quot;), &quot; is &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;immutable&quot;), &quot; when it can be created, but not destroyed (meaning modified or deleted). Immutability is valuable for parallel processing, as well as for business needs such as the need to generate detailed audit logs.&quot;), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;Pat Helland&apos;s paper,  &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;http://cidrdb.org/cidr2015/Papers/CIDR15_Paper16.pdf&quot;
  }, &quot;Immutability Changes Everything&quot;), &quot;, goes into detail on the types of problems solved with immutability.&quot;)), mdx(&quot;h3&quot;, null, &quot;Location independence&quot;), mdx(&quot;p&quot;, null, &quot;An application is &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;location independent&quot;), &quot; when its behavior does not rely on its location, meaning the same application can be deployed to multiple locations and when sent the same message will produce the same behavior as any other instance in any other location.&quot;), mdx(&quot;p&quot;, null, &quot;An example of location &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;dependence&quot;), &quot; is the use of auto-increment IDs in &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../databases/&quot;
  }, &quot;databases&quot;), &quot; because the increment is only valid for the database that generated the ID and could identify a completely different record in another database. However, a GUID, natural key, or &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../content-addressed-storage/&quot;
  }, &quot;content-addressed storage&quot;), &quot;-based identifier (using a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../hash-functions/&quot;
  }, &quot;hash&quot;), &quot;) is location &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;independent&quot;), &quot; because it uniquely identifies the record, even across multiple database instances. Natural keys and content-addressed storage can be especially useful because they can be derived consistently regardless of location, whereas a GUID is randomly derived and therefore not consistently derivable.&quot;), mdx(&quot;h3&quot;, null, &quot;Data and API versioning&quot;), mdx(&quot;p&quot;, null, &quot;In the context of distributed systems, &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;versioning&quot;), &quot; is the practice of maintaining the contract between otherwise independent components of the system. In a distributed system, different versions of applications will be deployed to different locations at different times yet still need to interact successfully. A client application, for example, be routed to a newer version of an API that returns data in a newer format that what the client was originally built to process. Versioning helps maintain compatibility.&quot;), mdx(&quot;p&quot;, null, &quot;One simple versioning strategy is to use additive structure. &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Additive structure&quot;), &quot; means that new elements are preferred over modifications to existing elements. In an API, this means preferring to add support for new structures to extend existing request/response objects. In a database, this means preferring to add new tables following the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../snapshot-pattern/&quot;
  }, &quot;snapshot pattern&quot;), &quot; to extend existing entities.&quot;), mdx(&quot;h2&quot;, null, &quot;The eight fallacies of distributed computing&quot;), mdx(&quot;p&quot;, null, &quot;When it comes to distributed systems, &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../software-engineering/&quot;
  }, &quot;developers&quot;), &quot; often unknowingly make bad assumptions about the underlying risks and limitations to that system. Peter Deutsch famously listed seven of these assumptions in 1994 while at Sun Microsystems and James Gosling added another to the list in 1997. Collectively, these assumptions are now known as &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;the eight fallacies of distributed computing&quot;), &quot;.&quot;), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;See also: &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://www.se-radio.net/2021/07/episode-470-l-peter-deutsch-on-the-fallacies-of-distributed-computing/&quot;
  }, &quot;Episode 470L L. Peter Deutsch on the Fallacies of Distributed Computing&quot;), &quot; from Software Engineering Radio.&quot;)), mdx(&quot;p&quot;, null, &quot;Those fallacies are:&quot;), mdx(&quot;ol&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;The network is reliable&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;Bandwidth is infinite&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;The network is secure&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;Topology doesn&apos;t change&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;There is one administrator&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;Transport cost is zero&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;The network is homogeneous&quot;)));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Apache Kafka]]></title><description><![CDATA[A distributed event streaming platform for data-pipelines and analytics]]></description><link>https://www.jamestharpe.com/apache-kafka/</link><guid isPermaLink="false">https://www.jamestharpe.com/apache-kafka/</guid><pubDate>Sat, 27 Nov 2021 15:19:54 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-27T15:19:54.000Z&quot;,
  &quot;description&quot;: &quot;A distributed event streaming platform for data-pipelines and analytics&quot;,
  &quot;tags&quot;: [&quot;data-pipelines&quot;, &quot;microservices&quot;, &quot;apache&quot;, &quot;pub-sub&quot;, &quot;open-source-software&quot;],
  &quot;title&quot;: &quot;Apache Kafka&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Apache Kafka&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Apache Kafka&quot;), &quot; is &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../open-source-software/&quot;
  }, &quot;open-source software&quot;), &quot; from &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../apache/&quot;
  }, &quot;Apache&quot;), &quot; that provides a real-time event streaming platform typically used in &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../microservices/&quot;
  }, &quot;microservice&quot;), &quot; architectures and &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-pipelines/&quot;
  }, &quot;data-pipelines&quot;), &quot;.&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Kafka servers&quot;), &quot; are run in &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../distributed-systems/&quot;
  }, &quot;clusters&quot;), &quot; that can consist of a single server, or multiple servers that span data centers. &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Kafka clients&quot;), &quot; are applications that read, write, and process events from Kafka. &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Kafka Connect&quot;), &quot; imports and exports data as event streams from various data sources to the cluster and between clusters.&quot;), mdx(&quot;p&quot;, null, &quot;Conceptually, Kafka is centered on &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;events&quot;), &quot;: records or messages that consist of a key, value, timestamp, and optional metadata. &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Producers&quot;), &quot; are client applications that publish events to Kafka, whereas &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;consumers&quot;), &quot; are client applications that subscribe to and process events. To enable scalability and parallel processing, Kafka can provide guarantees such as to ensure an event is processed exactly once.&quot;), mdx(&quot;p&quot;, null, &quot;Events are organized by &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;topics&quot;), &quot; which consist of a persisted, ordered series of related events. Persistence means that these events can be processed by consumers immediately or retroactively. Topics are further organized into &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;partitions&quot;), &quot;, which are determined by the event key. Partitioning plays a key role in how Kafka scales as well as in functionality behind guarantees.&quot;), mdx(&quot;h2&quot;, null, &quot;Video: What is Apache Kafka&quot;), mdx(&quot;iframe&quot;, {
    width: &quot;560&quot;,
    height: &quot;315&quot;,
    src: &quot;https://www.youtube.com/embed/FKgi3n-FyNU&quot;,
    title: &quot;YouTube video player&quot;,
    frameBorder: &quot;0&quot;,
    allow: &quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot;,
    allowFullScreen: true
  }), mdx(&quot;h2&quot;, null, &quot;Kafka resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://kafka.apache.org/&quot;
  }, &quot;Official Kafka homepage&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://kafka-tutorials.confluent.io/&quot;
  }, &quot;Kafka tutorials&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Visual Studio Code (VS Code)]]></title><description><![CDATA[An extensible code editor for software engineers]]></description><link>https://www.jamestharpe.com/vscode/</link><guid isPermaLink="false">https://www.jamestharpe.com/vscode/</guid><pubDate>Sat, 27 Nov 2021 15:19:54 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-27T15:19:54.000Z&quot;,
  &quot;description&quot;: &quot;An extensible code editor for software engineers&quot;,
  &quot;tags&quot;: [&quot;software-engineering&quot;, &quot;computer-languages&quot;, &quot;apps&quot;, &quot;open-source-software&quot;],
  &quot;title&quot;: &quot;Visual Studio Code (VS Code)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Visual Studio Code (VS Code)&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Visual Studio Code (VS Code)&quot;), &quot; is an &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../open-source-software/&quot;
  }, &quot;open-source software&quot;), &quot; &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../software-engineering/&quot;
  }, &quot;code&quot;), &quot; editor from Microsoft that supports multiple &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../computer-languages/&quot;
  }, &quot;languages&quot;), &quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;VS Code Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://code.visualstudio.com/&quot;
  }, &quot;VS Code Homepage&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://github.com/jamestharpe/windows-development-environment/blob/main/vscode-extensions.sh&quot;
  }, &quot;Script to automatically install useful extensions&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[tldraw: A simple drawing app]]></title><description><![CDATA[A simple drawing app]]></description><link>https://www.jamestharpe.com/tldraw/</link><guid isPermaLink="false">https://www.jamestharpe.com/tldraw/</guid><pubDate>Sat, 27 Nov 2021 15:15:54 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-27T15:15:54.000Z&quot;,
  &quot;description&quot;: &quot;A simple drawing app&quot;,
  &quot;tags&quot;: [&quot;apps&quot;, &quot;open-source-software&quot;],
  &quot;title&quot;: &quot;tldraw: A simple drawing app&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;tldraw&quot;), mdx(&quot;p&quot;, null, &quot;Tldraw is a simple &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../open-source/&quot;
  }, &quot;open-source software&quot;), &quot; drawing application that works online (&quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://www.tldraw.com/&quot;
  }, &quot;https://www.tldraw.com/&quot;), &quot;), embedded as a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../vscode/&quot;
  }, &quot;VS Code&quot;), &quot; extension, or as a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../react/&quot;
  }, &quot;React&quot;), &quot; component.&quot;), mdx(&quot;h2&quot;, null, &quot;tldraw Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.tldraw.com/&quot;
  }, &quot;tldraw app&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://github.com/tldraw/tldraw&quot;
  }, &quot;tldraw source code&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[DevOps]]></title><description><![CDATA[The philosophies, practices, and technologies for accelerated software time to value]]></description><link>https://www.jamestharpe.com/devops/</link><guid isPermaLink="false">https://www.jamestharpe.com/devops/</guid><pubDate>Wed, 24 Nov 2021 22:52:25 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-24T22:52:25.000Z&quot;,
  &quot;description&quot;: &quot;The philosophies, practices, and technologies for accelerated software time to value&quot;,
  &quot;tags&quot;: [&quot;software-engineering&quot;],
  &quot;title&quot;: &quot;DevOps&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;DevOps&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://itrevolution.com/the-three-ways-principles-underpinning-devops/&quot;
  }, &quot;The Three Ways: The Principles Underpinning DevOps by Gene Kim&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://web.devopstopologies.com/&quot;
  }, &quot;DevOps Team Topologies&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Mypy]]></title><description><![CDATA[Static type checking for Python]]></description><link>https://www.jamestharpe.com/mypy/</link><guid isPermaLink="false">https://www.jamestharpe.com/mypy/</guid><pubDate>Wed, 24 Nov 2021 20:27:54 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-24T20:27:54.000Z&quot;,
  &quot;description&quot;: &quot;Static type checking for Python&quot;,
  &quot;tags&quot;: [&quot;python&quot;],
  &quot;title&quot;: &quot;Mypy&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Mypy&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Mypy&quot;), &quot; provides static type checks for &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../python/&quot;
  }, &quot;Python&quot;), &quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;Mypy resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;http://mypy-lang.org/&quot;
  }, &quot;Official mypy website&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://mypy.readthedocs.io/en/stable/&quot;
  }, &quot;Mypy documentation&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Pipenv]]></title><description><![CDATA[An alternative to pip and venv]]></description><link>https://www.jamestharpe.com/pipenv/</link><guid isPermaLink="false">https://www.jamestharpe.com/pipenv/</guid><pubDate>Wed, 24 Nov 2021 20:27:54 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-24T20:27:54.000Z&quot;,
  &quot;description&quot;: &quot;An alternative to pip and venv&quot;,
  &quot;tags&quot;: [&quot;python-venvs&quot;, &quot;package-managers&quot;],
  &quot;title&quot;: &quot;Pipenv&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Pipenv&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Pipenv&quot;), &quot; is a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../package-managers/&quot;
  }, &quot;package manager&quot;), &quot; for &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../python/&quot;
  }, &quot;Python&quot;), &quot; that replaces &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../python-pip/&quot;
  }, &quot;pip&quot;), &quot; and manages &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../python-venvs/&quot;
  }, &quot;virtual environments&quot;), &quot;. Notably, pipenv produces deterministic builds.&quot;), mdx(&quot;h2&quot;, null, &quot;Mypy resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://github.com/pypa/pipenv&quot;
  }, &quot;Pipenv on GitHub&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Pip: Python's Package Manager]]></title><description><![CDATA[Python's default package manager]]></description><link>https://www.jamestharpe.com/python-pip/</link><guid isPermaLink="false">https://www.jamestharpe.com/python-pip/</guid><pubDate>Mon, 22 Nov 2021 17:00:54 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-22T17:00:54.000Z&quot;,
  &quot;description&quot;: &quot;Python&apos;s default package manager&quot;,
  &quot;tags&quot;: [&quot;python&quot;, &quot;package-managers&quot;],
  &quot;title&quot;: &quot;Pip: Python&apos;s Package Manager&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Pip: Python&apos;s Default Package Manager&quot;), mdx(&quot;p&quot;, null, &quot;Pip is &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../python/&quot;
  }, &quot;Python&apos;s&quot;), &quot; default &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../package-managers/&quot;
  }, &quot;package manager&quot;), &quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;The \&quot;safe\&quot; way to call &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;h2&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;pip&quot;)), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;TLDR: Prefix &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;pip&quot;), &quot; commands with &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;python3 -m&quot;))), mdx(&quot;p&quot;, null, &quot;Though &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;pip&quot;), &quot; can be called directly, the version of &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;pip&quot;), &quot; called is dependent on the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../shell/&quot;
  }, &quot;shell&apos;s&quot;), &quot; &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;PATH&quot;), &quot; variable. If multiple versions of Python and &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;pip&quot;), &quot; are installed, the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;pip&quot;), &quot; command may not run the expected version of &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;pip&quot;), &quot;.&quot;), mdx(&quot;p&quot;, null, &quot;The simplest way to avoid this confusion is to call &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;pip&quot;), &quot; via &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;python3&quot;), &quot; by prefixing &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;pip&quot;), &quot; commands with &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;python3 -m&quot;), &quot;. For example, instead of running &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;pip install &lt;package-name&gt;&quot;), &quot;, call &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;python3 -m pip install &lt;package-name&gt;&quot;), &quot;. This ensures the version of &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;pip&quot;), &quot; called is the version associated with the version of &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;python&quot;), &quot; or &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;python3&quot;), &quot; executed. This works because the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;python3 -m&quot;), &quot; command uses the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;sys.path&quot;), &quot; variable to find &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;pip&quot;), &quot; instead of the terminal&apos;s &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;PATH&quot;), &quot; variable.&quot;), mdx(&quot;h2&quot;, null, &quot;Useful &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;h2&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;pip&quot;), &quot; commands&quot;), mdx(&quot;table&quot;, null, mdx(&quot;thead&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;thead&quot;
  }, mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Command&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Description&quot;))), mdx(&quot;tbody&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;pip install &lt;package-name&gt;&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Installs the specified package&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;pip install --upgrade &lt;package-name&gt;&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Upgrades the specified package to the latest version&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;pip show &lt;package-name&gt;&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Shows a summary of the specified package installation: Name, version, path, etc.&quot;)))), mdx(&quot;h2&quot;, null, mdx(&quot;code&quot;, {
    parentName: &quot;h2&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;pip&quot;), &quot; resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://pip.pypa.io/en/stable/&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;a&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;pip&quot;), &quot; official website&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://pip.pypa.io/en/stable/user_guide/&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;a&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;pip&quot;), &quot; user guide&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://pypi.org/&quot;
  }, &quot;Python Package Index&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Python Virtual Environments]]></title><description><![CDATA[How to manage virtual environments with Python, Pip, and VEnv]]></description><link>https://www.jamestharpe.com/python-venvs/</link><guid isPermaLink="false">https://www.jamestharpe.com/python-venvs/</guid><pubDate>Mon, 22 Nov 2021 17:00:54 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-22T17:00:54.000Z&quot;,
  &quot;description&quot;: &quot;How to manage virtual environments with Python, Pip, and VEnv&quot;,
  &quot;tags&quot;: [&quot;python&quot;, &quot;python-pip&quot;],
  &quot;title&quot;: &quot;Python Virtual Environments&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Virtual environments with Python, Pip, and VEnv&quot;), mdx(&quot;p&quot;, null, &quot;In &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../python/&quot;
  }, &quot;Python&quot;), &quot; development, a &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;virtual environment&quot;), &quot; is an isolated context for &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../python-pip/&quot;
  }, &quot;installing Python packages&quot;), &quot;. As of Python 3.3, &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;venv&quot;), &quot; is included to help manage virtual environments.&quot;), mdx(&quot;h2&quot;, null, &quot;Create and use a virtual environment&quot;), mdx(&quot;p&quot;, null, &quot;To create a virtual environment, it&apos;s usually best to specify the Python version explicitly to ensure the environment is setup with the expected version:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, &quot;python3.8 -m venv path/to/environment&quot;))), mdx(&quot;p&quot;, null, &quot;A best practice is to use a virtual environment per project. A common convention to do so is to create the environment in a folder called &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;venv&quot;), &quot; directly in the project folder:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;cd&quot;), &quot; my-project\npython3.8 -m venv venv&quot;))), mdx(&quot;p&quot;, null, &quot;To use the virtual environment, it needs to be activated:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;source&quot;), &quot; venv/bin/activate\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;which&quot;), &quot; python3 &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# confirm expected python version&quot;)))), mdx(&quot;p&quot;, null, &quot;Once activated, it&apos;s usually necessary to install the project dependencies which are most often referenced by a &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;requirements.txt&quot;), &quot; file:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, &quot;python3 -m pip &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;install&quot;), &quot; -r requirements.txt&quot;))), mdx(&quot;p&quot;, null, &quot;Finally, the virtual environment can be deactivated when it&apos;s no longer needed:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, &quot;deactivate&quot;))), mdx(&quot;h2&quot;, null, &quot;Why virtual environments are important: Dependency hell&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Dependency hell&quot;), &quot; is the confusion caused when dependency needs conflict between projects, users, and systems.&quot;), mdx(&quot;p&quot;, null, &quot;Unlike most other &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../computer-languages/&quot;
  }, &quot;programming language&quot;), &quot; package managers that install packages in the current working directory, &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../python-pip/&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;a&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;pip&quot;)), &quot; by default installs packages as globally as possible. When installing a package, &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;pip&quot;), &quot; will first try to install that package system-wide. If system-wide installation is not permitted, &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;pip&quot;), &quot; will install the package for the current user.&quot;), mdx(&quot;p&quot;, null, &quot;These \&quot;as global as possible\&quot; installations can cause dependency hell when:&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Multiple projects have conflicting dependencies&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Project dependencies conflict with system dependencies&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Multiple users of the same system need conflicting dependencies&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Projects need to be tested against different versions of Python&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Projects need to be tested against different library versions&quot;)), mdx(&quot;p&quot;, null, &quot;For these reasons, a best practice for Python and &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;pip&quot;), &quot; is to &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;always use a virtual environment&quot;), &quot;.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Python]]></title><description><![CDATA[An object-oriented and functional programing language where whitespace matters]]></description><link>https://www.jamestharpe.com/python/</link><guid isPermaLink="false">https://www.jamestharpe.com/python/</guid><pubDate>Mon, 22 Nov 2021 16:39:54 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-22T16:39:54.000Z&quot;,
  &quot;description&quot;: &quot;An object-oriented and functional programing language where whitespace matters&quot;,
  &quot;tags&quot;: [&quot;computer-languages&quot;, &quot;open-source-languages&quot;],
  &quot;title&quot;: &quot;Python&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Python&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Python&quot;), &quot; is a general purpose, dynamically typed, object oriented and functional, &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../open-source-software/&quot;
  }, &quot;open-source software&quot;), &quot; &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../computer-languages/&quot;
  }, &quot;programming language&quot;), &quot;. Python is known as a good first programming language to learn, it&apos;s usefulness in &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-science/&quot;
  }, &quot;data science&quot;), &quot;, and for the use of indentation to delimit blocks of code.&quot;), mdx(&quot;h2&quot;, null, &quot;Key Python language features&quot;), mdx(&quot;h3&quot;, null, &quot;Truthiness&quot;), mdx(&quot;p&quot;, null, &quot;Python coercing variables to boolean values. Falsy values include &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;None&quot;), &quot;, an empty list (&quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;[]&quot;), &quot;), an empty dictionary (&quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;{}&quot;), &quot;), an empty string (&quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;\&quot;\&quot;&quot;), &quot;), an empty set (&quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;set()&quot;), &quot;), and zero (&quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;0&quot;), &quot; or &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;0.0&quot;), &quot;).&quot;), mdx(&quot;h3&quot;, null, &quot;Type annotations&quot;), mdx(&quot;p&quot;, null, &quot;Though Python is dynamically typed, it supports type annotations as metadata but does not enforce them at runtime.&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;python&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-python&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-python&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;def&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;say_hello&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;name&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin&quot;
  }, &quot;str&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;-&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;&gt;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin&quot;
  }, &quot;str&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# Specifies the name argument and the return value are strings&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string-interpolation&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;f\&quot;Hello, &quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token interpolation&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;name&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;!\&quot;&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;print&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;say_hello&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;5&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# Hello, 5!&quot;)))), mdx(&quot;p&quot;, null, &quot;However, types can still serve as useful documentation and leveraged by code editors to provide features like auto-completion. There are also external tools like &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../mypy/&quot;
  }, &quot;mypy&quot;), &quot; that can provide or enforce type validation.&quot;), mdx(&quot;h3&quot;, null, &quot;F-strings&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;F-strings&quot;), &quot; are how Python provides string interpolation.&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;python&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-python&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-python&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;def&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;say_hello&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;name&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string-interpolation&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;f\&quot;Hello, &quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token interpolation&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;name&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;!\&quot;&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;print&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;say_hello&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;James\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# \&quot;Hello, James!\&quot;&quot;)))), mdx(&quot;h3&quot;, null, &quot;Tuples&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Tuples&quot;), &quot; in Python can be thought of as immutable lists and support most non-mutating list functions. Tuples can also be destructured.&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;python&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-python&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-python&quot;
  }, &quot;titanic_gps_coordinates &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;41.7325&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;49.9469&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# Tuple&quot;), &quot;\nlat&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; lon &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; titanic_gps_coordinates &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# lat is 41.7325, lon is 49.9469&quot;)))), mdx(&quot;h3&quot;, null, &quot;First-class functions&quot;), mdx(&quot;p&quot;, null, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../functional-programming/&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;a&quot;
  }, &quot;Functions&quot;)), &quot; can be assigned to variables and passed to other functions.&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;python&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-python&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-python&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;def&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;say_hello&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;name&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string-interpolation&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;f\&quot;Hello, &quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token interpolation&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;name&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;!\&quot;&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;def&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;say_hi&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;name&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string-interpolation&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;f\&quot;Hi, &quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token interpolation&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;name&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;!\&quot;&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;def&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;ask_how_are_you&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;greet&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; name&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string-interpolation&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;f\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token interpolation&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;greet&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;name&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot; How are you?\&quot;&quot;)), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;print&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;ask_how_are_you&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;say_hello&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;James\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# \&quot;Hello, James!\&quot;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;print&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;ask_how_are_you&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;say_hi&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;James\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# \&quot;Hi, James!\&quot;&quot;)))), mdx(&quot;p&quot;, null, &quot;This means that it&apos;s easy to create &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../functional-programming/&quot;
  }, &quot;higher-order functions&quot;), &quot;:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;python&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-python&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-python&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;def&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;greeter&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;greeting&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;def&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;greet&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;name&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; greeting&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;name&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;\n\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; greet\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;def&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;say_hello&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;name&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string-interpolation&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;f\&quot;Hello, &quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token interpolation&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;name&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;!\&quot;&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\nhello &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; greeter&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;say_hello&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;print&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;hello&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;James\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# Hello, James!&quot;)))), mdx(&quot;h3&quot;, null, &quot;Classes&quot;), mdx(&quot;p&quot;, null, &quot;Python supports classes to encapsulate related data and functions. Notably, Python has the somewhat unusual convention of accepting &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;self&quot;), &quot; as the first argument of each function of a class. The &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;self&quot;), &quot; argument refers to the current class instance.&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;python&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-python&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-python&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;class&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Person&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# In Python, the constructor function is named __init__&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;def&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;__init__&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;self&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; name&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;\n\t\tself&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;name &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; name\n\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;def&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;greet&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;self&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string-interpolation&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;f\&quot;Hello, &quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token interpolation&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;self&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;name&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;&quot;)), &quot;\n\nme &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; Person&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;James\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;print&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;me&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;name&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# James&quot;)))), mdx(&quot;h3&quot;, null, &quot;Dictionaries&quot;), mdx(&quot;p&quot;, null, &quot;Python syntactically supports &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;dictionaries&quot;), &quot;, which are groups of key-value pairs. Dictionaries can also be nested.&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;python&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-python&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-python&quot;
  }, &quot;contact &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\tname&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;James\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\twebsite&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;https://www.jamestharpe.com\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\tlocation&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\tcity&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;Atlanta\&quot;&quot;), &quot;\n\t\tstate&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;Georgia\&quot;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n\nname &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; contact&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;[&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;name\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;]&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# \&quot;James\&quot;&quot;), &quot;\ncity &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; contact&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;[&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;location\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;]&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;[&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;city\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;]&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# Atlanta&quot;), &quot;\n\nwebsite &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; contact&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;get&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;website\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;unknown\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# \&quot;https://www.jamestharpe.com\&quot;&quot;), &quot;\n\naddress &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; contact&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;get&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;address\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;not provided\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# \&quot;not provided\&quot;&quot;), &quot;\naddress &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; contact&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;[&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;address\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;]&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# Throws a KeyError exception&quot;), &quot;\ncontact&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;[&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;address\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;]&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;1234 Fake St.\&quot;&quot;), &quot;\naddress &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; contact&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;[&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;address\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;]&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# \&quot;1234 Fake St.\&quot;&quot;)))), mdx(&quot;h3&quot;, null, &quot;Sets&quot;), mdx(&quot;p&quot;, null, &quot;Python supports &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;sets&quot;), &quot;, which are collections of distinct elements. The &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;in&quot;), &quot; operator is very fast for sets.&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;python&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-python&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-python&quot;
  }, &quot;baby_names &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;olivia\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;emma\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;amelia\&quot;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;olivia\&quot;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;in&quot;), &quot; baby_names &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# true&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;abby\&quot;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;in&quot;), &quot; baby_names &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# false&quot;)))), mdx(&quot;p&quot;, null, &quot;Sets are also a useful way to find the distinct elements of an array:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;python&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-python&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-python&quot;
  }, &quot;baby_name_suggestions &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;[&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;olivia\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;emma\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;amelia\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;emma\&quot;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;]&quot;), &quot;\nunique_suggestions &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin&quot;
  }, &quot;set&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;baby_name_suggestions&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# { \&quot;olivia\&quot;, \&quot;emma\&quot;, \&quot;amelia\&quot; }&quot;)))), mdx(&quot;h3&quot;, null, &quot;Comprehensions&quot;), mdx(&quot;p&quot;, null, &quot;In Python, &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;comprehension&quot;), &quot; create lists, sets, or dictionaries from iterables.&quot;), mdx(&quot;p&quot;, null, &quot;List example:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;python&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-python&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-python&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;def&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;squares&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin&quot;
  }, &quot;max&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;[&quot;), &quot;n &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;*&quot;), &quot; n &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;for&quot;), &quot; n &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;in&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin&quot;
  }, &quot;range&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin&quot;
  }, &quot;max&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;]&quot;), &quot;\n\nfirst_five_squares &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; squares&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;5&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# [0, 1, 4, 9, 16]&quot;)))), mdx(&quot;p&quot;, null, &quot;Set example:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;python&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-python&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-python&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;def&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;squares&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin&quot;
  }, &quot;max&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;n &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;*&quot;), &quot; n &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;for&quot;), &quot; n &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;in&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin&quot;
  }, &quot;range&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin&quot;
  }, &quot;max&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n\nfirst_five_squares &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; squares&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;5&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# {0, 1, 4, 9, 16}&quot;)))), mdx(&quot;p&quot;, null, &quot;Dictionary example:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;python&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-python&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-python&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;def&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;squares&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin&quot;
  }, &quot;max&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; n &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;*&quot;), &quot; n &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;for&quot;), &quot; n &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;in&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin&quot;
  }, &quot;range&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin&quot;
  }, &quot;max&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n\nfirst_five_squares &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; squares&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;5&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# {0: 0, 1: 1, 2: 4, 3: 9, 4: 16}&quot;)))), mdx(&quot;h3&quot;, null, &quot;Generators&quot;), mdx(&quot;p&quot;, null, &quot;In Python, &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;generators&quot;), &quot; are functions that mimic &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;iterators&quot;), &quot;, which are objects that represent streams of data. This is accomplished through the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;yield&quot;), &quot; keyword:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;python&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-python&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-python&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;def&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;count_to_infinity&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;start &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# This function is a generator&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;while&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token boolean&quot;
  }, &quot;True&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;yield&quot;), &quot; start &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# generates the next value, similar to \&quot;return\&quot; but without exiting&quot;), &quot;\n\t\tstart &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;+=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;1&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;for&quot;), &quot; i &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;in&quot;), &quot; count_to_infinity&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;10&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;print&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string-interpolation&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;f\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token interpolation&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;i&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; \n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# 10, 11, 12, 13...&quot;)))), mdx(&quot;p&quot;, null, &quot;Generators are \&quot;lazy\&quot; and do nothing until iterated upon. A useful application of this is to use comprehensions to create generators from other generators.&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;python&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-python&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-python&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;def&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;count_to_infinity&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;start &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;while&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token boolean&quot;
  }, &quot;True&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;yield&quot;), &quot; start\n\t\tstart &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;+=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;1&quot;), &quot;\n\neven_numbers &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;i &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;for&quot;), &quot; i &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;in&quot;), &quot; count_to_infinity&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;if&quot;), &quot; i &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;%&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;2&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;==&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# does nothing until iterated&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;for&quot;), &quot; i &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;in&quot;), &quot; even_numbers\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;print&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string-interpolation&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;f\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token interpolation&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;i&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; \n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# 2, 4, 6, 8 ...&quot;)))), mdx(&quot;h2&quot;, null, &quot;Argument unpacking&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Argument unpacking&quot;), &quot; converts lists to arguments.&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;python&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-python&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-python&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;def&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;add&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;n1&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; n2&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; n1 &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;+&quot;), &quot; n2\n\nadd&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;*&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;[&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;]&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# Equivalent to add(1, 2), returns 3&quot;), &quot;\nadd&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;[&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;]&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# TypeError, fails&quot;)))), mdx(&quot;h3&quot;, null, &quot;Arguments (&quot;, mdx(&quot;code&quot;, {
    parentName: &quot;h3&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;args&quot;), &quot;) and keyword arguments (&quot;, mdx(&quot;code&quot;, {
    parentName: &quot;h3&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;kwargs&quot;), &quot;)&quot;), mdx(&quot;p&quot;, null, &quot;Python allows functions to accept arbitrary arguments as a tuple using &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;args&quot;), &quot; or as a dictionary using &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;kwargs&quot;), &quot;.&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;python&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-python&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-python&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;def&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;print_args&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;*&quot;), &quot;args&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;**&quot;), &quot;kwargs&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;print&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;args: \&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; args&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;print&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;kwargs: \&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; kwargs&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;\n\nprint_args&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;a\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;b\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;c\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; one&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; two&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; three&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;3&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# prints&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# args: (\&quot;a\&quot;, \&quot;b\&quot;, \&quot;c\&quot;)&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# kwargs: {\&quot;one\&quot;: 1, \&quot;two\&quot;: 2, \&quot;three\&quot;: 3}&quot;)))), mdx(&quot;h2&quot;, null, &quot;Python tips and best practices&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Always work inside a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;../python-venvs/&quot;
  }, &quot;virtual environment&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Don&apos;t use &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;pip&quot;), &quot; with &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;sudo&quot;))), mdx(&quot;h2&quot;, null, &quot;Python resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.python.org/&quot;
  }, &quot;Official Python website&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[React Recipes]]></title><description><![CDATA[Quick and easy to copy recipes for React]]></description><link>https://www.jamestharpe.com/react-recipes/</link><guid isPermaLink="false">https://www.jamestharpe.com/react-recipes/</guid><pubDate>Mon, 22 Nov 2021 01:05:47 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-22T01:05:47.000Z&quot;,
  &quot;description&quot;: &quot;Quick and easy to copy recipes for React&quot;,
  &quot;tags&quot;: [&quot;react&quot;, &quot;js-recipes&quot;],
  &quot;title&quot;: &quot;React Recipes&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;React recipes&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Dreyfus Model of Skill Acquisition]]></title><description><![CDATA[A model for acquiring skills and developing expertise]]></description><link>https://www.jamestharpe.com/dreyfus-model-of-skill-acquisition/</link><guid isPermaLink="false">https://www.jamestharpe.com/dreyfus-model-of-skill-acquisition/</guid><pubDate>Sun, 21 Nov 2021 23:40:31 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-21T23:40:31.000Z&quot;,
  &quot;description&quot;: &quot;A model for acquiring skills and developing expertise&quot;,
  &quot;tags&quot;: [&quot;personal-productivity&quot;],
  &quot;title&quot;: &quot;Dreyfus Model of Skill Acquisition&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Dreyfus model of skill acquisition&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Dreyfus model of skill acquisition&quot;), &quot; is a model for how learners acquire new skills. It consists of five stages of skill development, with clearly defined drivers, needs, and expectations ascribed to each level.&quot;), mdx(&quot;h2&quot;, null, &quot;The five stages of the dreyfus model&quot;), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;\&quot;...consider the case of the developer who claims ten years of experience, but in reality it was one year of experience repeated nine times. That doesn&apos;t count as &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;experience&quot;), &quot;. \&quot;&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;-&quot;, &quot; Andy Hunt, Pragmatic Thinking and Learning&quot;)), mdx(&quot;table&quot;, null, mdx(&quot;thead&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;thead&quot;
  }, mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Level&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Drivers&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Needs&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Expectations&quot;))), mdx(&quot;tbody&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Novice&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Experience early success, accomplish an immediate goal&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Context-free rules, recipes, step-by-step explicit instructions&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Difficulty identifying and correcting mistakes, easily confused&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Advanced beginner&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Work independently, reduce dependency on others&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Minimal instructions, reliable reference materials&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Knows the basics, lacks comprehensive understanding, needs help troubleshooting&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Competent&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Show initiative, recognition for hard work&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Deliberate planning, directional guidance&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Troubleshoots independently, working conceptual model, solves novel problems with effort, mentors novices&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Proficient&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Autonomy, recognition for elegant solutions&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Clear big picture, nuanced information&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Learns from indirect experience, quickly applies proven solutions, applies maxims, deviates from plans appropriately&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Expert&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Innovation, industry recognition&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Freedom&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Works quickly and intuitively, invents new solutions, improves the state of the art, pushes boundaries&quot;)))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Big Data]]></title><description><![CDATA[Challenges related to data variety, velocity, and volume]]></description><link>https://www.jamestharpe.com/big-data/</link><guid isPermaLink="false">https://www.jamestharpe.com/big-data/</guid><pubDate>Sun, 21 Nov 2021 22:00:25 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-21T22:00:25.000Z&quot;,
  &quot;description&quot;: &quot;Challenges related to data variety, velocity, and volume&quot;,
  &quot;tags&quot;: [&quot;data-analysis&quot;, &quot;data-engineering&quot;, &quot;distributed-systems&quot;],
  &quot;title&quot;: &quot;Big Data&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Big data&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Big data&quot;), &quot; is a blanket term for the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-engineering/&quot;
  }, &quot;data engineering&quot;), &quot; and &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-analysis/&quot;
  }, &quot;data analysis&quot;), &quot; challenges that arise from working with extremely large datasets over &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../distributed-systems/&quot;
  }, &quot;distributed systems&quot;), &quot;.&quot;), mdx(&quot;blockquote&quot;, {
    className: &quot;twitter-tweet&quot;
  }, mdx(&quot;p&quot;, {
    lang: &quot;en&quot;,
    dir: &quot;ltr&quot;
  }, &quot;\&quot;big data\&quot; is when the size of the data itself becomes part of the problem&quot;), &quot;\u2014 Jeff Xiong (@gigix) &quot;, mdx(&quot;a&quot;, {
    href: &quot;https://twitter.com/gigix/status/174086466950021120?ref_src=twsrc%5Etfw&quot;
  }, &quot;February 27, 2012&quot;)), &quot; &quot;, mdx(&quot;script&quot;, {
    async: true,
    src: &quot;https://platform.twitter.com/widgets.js&quot;,
    charSet: &quot;utf-8&quot;
  }), mdx(&quot;p&quot;, null, &quot;In other words, if you ask an analytics team for a report and the report takes too long to run, will slow down a production system, requires too many steps to complete, or if the data is too difficult to identify and access, then it&apos;s probably a \&quot;big data\&quot; problem.&quot;), mdx(&quot;h2&quot;, null, &quot;Challenges with big data: Variety, velocity, veracity, volume&quot;), mdx(&quot;p&quot;, null, &quot;Often referred to as the &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;four &apos;V&apos;s&quot;), &quot;, the challenges of big data center on variety, velocity, veracity, and volume.&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Variety of data&quot;), &quot; refers to the formats and sources of raw &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data/&quot;
  }, &quot;data&quot;), &quot;. Data can come in \&quot;typical\&quot; forms - like &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../databases/&quot;
  }, &quot;databases&quot;), &quot;, spreadsheets, and other tabular forms (e.g. CSV files) - but also from sources like audio, video, and unstructured text. Data can also be sourced from a variety of sources in addition to databases, including: APIs, IoT devices, and biomedical devices. Each format and source of data requires additional effort to capture and process.&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Velocity of data&quot;), &quot; refers to the rate at which data is generated and processed. Data may be generated and processed in real-time, in batches, or sporadically. As the velocity of data increases, so does the complexity and effort required to process it dependably.&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Veracity of data&quot;), &quot; refers to the trustworthiness, accuracy, and consistency of data. Sources of data may be biased in various ways, contain errors or conflicts, or be full of abnormalities. This translate to a lot of potential work to validate, explain, and compensate for issues in the data or with data sources.&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Volume of data&quot;), &quot; refers to the sheer size of the data to be processed. It&apos;s common for enterprises to require petabytes of storage to house all the data required to help shape the company&apos;s future. This level of storage requires significant architecture to ensure availability and accessibility of data.&quot;), mdx(&quot;h2&quot;, null, &quot;Big Data Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://martinfowler.com/articles/bigData/&quot;
  }, &quot;Thinking about Big Data by Martin Fowler&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Epistemology]]></title><description><![CDATA[Theories of knowledge]]></description><link>https://www.jamestharpe.com/epistemology/</link><guid isPermaLink="false">https://www.jamestharpe.com/epistemology/</guid><pubDate>Sun, 21 Nov 2021 18:28:45 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-21T18:28:45.000Z&quot;,
  &quot;description&quot;: &quot;Theories of knowledge&quot;,
  &quot;tags&quot;: [],
  &quot;title&quot;: &quot;Epistemology&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Epistemology&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Epistemology&quot;), &quot; is the study of knowledge; it can be loosely defined as \&quot;how we know we know what we know.\&quot;&quot;), mdx(&quot;h2&quot;, null, &quot;Epistemology Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://plato.stanford.edu/entries/epistemology/&quot;
  }, &quot;Epistemology on the Stanford Encyclopedia of Philosophy&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Research]]></title><description><![CDATA[The systematic process of gathering data to establish facts]]></description><link>https://www.jamestharpe.com/research/</link><guid isPermaLink="false">https://www.jamestharpe.com/research/</guid><pubDate>Sun, 21 Nov 2021 18:28:45 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-21T18:28:45.000Z&quot;,
  &quot;description&quot;: &quot;The systematic process of gathering data to establish facts&quot;,
  &quot;tags&quot;: [&quot;epistemology&quot;, &quot;data&quot;, &quot;information&quot;],
  &quot;title&quot;: &quot;Research&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Research&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Research&quot;), &quot; is the systematic process of gathering &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data/&quot;
  }, &quot;data&quot;), &quot; to &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../epistemology/&quot;
  }, &quot;establish facts&quot;), &quot; and reach &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../information/&quot;
  }, &quot;conclusions&quot;), &quot;.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Sociology]]></title><description><![CDATA[The balance of opportunity and wealth distribution in a society]]></description><link>https://www.jamestharpe.com/sociology/</link><guid isPermaLink="false">https://www.jamestharpe.com/sociology/</guid><pubDate>Sun, 21 Nov 2021 17:51:43 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-21T17:51:43.000Z&quot;,
  &quot;description&quot;: &quot;The balance of opportunity and wealth distribution in a society&quot;,
  &quot;tags&quot;: [&quot;social-sciences&quot;],
  &quot;title&quot;: &quot;Sociology&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Sociology&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Sociology&quot;), &quot; is a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../social-sciences/&quot;
  }, &quot;social science&quot;), &quot; concerned with the structures, institutions, and consequences of human societies.&quot;), mdx(&quot;p&quot;, null, &quot;Sociology can be split into two major categories: Macrosociology and microsociology.&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Macrosociology&quot;), &quot; studies large populations to understand the impacts of these populations and their behaviors on individuals and smaller groups, generally using &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../statistics/&quot;
  }, &quot;statistical methods&quot;), &quot;. Common topics studied in macrosociology include &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../economics/&quot;
  }, &quot;economics&quot;), &quot;, poverty, racism, war, inequality, and major institutions.&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Microsociology&quot;), &quot; is studies smaller populations that make up societies, such as families, schools, clubs, and other small social interactions. Microsociology relies heavily on &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../interpretive-research/&quot;
  }, &quot;interpretive analysis&quot;), &quot; to determine how these small interactions influence larger patterns of society because test groups tend to be too small or too highly contextual for statistical analysis. Examples of interactions studied in microsociology include doctor-patient interactions, family dynamics, romantic relationships, teachers-student interactions, and so on.&quot;), mdx(&quot;h2&quot;, null, &quot;Sociology Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.khanacademy.org/test-prep/mcat/society-and-culture&quot;
  }, &quot;Society and culture on Khan Academy&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Economics]]></title><description><![CDATA[The dismal science]]></description><link>https://www.jamestharpe.com/economics/</link><guid isPermaLink="false">https://www.jamestharpe.com/economics/</guid><pubDate>Sun, 21 Nov 2021 17:44:45 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-21T17:44:45.000Z&quot;,
  &quot;description&quot;: &quot;The dismal science&quot;,
  &quot;tags&quot;: [&quot;social-sciences&quot;],
  &quot;title&quot;: &quot;Economics&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Economics&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Economics&quot;), &quot; is a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../social-sciences/&quot;
  }, &quot;social science&quot;), &quot; that studies how scarce resources are managed and distributed.&quot;), mdx(&quot;p&quot;, null, &quot;Economics can be split into two major categories: Microeconomics and macroeconomics. &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Microeconomics&quot;), &quot; is the study of behaviors of individual actors and entities that makeup an economy whereas &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;macroeconomics&quot;), &quot; is the study of economies in aggregate.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Interpretive Research]]></title><description><![CDATA[Research that attempts to derive theories from data that is too contextual, incomplete, or subjective for quantitative analysis]]></description><link>https://www.jamestharpe.com/interpretive-research/</link><guid isPermaLink="false">https://www.jamestharpe.com/interpretive-research/</guid><pubDate>Sun, 21 Nov 2021 17:44:45 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-21T17:44:45.000Z&quot;,
  &quot;description&quot;: &quot;Research that attempts to derive theories from data that is too contextual, incomplete, or subjective for quantitative analysis&quot;,
  &quot;tags&quot;: [&quot;research&quot;],
  &quot;title&quot;: &quot;Interpretive Research&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Interpretive research&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Interpretive research&quot;), &quot; is &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../research/&quot;
  }, &quot;research&quot;), &quot; that attempts to derive theories from &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data/&quot;
  }, &quot;data&quot;), &quot; that is too contextual, incomplete, or subjective for quantitative &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-analysis/&quot;
  }, &quot;analysis&quot;), &quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;Interpretive research resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://courses.lumenlearning.com/suny-hccc-research-methods/chapter/chapter-12-interpretive-research/&quot;
  }, &quot;Research Methods for the Social Sciences, Chapter 12: Interpretive Research&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Social Sciences]]></title><description><![CDATA[The study of human social relationships]]></description><link>https://www.jamestharpe.com/social-sciences/</link><guid isPermaLink="false">https://www.jamestharpe.com/social-sciences/</guid><pubDate>Sun, 21 Nov 2021 17:44:45 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-21T17:44:45.000Z&quot;,
  &quot;description&quot;: &quot;The study of human social relationships&quot;,
  &quot;tags&quot;: [&quot;science&quot;],
  &quot;title&quot;: &quot;Social Sciences&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Social sciences&quot;), mdx(&quot;p&quot;, null, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;social science&quot;), &quot; is a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../science/&quot;
  }, &quot;science&quot;), &quot; that studies human social relationships.&quot;), mdx(&quot;h2&quot;, null, &quot;Social Science Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://courses.lumenlearning.com/suny-hccc-research-methods/&quot;
  }, &quot;Research Methods for the Social Sciences&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Business]]></title><description><![CDATA[Ways of participating in economic activity]]></description><link>https://www.jamestharpe.com/business/</link><guid isPermaLink="false">https://www.jamestharpe.com/business/</guid><pubDate>Sun, 21 Nov 2021 17:42:25 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-21T17:42:25.000Z&quot;,
  &quot;description&quot;: &quot;Ways of participating in economic activity&quot;,
  &quot;tags&quot;: [&quot;economics&quot;],
  &quot;title&quot;: &quot;Business&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Business&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Business&quot;), &quot; is the practice of engaging in &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../economics/&quot;
  }, &quot;economic&quot;), &quot; activities, often as part of or with an organized group or enterprise.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Business Operations]]></title><description><![CDATA[Methods of minimizing costs and maximizing profit]]></description><link>https://www.jamestharpe.com/business-operations/</link><guid isPermaLink="false">https://www.jamestharpe.com/business-operations/</guid><pubDate>Sun, 21 Nov 2021 17:41:25 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-21T17:41:25.000Z&quot;,
  &quot;description&quot;: &quot;Methods of minimizing costs and maximizing profit&quot;,
  &quot;tags&quot;: [&quot;business&quot;],
  &quot;title&quot;: &quot;Business Operations&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Business operations&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Business operations&quot;), &quot; are the set of &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../business/&quot;
  }, &quot;business&quot;), &quot; practices intended to minimize the cost and maximize the profit associated with turning materials and labor into good and services.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Advertising]]></title><description><![CDATA[The art and science of creating and distributing ads]]></description><link>https://www.jamestharpe.com/advertising/</link><guid isPermaLink="false">https://www.jamestharpe.com/advertising/</guid><pubDate>Sun, 21 Nov 2021 15:29:20 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-21T15:29:20.000Z&quot;,
  &quot;description&quot;: &quot;The art and science of creating and distributing ads&quot;,
  &quot;tags&quot;: [&quot;marketing&quot;],
  &quot;title&quot;: &quot;Advertising&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Advertising&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Advertising&quot;), &quot; is the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../art/&quot;
  }, &quot;art&quot;), &quot; and &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../science/&quot;
  }, &quot;science&quot;), &quot; of creating and distributing ads for &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../marketing/&quot;
  }, &quot;marketing&quot;), &quot; purposes.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Art]]></title><description><![CDATA[The application of creative skills and imagination]]></description><link>https://www.jamestharpe.com/art/</link><guid isPermaLink="false">https://www.jamestharpe.com/art/</guid><pubDate>Sun, 21 Nov 2021 15:22:25 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-21T15:22:25.000Z&quot;,
  &quot;description&quot;: &quot;The application of creative skills and imagination&quot;,
  &quot;tags&quot;: [],
  &quot;title&quot;: &quot;Art&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Art&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Art&quot;), &quot; is the application of creative skills and imagination to produce novel achievements.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Data Teams]]></title><description><![CDATA[The make up and measures of effective data teams]]></description><link>https://www.jamestharpe.com/data-teams/</link><guid isPermaLink="false">https://www.jamestharpe.com/data-teams/</guid><pubDate>Sun, 21 Nov 2021 15:14:25 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-21T15:14:25.000Z&quot;,
  &quot;description&quot;: &quot;The make up and measures of effective data teams&quot;,
  &quot;tags&quot;: [&quot;information-technology&quot;, &quot;data&quot;, &quot;data-analysis&quot;, &quot;business-intelligence&quot;],
  &quot;title&quot;: &quot;Data Teams&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Data Teams&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Data teams&quot;), &quot; are teams, or teams of teams, that combine &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-engineering/&quot;
  }, &quot;data engineering&quot;), &quot;, &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-science/&quot;
  }, &quot;data science&quot;), &quot;, &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-analysis/&quot;
  }, &quot;data analysis&quot;), &quot;, &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../business-intelligence/&quot;
  }, &quot;business intelligence&quot;), &quot;, and other &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data/&quot;
  }, &quot;data&quot;), &quot;-related disciplines to improve decision making. Teams may form around a discipline to provide a shared service, or may form cross-functionally to serve a specific product or service end-to-end.&quot;), mdx(&quot;h2&quot;, null, &quot;Differences and interactions between data discipline&quot;), mdx(&quot;p&quot;, null, &quot;Disciplines related to data have significant overlap in roles and skills, but each has a distinct focus. The &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../requirements/&quot;
  }, &quot;needs&quot;), &quot; of the business are driven and validated by business intelligence. Data engineering provide the automation and infrastructure to collect, transform, and &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-pipelines/&quot;
  }, &quot;pipe&quot;), &quot; data to data analysts and data scientists. Data analysts query data to identify trends, create &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-visualizations/&quot;
  }, &quot;visualizations&quot;), &quot;, and build reports and dashboards while data scientists build machine learning and statistical models.&quot;), mdx(&quot;p&quot;, null, &quot;Whether a data team is formed around a specific discipline or as a cross-functional team, each team needs to meet a set of minimal skills to work effectively. The table below matches each discipline and skill to a minimum &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../dreyfus-model-of-skill-acquisition/&quot;
  }, &quot;level of proficiency&quot;), &quot; suitable for most contexts where a data team is required.&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Novice: Little or no knowledge required&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Beginner: Knows the basics but requires help to apply successfully&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Competent: Able to perform most tasks adequately without significant help&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Proficient: Able to design, plan, build and coach others on advanced applications&quot;)), mdx(&quot;table&quot;, null, mdx(&quot;thead&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;thead&quot;
  }, mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Skill \u2B07 / Role \u27A1&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Business Intelligence&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Data Engineering&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Data Science&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Data Analysis&quot;))), mdx(&quot;tbody&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Statistics&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Proficient&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Beginner&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Proficient&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Competent&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Data visualization&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Proficient&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Beginner&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Competent&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Proficient&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Cybersecurity&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Competent&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Competent&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Beginner&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Beginner&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;SQL&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Beginner&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Proficient&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Competent&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Competent&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Big Data&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Beginner&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Proficient&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Beginner&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Novice&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Software Engineering&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Novice&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Proficient&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Beginner&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Novice&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Distributed Systems&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Novice&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Proficient&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Novice&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Novice&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Ops Automation&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Novice&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Proficient&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Novice&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Novice&quot;)))), mdx(&quot;h2&quot;, null, &quot;Nontechnical needs of data teams&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Deep understanding of the business or domain they&apos;re modeling&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Ability to communicate complex analyses in simple terms&quot;)), mdx(&quot;h2&quot;, null, &quot;Signs of effective data teams&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;\&quot;It&apos;s all just data\&quot; - The organization takes the hard work of the data engineering teams for granted. As a consumer of data, it just seems so easy.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Data is generally trusted and correctly interpreted, thanks to effective communication&quot;)), mdx(&quot;h2&quot;, null, &quot;Data team resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.oreilly.com/content/why-a-data-scientist-is-not-a-data-engineer/&quot;
  }, &quot;Why a data scientist is not a data engineer&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Business Intelligence]]></title><description><![CDATA[Methods to bridge the gap between data and business]]></description><link>https://www.jamestharpe.com/business-intelligence/</link><guid isPermaLink="false">https://www.jamestharpe.com/business-intelligence/</guid><pubDate>Sun, 21 Nov 2021 14:52:25 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-21T14:52:25.000Z&quot;,
  &quot;description&quot;: &quot;Methods to bridge the gap between data and business&quot;,
  &quot;tags&quot;: [&quot;business-operations&quot;, &quot;data-products&quot;],
  &quot;title&quot;: &quot;Business Intelligence&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Business intelligence&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Business intelligence&quot;), &quot; is the integration of &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-products/&quot;
  }, &quot;data products&quot;), &quot; with &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../business-operations/&quot;
  }, &quot;business practices&quot;), &quot; to aid decision making and improve the overall performance of the business. A successful business intelligence practice results in a quantifiable difference in revenue and customer satisfaction.&quot;), mdx(&quot;p&quot;, null, &quot;Business intelligence practices may overlap significantly with &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-engineering/&quot;
  }, &quot;data engineering&quot;), &quot;, &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-science/&quot;
  }, &quot;data science&quot;), &quot;, and &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-analysis/&quot;
  }, &quot;data analysis&quot;), &quot; practices. However, the primary focus of business intelligence is on the development, execution, and communication of the overall strategy to use data to improve business.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Data Products]]></title><description><![CDATA[Ways of making data available]]></description><link>https://www.jamestharpe.com/data-products/</link><guid isPermaLink="false">https://www.jamestharpe.com/data-products/</guid><pubDate>Sun, 21 Nov 2021 14:24:25 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-21T14:24:25.000Z&quot;,
  &quot;description&quot;: &quot;Ways of making data available&quot;,
  &quot;tags&quot;: [&quot;data-engineering&quot;, &quot;data-analysis&quot;, &quot;data-pipelines&quot;, &quot;data-science&quot;, &quot;product-management&quot;],
  &quot;title&quot;: &quot;Data Products&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Data products&quot;), mdx(&quot;p&quot;, null, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;data product&quot;), &quot; is an application that consumes data produced by a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-pipelines/&quot;
  }, &quot;data pipeline&quot;), &quot; to help with &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-analysis/&quot;
  }, &quot;data-analysis&quot;), &quot;, improve decision making, or &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-science/&quot;
  }, &quot;make predictions&quot;), &quot;.&quot;), mdx(&quot;p&quot;, null, &quot;Data products include much more than &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-visualizations/&quot;
  }, &quot;charts and graphs&quot;), &quot;. For example, a social media feed generated based on user behavior to increase overall engagement is considered a data product because it attempts to predict which content will maximize engagement.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Extract Transform Load (ETL)]]></title><description><![CDATA[Ways to extract, transform, and load data]]></description><link>https://www.jamestharpe.com/etls/</link><guid isPermaLink="false">https://www.jamestharpe.com/etls/</guid><pubDate>Sun, 21 Nov 2021 14:19:24 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-21T14:19:24.000Z&quot;,
  &quot;description&quot;: &quot;Ways to extract, transform, and load data&quot;,
  &quot;tags&quot;: [&quot;data-pipelines&quot;, &quot;databases&quot;],
  &quot;title&quot;: &quot;Extract Transform Load (ETL)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Extract Transform Load (ETL)&quot;), mdx(&quot;p&quot;, null, &quot;An &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Extract Transform Load (ETL)&quot;), &quot; is an automated process that &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;extracts&quot;), &quot; &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data/&quot;
  }, &quot;data&quot;), &quot; from one or more sources, &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;transforms&quot;), &quot; it to meet the needs of one or more &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-products/&quot;
  }, &quot;data products&quot;), &quot;, and &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;loads&quot;), &quot; the transformed data to a host &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../databases/&quot;
  }, &quot;database&quot;), &quot; or &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-warehouses/&quot;
  }, &quot;data warehouse&quot;), &quot;. ETLs are the building blocks of &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-pipelines/&quot;
  }, &quot;data pipelines&quot;), &quot;.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Data Pipelines]]></title><description><![CDATA[Ways of making data available]]></description><link>https://www.jamestharpe.com/data-pipelines/</link><guid isPermaLink="false">https://www.jamestharpe.com/data-pipelines/</guid><pubDate>Sun, 21 Nov 2021 14:17:25 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-21T14:17:25.000Z&quot;,
  &quot;description&quot;: &quot;Ways of making data available&quot;,
  &quot;tags&quot;: [&quot;data-engineering&quot;, &quot;data-products&quot;],
  &quot;title&quot;: &quot;Data Pipelines&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Data Pipelines&quot;), mdx(&quot;p&quot;, null, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;data pipeline&quot;), &quot;, sometimes referred to as an &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;strong&quot;,
    &quot;href&quot;: &quot;../etls/&quot;
  }, &quot;ETL&quot;), &quot; pipeline&quot;), &quot;, is a process that ingests raw &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data/&quot;
  }, &quot;data&quot;), &quot; and transforms it to be useful to an organization as &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../information/&quot;
  }, &quot;information&quot;), &quot; consumable by one or more &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-products/&quot;
  }, &quot;data products&quot;), &quot;. Data pipelines may be chained together where the output from one pipeline is passed as input to another.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Databases]]></title><description><![CDATA[Organized collections of structured data]]></description><link>https://www.jamestharpe.com/databases/</link><guid isPermaLink="false">https://www.jamestharpe.com/databases/</guid><pubDate>Tue, 16 Nov 2021 18:58:42 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-16T18:58:42.000Z&quot;,
  &quot;description&quot;: &quot;Organized collections of structured data&quot;,
  &quot;redirect_from&quot;: [&quot;/database/&quot;],
  &quot;tags&quot;: [&quot;software-engineering&quot;],
  &quot;title&quot;: &quot;Databases&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Databases&quot;), mdx(&quot;p&quot;, null, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;database&quot;), &quot; is a collection of &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data/&quot;
  }, &quot;data&quot;), &quot; that is optimized to efficiently store and retrieve that data.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Data Visualizations]]></title><description><![CDATA[Visualizations that generate insights]]></description><link>https://www.jamestharpe.com/data-visualizations/</link><guid isPermaLink="false">https://www.jamestharpe.com/data-visualizations/</guid><pubDate>Tue, 16 Nov 2021 18:39:25 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-16T18:39:25.000Z&quot;,
  &quot;description&quot;: &quot;Visualizations that generate insights&quot;,
  &quot;tags&quot;: [&quot;data-analysis&quot;, &quot;data-products&quot;, &quot;business-intelligence&quot;],
  &quot;title&quot;: &quot;Data Visualizations&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Data visualizations&quot;), mdx(&quot;h2&quot;, null, &quot;Data Visualization Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.visual-literacy.org/periodic_table/periodic_table.html&quot;
  }, &quot;Periodic Table of Visualization Methods&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Photography]]></title><description><![CDATA[Take a picture, it will last longer]]></description><link>https://www.jamestharpe.com/photography/</link><guid isPermaLink="false">https://www.jamestharpe.com/photography/</guid><pubDate>Tue, 16 Nov 2021 18:00:10 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-16T18:00:10.000Z&quot;,
  &quot;description&quot;: &quot;Take a picture, it will last longer&quot;,
  &quot;tags&quot;: [&quot;art&quot;],
  &quot;title&quot;: &quot;Photography&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Photography&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Science]]></title><description><![CDATA[The most rigorous system of epistemology]]></description><link>https://www.jamestharpe.com/science/</link><guid isPermaLink="false">https://www.jamestharpe.com/science/</guid><pubDate>Tue, 16 Nov 2021 17:38:59 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-16T17:38:59.000Z&quot;,
  &quot;description&quot;: &quot;The most rigorous system of epistemology&quot;,
  &quot;tags&quot;: [&quot;epistemology&quot;],
  &quot;title&quot;: &quot;Science&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Science&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Science&quot;), &quot; is the systematic development and organization of knowledge through observation, hypotheses, and repeatable experimentation.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Data Analysis]]></title><description><![CDATA[The transformation of data to information]]></description><link>https://www.jamestharpe.com/data-analysis/</link><guid isPermaLink="false">https://www.jamestharpe.com/data-analysis/</guid><pubDate>Tue, 16 Nov 2021 17:35:25 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-16T17:35:25.000Z&quot;,
  &quot;description&quot;: &quot;The transformation of data to information&quot;,
  &quot;tags&quot;: [&quot;business-intelligence&quot;, &quot;statistics&quot;, &quot;data-teams&quot;],
  &quot;title&quot;: &quot;Data Analysis&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Data analysis&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Data analysis&quot;), &quot; is the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../art/&quot;
  }, &quot;art&quot;), &quot; and &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../science/&quot;
  }, &quot;science&quot;), &quot; of selecting, normalizing, and modeling &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data/&quot;
  }, &quot;data&quot;), &quot; to derive useful &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../information/&quot;
  }, &quot;information&quot;), &quot;, typically for &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../business-intelligence/&quot;
  }, &quot;businesses&quot;), &quot;. This generally involves querying data to identify trends and measure performance.&quot;), mdx(&quot;p&quot;, null, &quot;The discipline of data analysis overlaps significantly with &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-engineering/&quot;
  }, &quot;data engineering&quot;), &quot;, &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-science/&quot;
  }, &quot;data science&quot;), &quot;, and &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../business-intelligence/&quot;
  }, &quot;business intelligence&quot;), &quot;. However, data analysis focuses on telling stories through data through reports and and &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-visualizations/&quot;
  }, &quot;visualizations&quot;), &quot;.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Data Science]]></title><description><![CDATA[The scientific method applied to data analysis]]></description><link>https://www.jamestharpe.com/data-science/</link><guid isPermaLink="false">https://www.jamestharpe.com/data-science/</guid><pubDate>Tue, 16 Nov 2021 17:25:25 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-16T17:25:25.000Z&quot;,
  &quot;description&quot;: &quot;The scientific method applied to data analysis&quot;,
  &quot;tags&quot;: [&quot;data-analysis&quot;, &quot;statistics&quot;, &quot;science&quot;, &quot;data-teams&quot;],
  &quot;title&quot;: &quot;Data Science&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Data science&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Data science&quot;), &quot; is the application of &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../statistics/&quot;
  }, &quot;statistics&quot;), &quot; and the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../science/&quot;
  }, &quot;scientific method&quot;), &quot; to the practice of &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-analysis/&quot;
  }, &quot;data analysis&quot;), &quot;, with an emphasis on making accurate predictions.&quot;), mdx(&quot;p&quot;, null, &quot;Data science practices may overlap significantly with &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../business-intelligence/&quot;
  }, &quot;business intelligence&quot;), &quot;, &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-engineering/&quot;
  }, &quot;data engineering&quot;), &quot;, and &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-analysis/&quot;
  }, &quot;data analysis&quot;), &quot; practices. However, the primary focus of data science is to apply &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../machine-learning/&quot;
  }, &quot;machine learning&quot;), &quot; and statistical methods to &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data/&quot;
  }, &quot;data&quot;), &quot;.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Data Engineering]]></title><description><![CDATA[Engineering approaches to data management]]></description><link>https://www.jamestharpe.com/data-engineering/</link><guid isPermaLink="false">https://www.jamestharpe.com/data-engineering/</guid><pubDate>Tue, 16 Nov 2021 17:19:25 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-16T17:19:25.000Z&quot;,
  &quot;description&quot;: &quot;Engineering approaches to data management&quot;,
  &quot;tags&quot;: [&quot;business-intelligence&quot;, &quot;software-engineering&quot;, &quot;information-technology&quot;, &quot;data-teams&quot;],
  &quot;title&quot;: &quot;Data Engineering&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Data Engineering&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Data engineering&quot;), &quot; is the specialized application of &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../software-engineering/&quot;
  }, &quot;software-engineering&quot;), &quot; practices to collect, transform, and store data for &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-analysis/&quot;
  }, &quot;analysis&quot;), &quot; and &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-science/&quot;
  }, &quot;predictive modeling&quot;), &quot;.&quot;), mdx(&quot;p&quot;, null, &quot;Data engineering practices may overlap significantly with &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../business-intelligence/&quot;
  }, &quot;business intelligence&quot;), &quot;, &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-science/&quot;
  }, &quot;data science&quot;), &quot;, and &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-analysis/&quot;
  }, &quot;data analysis&quot;), &quot; practices. However, the primary focus of data engineering is to develop the infrastructure, automation, and &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../ci-cd/&quot;
  }, &quot;CI/CD&quot;), &quot; required to store and access the data as &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../requirements/&quot;
  }, &quot;required&quot;), &quot; by the business.&quot;), mdx(&quot;h2&quot;, null, &quot;Video: How Data Engineering Works&quot;), mdx(&quot;iframe&quot;, {
    width: &quot;560&quot;,
    height: &quot;315&quot;,
    src: &quot;https://www.youtube.com/embed/qWru-b6m030&quot;,
    title: &quot;YouTube video player&quot;,
    frameBorder: &quot;0&quot;,
    allow: &quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot;,
    allowFullScreen: true
  }));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Apache Spark]]></title><description><![CDATA[A data processing engine for batch processing, stream processing, and machine learning]]></description><link>https://www.jamestharpe.com/apache-spark/</link><guid isPermaLink="false">https://www.jamestharpe.com/apache-spark/</guid><pubDate>Tue, 16 Nov 2021 16:31:25 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-16T16:31:25.000Z&quot;,
  &quot;description&quot;: &quot;A data processing engine for batch processing, stream processing, and machine learning&quot;,
  &quot;tags&quot;: [&quot;apache&quot;, &quot;data-analysis&quot;, &quot;data-pipelines&quot;, &quot;open-source-software&quot;],
  &quot;title&quot;: &quot;Apache Spark&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Apache Spark&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Apache Spark&quot;), &quot; is an &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../open-source-software/&quot;
  }, &quot;open-source&quot;), &quot;, extensible, distributed data processing engine, suitable for &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../big-data/&quot;
  }, &quot;big data&quot;), &quot; &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-engineering/&quot;
  }, &quot;engineering&quot;), &quot; tasks including batch data processing, data streaming, &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-analysis/&quot;
  }, &quot;analytics&quot;), &quot;, and &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../machine-learning/&quot;
  }, &quot;machine learning&quot;), &quot;. It supports Python, SQL, Scala, &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../java/&quot;
  }, &quot;Java&quot;), &quot;, and R &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../computer-languages/&quot;
  }, &quot;programming languages&quot;), &quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;Apache Spark Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;http://spark.apache.org/&quot;
  }, &quot;Apache Spark Official Website&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Statistics]]></title><description><![CDATA[The analysis of numerical data]]></description><link>https://www.jamestharpe.com/statistics/</link><guid isPermaLink="false">https://www.jamestharpe.com/statistics/</guid><pubDate>Mon, 15 Nov 2021 20:54:46 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-15T20:54:46.000Z&quot;,
  &quot;description&quot;: &quot;The analysis of numerical data&quot;,
  &quot;tags&quot;: [&quot;math&quot;, &quot;data-analysis&quot;],
  &quot;title&quot;: &quot;Statistics&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Statistics&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Statistics&quot;), &quot; are a set of &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../math/&quot;
  }, &quot;mathematical techniques&quot;), &quot; to &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-analysis/&quot;
  }, &quot;analyze&quot;), &quot; numerical &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data/&quot;
  }, &quot;data&quot;), &quot; to produce &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../information/&quot;
  }, &quot;information&quot;), &quot;, especially for the purpose of inferring proportions in a whole from those in a representative sample.&quot;), mdx(&quot;h2&quot;, null, &quot;Statistics Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCKzJFdi57J53Vr_BkTfN3uQ&quot;
  }, &quot;Primer YouTube Channel&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.khanacademy.org/math/statistics-probability&quot;
  }, &quot;Probability and Statistics on Khan Academy&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Programmatic Advertising]]></title><description><![CDATA[The automated buying and selling of ads]]></description><link>https://www.jamestharpe.com/programmatic-advertising/</link><guid isPermaLink="false">https://www.jamestharpe.com/programmatic-advertising/</guid><pubDate>Mon, 15 Nov 2021 13:28:20 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-15T13:28:20.000Z&quot;,
  &quot;description&quot;: &quot;The automated buying and selling of ads&quot;,
  &quot;tags&quot;: [&quot;advertising&quot;],
  &quot;title&quot;: &quot;Programmatic Advertising&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Programmatic advertising&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Programmatic advertising&quot;), &quot; is the automated buying and selling of &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../advertising/&quot;
  }, &quot;ads&quot;), &quot;.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Data]]></title><description><![CDATA[Facts, statistics, and references to information]]></description><link>https://www.jamestharpe.com/data/</link><guid isPermaLink="false">https://www.jamestharpe.com/data/</guid><pubDate>Mon, 15 Nov 2021 12:51:19 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-15T12:51:19.000Z&quot;,
  &quot;description&quot;: &quot;Facts, statistics, and references to information&quot;,
  &quot;tags&quot;: [&quot;computer-science&quot;],
  &quot;title&quot;: &quot;Data&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Data&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Data&quot;), &quot; are a set of values for variables about one or more objects or events. A single value of a single variable is a &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;datum&quot;), &quot;, which can be thought of as the fundamental unit of &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../information/&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;a&quot;
  }, &quot;information&quot;)), &quot; which is data put into some useful context.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Information]]></title><description><![CDATA[Data put into useful context]]></description><link>https://www.jamestharpe.com/information/</link><guid isPermaLink="false">https://www.jamestharpe.com/information/</guid><pubDate>Mon, 15 Nov 2021 12:51:19 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-15T12:51:19.000Z&quot;,
  &quot;description&quot;: &quot;Data put into useful context&quot;,
  &quot;tags&quot;: [&quot;data&quot;],
  &quot;title&quot;: &quot;Information&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Information&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Information&quot;), &quot; is &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data/&quot;
  }, &quot;data&quot;), &quot; organized and structured into a context to help make decisions or understand phenomena.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Statistical Hypothesis Testing]]></title><description><![CDATA[The art and science of stimulating demand]]></description><link>https://www.jamestharpe.com/statistical-hypothesis-testing/</link><guid isPermaLink="false">https://www.jamestharpe.com/statistical-hypothesis-testing/</guid><pubDate>Mon, 15 Nov 2021 12:48:27 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-15T12:48:27.000Z&quot;,
  &quot;description&quot;: &quot;The art and science of stimulating demand&quot;,
  &quot;tags&quot;: [&quot;statistics&quot;],
  &quot;title&quot;: &quot;Statistical Hypothesis Testing&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Statistical hypothesis testing&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Statistical hypothesis testing&quot;), &quot; is the use of observed &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data/&quot;
  }, &quot;data&quot;), &quot; to draw conclusions about a claim regarding a larger dataset while addressing for variations in random samples used for statistical inference.&quot;), mdx(&quot;h2&quot;, null, &quot;Statistical hypothesis testing resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.afit.edu/stat/statcoe_files/Statistical%20Hypothesis%20Testing.pdf&quot;
  }, &quot;Statistical Hypothesis Testing by Jennifer Kensler, Ph.D.&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Marketing]]></title><description><![CDATA[The art and science of stimulating demand]]></description><link>https://www.jamestharpe.com/marketing/</link><guid isPermaLink="false">https://www.jamestharpe.com/marketing/</guid><pubDate>Mon, 15 Nov 2021 12:43:27 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-15T12:43:27.000Z&quot;,
  &quot;description&quot;: &quot;The art and science of stimulating demand&quot;,
  &quot;tags&quot;: [&quot;business&quot;, &quot;economics&quot;],
  &quot;title&quot;: &quot;Marketing&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Marketing&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Marketing&quot;), &quot; is the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../art/&quot;
  }, &quot;art&quot;), &quot; and &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../science/&quot;
  }, &quot;science&quot;), &quot; of stimulating &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../economics/&quot;
  }, &quot;economic demand&quot;), &quot;. Marketing includes audience selection, &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../research/&quot;
  }, &quot;research&quot;), &quot;, &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-analysis/&quot;
  }, &quot;analysis&quot;), &quot;, &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../advertising/&quot;
  }, &quot;advertising&quot;), &quot;, &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../sociology/&quot;
  }, &quot;community&quot;), &quot; outreach, pricing, &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../product-management/&quot;
  }, &quot;product&quot;), &quot; placement, and other practices.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Multivariate Testing]]></title><description><![CDATA[The application of statistical hypothesis testing to marketing collateral]]></description><link>https://www.jamestharpe.com/multivariate-testing/</link><guid isPermaLink="false">https://www.jamestharpe.com/multivariate-testing/</guid><pubDate>Mon, 15 Nov 2021 12:40:27 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-15T12:40:27.000Z&quot;,
  &quot;description&quot;: &quot;The application of statistical hypothesis testing to marketing collateral&quot;,
  &quot;tags&quot;: [&quot;statistical-hypothesis-testing&quot;, &quot;marketing&quot;],
  &quot;title&quot;: &quot;Multivariate Testing&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Multivariate Testing&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Multivariate testing&quot;), &quot; applies &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../statistical-hypothesis-testing/&quot;
  }, &quot;statistical hypothesis testing&quot;), &quot; to &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../marketing/&quot;
  }, &quot;marketing&quot;), &quot; collateral such as &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../advertising/&quot;
  }, &quot;advertisement&quot;), &quot; and &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../product-management/&quot;
  }, &quot;product&quot;), &quot; designs by swapping out elements of the collateral for alternative versions, measuring the impact of the change, and identifying the combination of variables that maximize performance against a desired goal.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Digital Creative Optimization (DCO)]]></title><description><![CDATA[The automated performance-optimization of advertising creative]]></description><link>https://www.jamestharpe.com/dco/</link><guid isPermaLink="false">https://www.jamestharpe.com/dco/</guid><pubDate>Mon, 15 Nov 2021 12:36:27 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-15T12:36:27.000Z&quot;,
  &quot;description&quot;: &quot;The automated performance-optimization of advertising creative&quot;,
  &quot;tags&quot;: [&quot;programmatic-advertising&quot;, &quot;multivariate-testing&quot;],
  &quot;title&quot;: &quot;Digital Creative Optimization (DCO)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Digital Creative Optimization (DCO)&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Digital Creative Optimization (DCO)&quot;), &quot; is the automatic optimization of &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../advertising/&quot;
  }, &quot;ad&quot;), &quot; content to improve performance through &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../multivariate-testing/&quot;
  }, &quot;multivariate testing&quot;), &quot;. Ad content may include copy, colors, imagery, videos, and the integration of information unique to the user (for example, name or location). DCO is used to maximize desired interactions driven by the ad, such as click-through and conversion events.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Leadership]]></title><description><![CDATA[The art and science of creating positive change]]></description><link>https://www.jamestharpe.com/leadership/</link><guid isPermaLink="false">https://www.jamestharpe.com/leadership/</guid><pubDate>Mon, 08 Nov 2021 18:57:30 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-08T18:57:30.000Z&quot;,
  &quot;description&quot;: &quot;The art and science of creating positive change&quot;,
  &quot;tags&quot;: [],
  &quot;title&quot;: &quot;Leadership&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Leadership Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://hbr.org/2001/12/what-leaders-really-do&quot;
  }, &quot;HBR: What Leaders Really Do&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.ted.com/talks/linda_cliatt_wayman_how_to_fix_a_broken_school_lead_fearlessly_love_hard?language=en&quot;
  }, &quot;Linda Cliatt-Wayman: How to Fix a Broken School, Lead Fearlessly, and Love Hard&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[JavaScript Recipe: Get the last element from an array]]></title><description><![CDATA[Recipe to get the last element from a JavaScript Array]]></description><link>https://www.jamestharpe.com/js-get-last-array-element/</link><guid isPermaLink="false">https://www.jamestharpe.com/js-get-last-array-element/</guid><pubDate>Mon, 08 Nov 2021 15:42:47 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-11-08T15:42:47.000Z&quot;,
  &quot;description&quot;: &quot;Recipe to get the last element from a JavaScript Array&quot;,
  &quot;tags&quot;: [&quot;js-recipes&quot;],
  &quot;title&quot;: &quot;JavaScript Recipe: Get the last element from an array&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Get the last element from an array&quot;), mdx(&quot;p&quot;, null, &quot;Given an array with one or more elements, return only the last element from the array.&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;javascript&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-javascript&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-javascript&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;const&quot;), &quot; array &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;[&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;3&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;]&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\narray&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;at&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;-&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// 3 (preferred, does NOT mutate)&quot;), &quot;\narray&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;pop&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// 3 (preferred, mutates array!)&quot;), &quot;\narray&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;slice&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;-&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;[&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;]&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// 3 (for older browsers and NodeJS versions, mutates array!)&quot;)))), mdx(&quot;h2&quot;, null, &quot;Related MDN Documentation&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at&quot;
  }, &quot;Array.prototype.at()&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop&quot;
  }, &quot;Array.prototype.pop()&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice&quot;
  }, &quot;Array.prototype.slice()&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[SMART Goals]]></title><description><![CDATA[How to set goals that are specific, measurable, achievable, relevant, timely]]></description><link>https://www.jamestharpe.com/smart-goals/</link><guid isPermaLink="false">https://www.jamestharpe.com/smart-goals/</guid><pubDate>Mon, 11 Oct 2021 13:27:56 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-10-11T13:27:56.000Z&quot;,
  &quot;description&quot;: &quot;How to set goals that are specific, measurable, achievable, relevant, timely&quot;,
  &quot;tags&quot;: [&quot;personal-productivity&quot;, &quot;management&quot;],
  &quot;title&quot;: &quot;SMART Goals&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;SMART Goals&quot;), mdx(&quot;p&quot;, null, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;SMART goal&quot;), &quot; is a goal that is specific, measurable, achievable, relevant, and timely. SMART goals can help clarify priorities and improve decision making while reducing the need for outside guidance by providing enough information for independent and on-the-fly decisions.&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Specific&quot;), &quot; goals are objectively and usually independently verifiable. In other words, it should be clear to any observer whether or not the goal has been achieved.&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Measurable&quot;), &quot; goals show a clear indication of progress. Progress can be measured in a variety of ways; perhaps the simplest is to break the goal down into smaller steps and measuring complete vs. incomplete. Another way of measuring is through incremental progress; for example, if the goal is to run a 5-minute mile then progress can be seen by reducing the time it take to run a mile from 6 minutes to 5 minutes.&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Achievable&quot;), &quot; goals are realistically achieved with the resources, skills, and time that will be dedicated to achieving each goal.&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Relevant&quot;), &quot; goals solve real problems, seize real opportunities, and avoid solving problems that don&apos;t exist.&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Timely&quot;), &quot; goals have due-dates (and sometimes milestones) that ensure relevancy and create a sense of urgency that is inline with the overall priority of each goal.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[You Aren't Gonna Need it (YAGNI)]]></title><description><![CDATA[A simple mnemonic to help limit project scope]]></description><link>https://www.jamestharpe.com/yagni/</link><guid isPermaLink="false">https://www.jamestharpe.com/yagni/</guid><pubDate>Mon, 11 Oct 2021 13:27:56 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-10-11T13:27:56.000Z&quot;,
  &quot;description&quot;: &quot;A simple mnemonic to help limit project scope&quot;,
  &quot;tags&quot;: [&quot;requirements&quot;, &quot;project-management&quot;],
  &quot;title&quot;: &quot;You Aren&apos;t Gonna Need it (YAGNI)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;You Aren&apos;t Gonna Need it (YAGNI)&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;You Aren&apos;t Gonna Need it (YAGNI)&quot;), &quot; is a mnemonic to help limit scope in &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../requirements/&quot;
  }, &quot;requirements&quot;), &quot;. YAGNI advises that there&apos;s no point in building capabilities into &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../product-management/&quot;
  }, &quot;products&quot;), &quot; until there is an observable need. Though applicable to virtually any &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../engineering/&quot;
  }, &quot;engineering&quot;), &quot; project, YAGNI is especially applicable to &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../software-engineering/&quot;
  }, &quot;software&quot;), &quot; because it&apos;s so easy to change compared to other types of engineering projects.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Architectural Decision Records (ARDs)]]></title><description><![CDATA[A method for capturing architectural decisions]]></description><link>https://www.jamestharpe.com/adrs/</link><guid isPermaLink="false">https://www.jamestharpe.com/adrs/</guid><pubDate>Mon, 11 Oct 2021 13:04:39 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-10-11T13:04:39.000Z&quot;,
  &quot;description&quot;: &quot;A method for capturing architectural decisions&quot;,
  &quot;tags&quot;: [&quot;software-architecture&quot;, &quot;requirements&quot;, &quot;system-qualities&quot;],
  &quot;title&quot;: &quot;Architectural Decision Records (ARDs)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Architectural Decision Records (ARDs)&quot;), mdx(&quot;p&quot;, null, &quot;An &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;architectural decision record (ARD)&quot;), &quot; is the record of a software design choice that addresses a significant &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../requirements/&quot;
  }, &quot;requirement&quot;), &quot; of a software system and answers \&quot;why?\&quot; the decision was made.&quot;), mdx(&quot;p&quot;, null, &quot;An ADR typically captures a single decision in a light-weight format tha captures the &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;context&quot;), &quot; in which the decision is applicable, the &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;concern&quot;), &quot; addressed by the decision, the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../system-qualities/&quot;
  }, mdx(&quot;em&quot;, {
    parentName: &quot;a&quot;
  }, &quot;system quality&quot;)), &quot; addressed/impacted, notable downsides to the decision, the &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;decision&quot;), &quot; its self, and any additional rationale or commentary deemed necessary to ensure the ADR is easily understood.&quot;), mdx(&quot;h2&quot;, null, &quot;Qualities of Effective ADRs&quot;), mdx(&quot;p&quot;, null, &quot;In the article &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://www.infoq.com/articles/sustainable-architectural-design-decisions/&quot;
  }, &quot;Sustainable Architectural Design Decisions&quot;), &quot;, the authors coopt the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../smart-goals/&quot;
  }, &quot;SMART mnemonic&quot;), &quot; to mean: Strategic, Measurable, Achievable, Requirements-driven, and Timeliness.&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Strategic&quot;), &quot; ADRs consider the the long-term consequences of each decision on extensibility, operational overhead, and business strategy.&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Measurable&quot;), &quot; ADRs are objectively verifiable both in implementation - is it implemented according to the decision? - and outcome - is the decision having the desired impact?&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Achievable&quot;), &quot; ADRs are reasonably followed because they are \&quot;good enough\&quot; but not necessarily \&quot;ideal\&quot;. For example, the difference in cost and effort between 99.9%, 99.99%, and 99.999% availability can be exponential; while \&quot;five nines availability\&quot; may be the idea, three or four nines may be good enough.&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Requirements-driven&quot;), &quot; ADRs are take in the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../requirements/&quot;
  }, &quot;requirements and constraints&quot;), &quot; of the project and avoid solutions to problems that aren&apos;t likely to be encountered (see also: &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../yagni/&quot;
  }, &quot;YAGNI&quot;), &quot;).&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Timeless&quot;), &quot; ADRs will remain relevant for a long time because they are based on real-world experience and apply across platforms, tools, and technology stacks. As with any requirement, ADRs describe what the solution must and must not do, without describing how the solution is achieved.&quot;), mdx(&quot;h2&quot;, null, &quot;ADR Templates&quot;), mdx(&quot;h3&quot;, null, &quot;Short-Form ADR Template&quot;), mdx(&quot;p&quot;, null, &quot;In the context of &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;\\&lt;use-case&quot;, &quot;&gt;&quot;), &quot;, facing &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;\\&lt;concern&quot;, &quot;&gt;&quot;), &quot; we decided for &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;\\&lt;decision&quot;, &quot;&gt;&quot;), &quot; to achieve &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;\\&lt;quality&quot;, &quot;&gt;&quot;), &quot;, accepting &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;\\&lt;down-sides&quot;, &quot;&gt;&quot;), &quot;.&quot;), mdx(&quot;h3&quot;, null, &quot;Long-Form ADR Template&quot;), mdx(&quot;p&quot;, null, &quot;In the context of &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;\\&lt;use-case&quot;, &quot;&gt;&quot;), &quot;, facing &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;\\&lt;concern&quot;, &quot;&gt;&quot;), &quot; we decided for &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;\\&lt;decision&quot;, &quot;&gt;&quot;), &quot; to achieve &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;\\&lt;quality&quot;, &quot;&gt;&quot;), &quot;, accepting &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;\\&lt;down-sides&quot;, &quot;&gt;&quot;), &quot;, because &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;\\&lt;rationale-and-commentary&quot;, &quot;&gt;&quot;), &quot;.&quot;), mdx(&quot;h3&quot;, null, &quot;ADR Markdown Template&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;markdown&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-markdown&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-markdown&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token title important&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;#&quot;), &quot; Title&quot;), &quot;\n\nDate: \n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token title important&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;##&quot;), &quot; Status&quot;), &quot;\n\nAccepted|Proposed|Deprecated|Superseded\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;&lt;!-- Choose one of the above statuses. If Superseded, please link to the superseding ADRs --&gt;&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token title important&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;##&quot;), &quot; Context&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;&lt;!-- Describe the relevant context and terminology associated with this decision --&gt;&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token title important&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;##&quot;), &quot; Decision&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;&lt;!-- Detail the decision and how it can be verified --&gt;&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token title important&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;##&quot;), &quot; Additional Rationale and Commentary&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;&lt;!-- Provide secondary details that may be useful to understanding why this decision was made. If not needed, please delete this section. --&gt;&quot;)))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[System Qualities and Nonfunctional Requirements (NFRs)]]></title><description><![CDATA[Constraints on how software is engineered]]></description><link>https://www.jamestharpe.com/system-qualities/</link><guid isPermaLink="false">https://www.jamestharpe.com/system-qualities/</guid><pubDate>Tue, 05 Oct 2021 11:22:39 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-10-05T11:22:39.000Z&quot;,
  &quot;description&quot;: &quot;Constraints on how software is engineered&quot;,
  &quot;tags&quot;: [&quot;software-engineering&quot;, &quot;requirements&quot;],
  &quot;title&quot;: &quot;System Qualities and Nonfunctional Requirements (NFRs)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;System Qualities and Nonfunctional Requirements (NFRs)&quot;), mdx(&quot;p&quot;, null, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;system quality&quot;), &quot;, sometimes known as a &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;nonfunctional requirement (NFR)&quot;), &quot;, is a type of &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../requirements/&quot;
  }, &quot;requirement&quot;), &quot; that defines constraints on how &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../software-engineering/&quot;
  }, &quot;software is engineered&quot;), &quot; to ensure a baseline level of quality. System qualities are often integrated into the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../sdlc/&quot;
  }, &quot;SDLC&quot;), &quot; as part of the \&quot;definition of done\&quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;Categories of System Qualities and NFRs&quot;), mdx(&quot;p&quot;, null, &quot;Common categories of system qualities are:&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Availability&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Disaster recovery&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Legal/regulatory compliance&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Maintainability&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Observability&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Performance&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Reliability&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Scalability&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Security&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Usability&quot;)));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Software Architecture]]></title><description><![CDATA[The practice of organizing software components in a complex system]]></description><link>https://www.jamestharpe.com/software-architecture/</link><guid isPermaLink="false">https://www.jamestharpe.com/software-architecture/</guid><pubDate>Tue, 05 Oct 2021 11:12:39 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-10-05T11:12:39.000Z&quot;,
  &quot;description&quot;: &quot;The practice of organizing software components in a complex system&quot;,
  &quot;tags&quot;: [&quot;software-engineering&quot;],
  &quot;title&quot;: &quot;Software Architecture&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Software Architecture&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Software architecture&quot;), &quot; is the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../software-engineering/&quot;
  }, &quot;software engineering&quot;), &quot; practice of planning, organizing, and evolving the components of a system of applications for optimal interaction. What is \&quot;optimal\&quot; is determined by the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../requirements/&quot;
  }, &quot;requirements&quot;), &quot;, constraints, and design goals of the system. Optimizations may include cost, flexibility, scalability, implementation timelines, and various business factors.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Permanent removal of Windows taskbar pinned items]]></title><description><![CDATA[A quick fix to permanently remove pinned taskbar items that keep returning after a restart]]></description><link>https://www.jamestharpe.com/windows-unpinned-items-return-on-restart/</link><guid isPermaLink="false">https://www.jamestharpe.com/windows-unpinned-items-return-on-restart/</guid><pubDate>Thu, 30 Sep 2021 09:55:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-09-30T09:55:11.000Z&quot;,
  &quot;description&quot;: &quot;A quick fix to permanently remove pinned taskbar items that keep returning after a restart&quot;,
  &quot;tags&quot;: [&quot;windows&quot;],
  &quot;title&quot;: &quot;Permanent removal of Windows taskbar pinned items&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;How to permanently remove pinned items from the Windows taskbar&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../windows/&quot;
  }, &quot;Windows&quot;), &quot; taskbar allows you to \&quot;pin\&quot; apps to it so they&apos;re easily accessible. However, some items may get re-pinned when the computer is rebooted even though you want them permanently unpinned.&quot;), mdx(&quot;p&quot;, null, &quot;The following solution to permanently unpin items from the Windows taskbar was tested with Windows 10:&quot;), mdx(&quot;ol&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;Press &quot;, mdx(&quot;kbd&quot;, null, &quot;Win&quot;), &quot;+&quot;, mdx(&quot;kbd&quot;, null, &quot;R&quot;), &quot; keys&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;Type &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;%LOCALAPPDATA%\\Microsoft\\Windows\\Shell\\&quot;), &quot; and press &quot;, mdx(&quot;kbd&quot;, null, &quot;Enter&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;Open &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;LayoutModification.xml&quot;), &quot; in an editor (notepad works fine, I prefer Visual Studio Code)&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;Remove the unwanted &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;taskbar:DesktopApp&quot;), &quot; elements from the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;LayoutModificationTemplate/CustomTaskbarLayoutCollection/defaultlayout:TaskbarLayout/taskbar:TaskbarPinList&quot;), &quot; element&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;Save the file&quot;)), mdx(&quot;p&quot;, null, &quot;You can now remove the unwanted items from the taskbar and they will not return upon reboot.&quot;), mdx(&quot;h2&quot;, null, mdx(&quot;code&quot;, {
    parentName: &quot;h2&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;LayoutModification.xml&quot;), &quot;: Before and After&quot;), mdx(&quot;p&quot;, null, &quot;Example of a &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;LayoutModification.xml&quot;), &quot; that causes pinned items that were removed to be re-added to the taskbar upon restart:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;xml&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-xml&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-xml&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), &quot;LayoutModificationTemplate&quot;), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token attr-name&quot;
  }, &quot;xmlns&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token attr-value&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation attr-equals&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\&quot;&quot;), &quot;http://schemas.microsoft.com/Start/2014/LayoutModification&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\&quot;&quot;)), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token attr-name&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;xmlns:&quot;), &quot;defaultlayout&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token attr-value&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation attr-equals&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\&quot;&quot;), &quot;http://schemas.microsoft.com/Start/2014/FullDefaultLayout&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\&quot;&quot;)), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token attr-name&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;xmlns:&quot;), &quot;start&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token attr-value&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation attr-equals&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\&quot;&quot;), &quot;http://schemas.microsoft.com/Start/2014/StartLayout&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\&quot;&quot;)), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token attr-name&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;xmlns:&quot;), &quot;taskbar&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token attr-value&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation attr-equals&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\&quot;&quot;), &quot;http://schemas.microsoft.com/Start/2014/TaskbarLayout&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\&quot;&quot;)), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token attr-name&quot;
  }, &quot;Version&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token attr-value&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation attr-equals&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\&quot;&quot;), &quot;1&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\&quot;&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), &quot;LayoutOptions&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token attr-name&quot;
  }, &quot;StartTileGroupCellWidth&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token attr-value&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation attr-equals&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\&quot;&quot;), &quot;6&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\&quot;&quot;)), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;/&gt;&quot;)), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), &quot;DefaultLayoutOverride&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), &quot;StartLayoutCollection&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), &quot;\n    \t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;&lt;!-- ... Code omitted for brevity ... --&gt;&quot;), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;/&quot;), &quot;StartLayoutCollection&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;/&quot;), &quot;DefaultLayoutOverride&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), &quot;CustomTaskbarLayoutCollection&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token attr-name&quot;
  }, &quot;PinListPlacement&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token attr-value&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation attr-equals&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\&quot;&quot;), &quot;Replace&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\&quot;&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), &quot;\n    \t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;defaultlayout:&quot;), &quot;TaskbarLayout&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), &quot;\n     \t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;taskbar:&quot;), &quot;TaskbarPinList&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), &quot;\n            \t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;taskbar:&quot;), &quot;DesktopApp&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token attr-name&quot;
  }, &quot;DesktopApplicationLinkPath&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token attr-value&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation attr-equals&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\&quot;&quot;), &quot;%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Accessories\\Internet Explorer.lnk&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\&quot;&quot;)), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;/&gt;&quot;)), &quot;\n                \t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;taskbar:&quot;), &quot;DesktopApp&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token attr-name&quot;
  }, &quot;DesktopApplicationLinkPath&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token attr-value&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation attr-equals&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\&quot;&quot;), &quot;%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\System Tools\\File Explorer.lnk&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\&quot;&quot;)), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;/&gt;&quot;)), &quot;\n                \t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;taskbar:&quot;), &quot;DesktopApp&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token attr-name&quot;
  }, &quot;DesktopApplicationLinkPath&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token attr-value&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation attr-equals&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\&quot;&quot;), &quot;%ALLUSERSPROFILE%\\Microsoft\\Windows\\Start Menu\\Programs\\Outlook.lnk&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\&quot;&quot;)), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;/&gt;&quot;)), &quot;\n                \t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;taskbar:&quot;), &quot;DesktopApp&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token attr-name&quot;
  }, &quot;DesktopApplicationLinkPath&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token attr-value&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation attr-equals&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\&quot;&quot;), &quot;%ALLUSERSPROFILE%\\Microsoft\\Windows\\Start Menu\\Programs\\Google Chrome.lnk&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\&quot;&quot;)), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;/&gt;&quot;)), &quot;\n            \t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;taskbar:&quot;), &quot;DesktopApp&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token attr-name&quot;
  }, &quot;DesktopApplicationLinkPath&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token attr-value&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation attr-equals&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\&quot;&quot;), &quot;%ALLUSERSPROFILE%\\Microsoft\\Windows\\Start Menu\\Programs\\Microsoft Edge.lnk&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\&quot;&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;/&gt;&quot;)), &quot;\n      \t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;taskbar:&quot;), &quot;TaskbarPinList&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), &quot;\n    \t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;defaultlayout:&quot;), &quot;TaskbarLayout&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), &quot;\n  \t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;/&quot;), &quot;CustomTaskbarLayoutCollection&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;/&quot;), &quot;LayoutModificationTemplate&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;))))), mdx(&quot;p&quot;, null, &quot;Example of a &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;LayoutModification.xml&quot;), &quot; modified so that no pinned items are not re-added once they&apos;ve been removed:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;xml&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-xml&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-xml&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), &quot;LayoutModificationTemplate&quot;), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token attr-name&quot;
  }, &quot;xmlns&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token attr-value&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation attr-equals&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\&quot;&quot;), &quot;http://schemas.microsoft.com/Start/2014/LayoutModification&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\&quot;&quot;)), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token attr-name&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;xmlns:&quot;), &quot;defaultlayout&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token attr-value&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation attr-equals&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\&quot;&quot;), &quot;http://schemas.microsoft.com/Start/2014/FullDefaultLayout&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\&quot;&quot;)), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token attr-name&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;xmlns:&quot;), &quot;start&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token attr-value&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation attr-equals&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\&quot;&quot;), &quot;http://schemas.microsoft.com/Start/2014/StartLayout&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\&quot;&quot;)), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token attr-name&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;xmlns:&quot;), &quot;taskbar&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token attr-value&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation attr-equals&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\&quot;&quot;), &quot;http://schemas.microsoft.com/Start/2014/TaskbarLayout&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\&quot;&quot;)), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token attr-name&quot;
  }, &quot;Version&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token attr-value&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation attr-equals&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\&quot;&quot;), &quot;1&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\&quot;&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), &quot;LayoutOptions&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token attr-name&quot;
  }, &quot;StartTileGroupCellWidth&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token attr-value&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation attr-equals&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\&quot;&quot;), &quot;6&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\&quot;&quot;)), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;/&gt;&quot;)), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), &quot;DefaultLayoutOverride&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), &quot;StartLayoutCollection&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), &quot;\n      &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;&lt;!-- ... Code omitted for brevity ... --&gt;&quot;), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;/&quot;), &quot;StartLayoutCollection&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;/&quot;), &quot;DefaultLayoutOverride&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), &quot;CustomTaskbarLayoutCollection&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token attr-name&quot;
  }, &quot;PinListPlacement&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token attr-value&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation attr-equals&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\&quot;&quot;), &quot;Replace&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\&quot;&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), &quot;\n    \t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;defaultlayout:&quot;), &quot;TaskbarLayout&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), &quot;\n     \t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;taskbar:&quot;), &quot;TaskbarPinList&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), &quot;\n      \t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;taskbar:&quot;), &quot;TaskbarPinList&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), &quot;\n    \t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;defaultlayout:&quot;), &quot;TaskbarLayout&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), &quot;\n  \t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;/&quot;), &quot;CustomTaskbarLayoutCollection&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;/&quot;), &quot;LayoutModificationTemplate&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;))))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[JavaScript Recipe: Get the unique elements from an array]]></title><description><![CDATA[Recipe to get the unique elements from a JavaScript Array]]></description><link>https://www.jamestharpe.com/js-get-unique-array-elements/</link><guid isPermaLink="false">https://www.jamestharpe.com/js-get-unique-array-elements/</guid><pubDate>Sun, 26 Sep 2021 18:32:47 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-09-26T18:32:47.000Z&quot;,
  &quot;description&quot;: &quot;Recipe to get the unique elements from a JavaScript Array&quot;,
  &quot;tags&quot;: [&quot;js-recipes&quot;],
  &quot;title&quot;: &quot;JavaScript Recipe: Get the unique elements from an array&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Get the unique elements from an array&quot;), mdx(&quot;p&quot;, null, &quot;Given an array with duplicate elements, return only the unique elements from an array:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;javascript&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-javascript&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-javascript&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;function&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;uniqueElements&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token parameter&quot;
  }, &quot;a&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;[&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;...&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;new&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Set&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;a&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;]&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;const&quot;), &quot; uniques &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;uniqueElements&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;[&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;3&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;3&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;3&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;]&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// [1, 2, 3]&quot;)))), mdx(&quot;h2&quot;, null, &quot;Related MDN Documentation&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set&quot;
  }, &quot;Global objects: Set&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[JavaScript (and TypeScript) recipes]]></title><description><![CDATA[Quick and easy to copy recipes for JavaScript and TypeScript]]></description><link>https://www.jamestharpe.com/js-recipes/</link><guid isPermaLink="false">https://www.jamestharpe.com/js-recipes/</guid><pubDate>Sun, 26 Sep 2021 18:32:47 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-09-26T18:32:47.000Z&quot;,
  &quot;description&quot;: &quot;Quick and easy to copy recipes for JavaScript and TypeScript&quot;,
  &quot;tags&quot;: [&quot;javascript&quot;, &quot;typescript&quot;],
  &quot;title&quot;: &quot;JavaScript (and TypeScript) recipes&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;JavaScript/TypeScript Recipes&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Unsplash: Royalty-free Photos]]></title><description><![CDATA[Royalty free, high-resolution photos]]></description><link>https://www.jamestharpe.com/unsplash/</link><guid isPermaLink="false">https://www.jamestharpe.com/unsplash/</guid><pubDate>Tue, 21 Sep 2021 14:52:10 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-09-21T14:52:10.000Z&quot;,
  &quot;description&quot;: &quot;Royalty free, high-resolution photos&quot;,
  &quot;tags&quot;: [&quot;web-dev&quot;, &quot;photography&quot;],
  &quot;title&quot;: &quot;Unsplash: Royalty-free Photos&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Unsplash&quot;), mdx(&quot;p&quot;, null, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://unsplash.com/&quot;
  }, &quot;Unsplash&quot;), &quot; provides free photos for commercial and non-commercial purposes, with no permission needed (attribution encouraged) to use, subject to the very nonrestrictive &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://unsplash.com/license&quot;
  }, &quot;Unsplash License&quot;), &quot;.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Acceptance Testing]]></title><description><![CDATA[Processes and techniques to test whether a set of requirements is met]]></description><link>https://www.jamestharpe.com/acceptance-testing/</link><guid isPermaLink="false">https://www.jamestharpe.com/acceptance-testing/</guid><pubDate>Tue, 07 Sep 2021 15:49:45 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-09-07T15:49:45.000Z&quot;,
  &quot;description&quot;: &quot;Processes and techniques to test whether a set of requirements is met&quot;,
  &quot;tags&quot;: [&quot;requirements&quot;, &quot;product-management&quot;],
  &quot;title&quot;: &quot;Acceptance Testing&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Acceptance Testing&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Acceptance testing&quot;), &quot; is the process of verifying that a product or service meets a set of &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../requirements/&quot;
  }, &quot;requirements&quot;), &quot; and, ultimately, satisfy &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../product-management/&quot;
  }, &quot;customer or market needs&quot;), &quot;.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Agile]]></title><description><![CDATA[Little-a agile, like in the manifesto]]></description><link>https://www.jamestharpe.com/agile/</link><guid isPermaLink="false">https://www.jamestharpe.com/agile/</guid><pubDate>Tue, 07 Sep 2021 15:49:45 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-09-07T15:49:45.000Z&quot;,
  &quot;description&quot;: &quot;Little-a agile, like in the manifesto&quot;,
  &quot;tags&quot;: [&quot;project-management&quot;, &quot;product-management&quot;, &quot;sdlc&quot;],
  &quot;title&quot;: &quot;Agile&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Agile&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Agile&quot;), &quot; is a set of four values based on 12 principles intended to create better software &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../product-management/&quot;
  }, &quot;products&quot;), &quot; through people-centric &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../project-management/&quot;
  }, &quot;project management&quot;), &quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;The Agile Manifesto&quot;), mdx(&quot;blockquote&quot;, null, mdx(&quot;h3&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;Manifesto for Agile Software Development&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;We are uncovering better ways of developing software by doing it and helping others do it. Through this work we have come to value:&quot;), mdx(&quot;ul&quot;, {
    parentName: &quot;blockquote&quot;
  }, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Individuals and interactions over processes and tools&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Working software over comprehensive documentation&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Customer collaboration over contract negotiation&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Responding to change over following a plan&quot;)), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;That is, while there is value in the items on the right, we value the items on the left more.&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://twitter.com/KentBeck&quot;
  }, &quot;Kent Beck&quot;), &quot;, &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://twitter.com/mikebeedle&quot;
  }, &quot;Mike Beedle&quot;), &quot;, &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://twitter.com/arievanbennekum&quot;
  }, &quot;Arie van Bennekum&quot;), &quot;, Alistair Cockburn, &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://twitter.com/WardCunningham&quot;
  }, &quot;Ward Cunningham&quot;), &quot;, &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://twitter.com/martinfowler&quot;
  }, &quot;Martin Fowler&quot;), &quot;, &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://twitter.com/jwgrenning&quot;
  }, &quot;James Grenning&quot;), &quot;, &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://twitter.com/jimhighsmith&quot;
  }, &quot;Jim Highsmith&quot;), &quot;, &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://twitter.com/PragmaticAndy&quot;
  }, &quot;Andrew Hunt&quot;), &quot;, &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://twitter.com/RonJeffries&quot;
  }, &quot;Ron Jeffries&quot;), &quot;, Jon Kern, &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://twitter.com/marick&quot;
  }, &quot;Brian Marick&quot;), &quot;, &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://twitter.com/unclebobmartin&quot;
  }, &quot;Robert C. Martin&quot;), &quot;, Steve Mellor, &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://twitter.com/kschwaber&quot;
  }, &quot;Ken Schwaber&quot;), &quot;, &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://twitter.com/jeffsutherland&quot;
  }, &quot;Jeff Sutherland&quot;), &quot;, &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://twitter.com/pragdave&quot;
  }, &quot;Dave Thomas&quot;)), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;\xA9 2001, the above authors this declaration may be freely copied in any form, but only in its entirety through this notice.&quot;)), mdx(&quot;h2&quot;, null, &quot;Agile principles&quot;), mdx(&quot;blockquote&quot;, null, mdx(&quot;h3&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;Principles behind the Agile Manifesto&quot;)), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;We follow these principles:&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;Our highest priority is to satisfy the customer through early and continuous delivery of valuable software.&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;Welcome changing requirements, even late in development. Agile processes harness change for the customer&apos;s competitive advantage.&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale.&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;Business people and developers must work together daily throughout the project.&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done.&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;The most efficient and effective method of conveying information to and within a development team is face-to-face conversation.&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;Working software is the primary measure of progress.&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely.&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;Continuous attention to technical excellence and good design enhances agility.&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;Simplicity--the art of maximizing the amount of work not done--is essential.&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;The best architectures, requirements, and designs emerge from self-organizing teams.&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly.&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;\xA9 2001, the above authors this declaration may be freely copied in any form, but only in its entirety through this notice.&quot;)), mdx(&quot;h2&quot;, null, &quot;Agile Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://agilemanifesto.org/&quot;
  }, &quot;Manifesto for Agile Software Development&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;http://www.agile-process.org/&quot;
  }, &quot;Agile Process&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://martinfowler.com/articles/agileStory.html&quot;
  }, &quot;Writing the Agile Manifesto by Martin Fowler&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[User Stories]]></title><description><![CDATA[The philosophy behind gathering, writing, and using user stories]]></description><link>https://www.jamestharpe.com/user-stories/</link><guid isPermaLink="false">https://www.jamestharpe.com/user-stories/</guid><pubDate>Tue, 07 Sep 2021 15:49:45 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-09-07T15:49:45.000Z&quot;,
  &quot;description&quot;: &quot;The philosophy behind gathering, writing, and using user stories&quot;,
  &quot;tags&quot;: [&quot;requirements&quot;, &quot;agile&quot;],
  &quot;title&quot;: &quot;User Stories&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;User Stories&quot;), mdx(&quot;p&quot;, null, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;user story&quot;), &quot; is a (often &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;partial&quot;), &quot;) &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../requirements/&quot;
  }, &quot;requirement&quot;), &quot; written from the perspective of the customer (or preferably &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;written by the customer&quot;), &quot;) to directly relate user needs (marketing requirements) to implementation details (engineering requirements). Most &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../agile/&quot;
  }, &quot;agile&quot;), &quot; methods use user stories to guide the development of the product.&quot;), mdx(&quot;p&quot;, null, &quot;Though a key objective of requirements is to be complete enough to be understood independently by anyone working on the solution, most agile methodologies suggest that only enough detail be provided that an estimate of the work to implement it is reasonably low risk. This intentional lack of detail is primarily a means of fostering direct discussions between customers and solution teams but should also help reduce excessive time spent on planning, eliminate requirements that aren&apos;t &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;really&quot;), &quot; required, and deepen the solution team&apos;s understanding of the customer&apos;s needs through direct interactions.&quot;), mdx(&quot;p&quot;, null, &quot;Most methodologies that utilize user stories suggest that the full details behind a story be collected immediately prior to implementation, rather than as part of an up-front requirements gathering \&quot;step\&quot; in which all (or even most) requirements are gathered before &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../project-management/&quot;
  }, &quot;project&quot;), &quot; work begins. Once details are collected they formalized into &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../acceptance-testing/&quot;
  }, &quot;acceptance tests&quot;), &quot;, which provide an objective - often automated - assessment of whether the customer&apos;s described needs were met. With the story and acceptance tests in place, the project team can start the solution implementation.&quot;), mdx(&quot;h2&quot;, null, &quot;Common Elements of User Stories&quot;), mdx(&quot;p&quot;, null, &quot;User stories can be expressed in a wide variety of ways, but most well written user stories will include:&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;The role of persona of the user(s) that will most benefit from the request&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;An abstract description of the desired solution&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;A justification for the usefulness of having a solution&quot;)), mdx(&quot;p&quot;, null, &quot;Though user stories are typically best expressed as a narrative, a common device to remember everything that needs to be captured is the following template:&quot;), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;As a &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;em&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;user role or persona&quot;)), &quot; I want &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;em&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;engineering requirement&quot;)), &quot; so that &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;em&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;marketing requirement&quot;)), &quot;.&quot;)), mdx(&quot;h2&quot;, null, &quot;Resources for using user stories&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;http://www.extremeprogramming.org/rules/userstories.html&quot;
  }, &quot;Extreme Programming: User Stories&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Requirements]]></title><description><![CDATA[Elements of well-formed requirements: The fundamental building blocks of product engineering]]></description><link>https://www.jamestharpe.com/requirements/</link><guid isPermaLink="false">https://www.jamestharpe.com/requirements/</guid><pubDate>Tue, 07 Sep 2021 13:42:45 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-09-07T13:42:45.000Z&quot;,
  &quot;description&quot;: &quot;Elements of well-formed requirements: The fundamental building blocks of product engineering&quot;,
  &quot;tags&quot;: [&quot;engineering&quot;, &quot;project-management&quot;],
  &quot;title&quot;: &quot;Requirements&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Requirements&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Requirements&quot;), &quot; abstractly describe what a solution must and must not do and are the fundamental building blocks of &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../product-management/&quot;
  }, &quot;product&quot;), &quot; &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../engineering/&quot;
  }, &quot;engineering&quot;), &quot;. In addition to these abstract descriptions, an effective requirements document will contain enough context to explain the rationale behind the individual requirements.&quot;), mdx(&quot;h2&quot;, null, mdx(&quot;a&quot;, {
    parentName: &quot;h2&quot;,
    &quot;href&quot;: &quot;../marketing/&quot;
  }, &quot;Marketing&quot;), &quot; vs. &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;h2&quot;,
    &quot;href&quot;: &quot;../engineering/&quot;
  }, &quot;engineering&quot;), &quot; Requirements&quot;), mdx(&quot;p&quot;, null, &quot;Requirements come in two broad forms: marketing requirements and engineering requirements. &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Marketing requirements&quot;), &quot; describe the needs and desires of the market served by the product. &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Engineering requirements&quot;), &quot; are derived from marketing requirements and abstractly describe in unambiguous (typically numerical) terms how the product must function to meet the marketing requirements.&quot;), mdx(&quot;p&quot;, null, &quot;For example, the marketing requirement for a camera might be: \&quot;The photo quality must be industry leading\&quot;. A corresponding engineering requirement might then be: \&quot;Photos produced must be greater than 8.5 megapixels\&quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;Elements of well-formed requirements&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Abstract&quot;), &quot;: Well-formed requirements abstractly describe what the solution must and must not do, without describing how the solution is achieved.&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Verifiable&quot;), &quot;: Well-formed requirements can be independently and precisely verified and are therefore typically described in numerical terms.&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Traceable&quot;), &quot;: Well-formed requirements can be traced back to the specific need being solved. Marketing requirements should be traceable to research, whereas engineering requirements should be traceable to the marketing requirements.&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Realistic&quot;), &quot;: Well-formed requirements can realistically be implemented by the team that will create the solution.&quot;), mdx(&quot;h2&quot;, null, &quot;Constraints&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Constraints&quot;), &quot; are design decisions that are imposed by the environment in which the solution is being developed or delivered to and typically violate.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[IETF Standards]]></title><description><![CDATA[Standards set by the IETF]]></description><link>https://www.jamestharpe.com/ietf-standards/</link><guid isPermaLink="false">https://www.jamestharpe.com/ietf-standards/</guid><pubDate>Sun, 05 Sep 2021 23:16:45 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-09-05T23:16:45.000Z&quot;,
  &quot;description&quot;: &quot;Standards set by the IETF&quot;,
  &quot;tags&quot;: [&quot;ietf&quot;],
  &quot;title&quot;: &quot;IETF Standards&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;IETF Standards&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[American Standard Code for Information Interchange (ASCII)]]></title><description><![CDATA[A character encoding standard for electronic communications]]></description><link>https://www.jamestharpe.com/ascii/</link><guid isPermaLink="false">https://www.jamestharpe.com/ascii/</guid><pubDate>Sun, 05 Sep 2021 22:08:27 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-09-05T22:08:27.000Z&quot;,
  &quot;description&quot;: &quot;A character encoding standard for electronic communications&quot;,
  &quot;tags&quot;: [&quot;computer-science&quot;, &quot;binary&quot;],
  &quot;title&quot;: &quot;American Standard Code for Information Interchange (ASCII)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;American Standard Code for Information Interchange (ASCII)&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;ASCII&quot;), &quot; is standard to encoding text character symbols as &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../binary/&quot;
  }, &quot;binary&quot;), &quot; data for electronic communication. Each character is mapped to a 7-bit code, allowing for 127 characters total (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;111111&quot;), mdx(&quot;msub&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;msub&quot;
  }, &quot;1&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;msub&quot;
  }, &quot;2&quot;)), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;12&quot;), mdx(&quot;msub&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;msub&quot;
  }, &quot;4&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;msub&quot;
  }, &quot;10&quot;))), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;1111111_{2} = 124_{10}&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.79444em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.15em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t vlist-t2&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.30110799999999993em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-2.5500000000000003em&quot;,
      &quot;marginLeft&quot;: &quot;0em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;2&quot;))))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-s&quot;
  }, &quot;\u200B&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.15em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;
  })))))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.79444em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.15em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;4&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t vlist-t2&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.30110799999999993em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-2.5500000000000003em&quot;,
      &quot;marginLeft&quot;: &quot;0em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;0&quot;))))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-s&quot;
  }, &quot;\u200B&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.15em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;
  })))))))))), &quot;). The numerical order of these codes is known as &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;ASCIIbetical order&quot;), &quot;.&quot;), mdx(&quot;p&quot;, null, &quot;The first 32 codes are reserved as control characters, such as backspace and linefeed. However, the character for &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;Delete&quot;), &quot; is the 127th code for historic reasons. The remaining codes are reserved for printable characters including punctuation, symbols, numbers, and letters.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Binary Numbers]]></title><description><![CDATA[Numbers in base-2]]></description><link>https://www.jamestharpe.com/binary/</link><guid isPermaLink="false">https://www.jamestharpe.com/binary/</guid><pubDate>Sun, 05 Sep 2021 22:06:27 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-09-05T22:06:27.000Z&quot;,
  &quot;description&quot;: &quot;Numbers in base-2&quot;,
  &quot;tags&quot;: [&quot;math&quot;],
  &quot;title&quot;: &quot;Binary Numbers&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Binary Numbers&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Binary numbers&quot;), &quot; are numbers expressed in base-2, where the available digits are only &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;0&quot;), &quot; and &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;1&quot;), &quot;.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Transitive Closure]]></title><description><![CDATA[Numbers in base-2]]></description><link>https://www.jamestharpe.com/transitive-closure/</link><guid isPermaLink="false">https://www.jamestharpe.com/transitive-closure/</guid><pubDate>Sun, 05 Sep 2021 22:06:27 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-09-05T22:06:27.000Z&quot;,
  &quot;description&quot;: &quot;Numbers in base-2&quot;,
  &quot;tags&quot;: [&quot;math&quot;],
  &quot;title&quot;: &quot;Transitive Closure&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Transitive closure&quot;), mdx(&quot;iframe&quot;, {
    width: &quot;560&quot;,
    height: &quot;315&quot;,
    src: &quot;https://www.youtube.com/embed/OO8Jfs9uZnc&quot;,
    title: &quot;Transitive closure overview&quot;,
    frameBorder: &quot;0&quot;,
    allow: &quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot;,
    allowFullScreen: true
  }));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[JSON Object Signing and Encryption (JOSE)]]></title><description><![CDATA[A set of technologies used to encrypt and sign content]]></description><link>https://www.jamestharpe.com/jose/</link><guid isPermaLink="false">https://www.jamestharpe.com/jose/</guid><pubDate>Sun, 05 Sep 2021 21:52:27 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-09-05T21:52:27.000Z&quot;,
  &quot;description&quot;: &quot;A set of technologies used to encrypt and sign content&quot;,
  &quot;tags&quot;: [&quot;json&quot;, &quot;cybersecurity&quot;, &quot;ietf&quot;],
  &quot;title&quot;: &quot;JSON Object Signing and Encryption (JOSE)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;JSON Object Signing and Encryption (JOSE)&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;JSON Object Signing and Encryption (JOSE)&quot;), &quot; is the set of &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../software-engineering/&quot;
  }, &quot;software technologies&quot;), &quot; &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../ietf-standards/&quot;
  }, &quot;standardized by the IETF&quot;), &quot; to represent encrypted and/or sign content as &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../json/&quot;
  }, &quot;JSON&quot;), &quot; data. The technologies include &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../jws/&quot;
  }, &quot;JSON Web Signatures (JWS)&quot;), &quot;, &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../jwe/&quot;
  }, &quot;JSON Web Encryption (JWE)&quot;), &quot;, JSON Web Key (JWK), and JSON Web Algorithms (JWA).&quot;), mdx(&quot;h2&quot;, null, &quot;JOSE Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://datatracker.ietf.org/doc/html/rfc7520&quot;
  }, &quot;IETF JOSE Cookbook&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[JSON Web Encryption (JWE)]]></title><description><![CDATA[A format to represent encrypted data as base64url encoded JSON, defined by RFC 7516]]></description><link>https://www.jamestharpe.com/jwe/</link><guid isPermaLink="false">https://www.jamestharpe.com/jwe/</guid><pubDate>Sun, 05 Sep 2021 21:52:27 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-09-05T21:52:27.000Z&quot;,
  &quot;description&quot;: &quot;A format to represent encrypted data as base64url encoded JSON, defined by RFC 7516&quot;,
  &quot;tags&quot;: [&quot;jose&quot;, &quot;base64url&quot;, &quot;ietf-standards&quot;],
  &quot;title&quot;: &quot;JSON Web Encryption (JWE)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;JSON Web Encryption (JWE)&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;JSON Web Encryption (JWE)&quot;), &quot; is an open standard for representing encrypted content as &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../base64url/&quot;
  }, &quot;base64url&quot;), &quot; encoded &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../json/&quot;
  }, &quot;JSON&quot;), &quot; data.&quot;), mdx(&quot;h2&quot;, null, &quot;JWE Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://datatracker.ietf.org/doc/html/rfc7516&quot;
  }, &quot;JSON Web Encryption (JWE), RFC 7516&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Asymmetric (public-key) Cryptography]]></title><description><![CDATA[A cryptographic system]]></description><link>https://www.jamestharpe.com/asymmetric-cryptography/</link><guid isPermaLink="false">https://www.jamestharpe.com/asymmetric-cryptography/</guid><pubDate>Sun, 05 Sep 2021 21:28:27 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-09-05T21:28:27.000Z&quot;,
  &quot;description&quot;: &quot;A cryptographic system&quot;,
  &quot;tags&quot;: [&quot;cryptography&quot;],
  &quot;title&quot;: &quot;Asymmetric (public-key) Cryptography&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Asymmetric Cryptography (Public Key Cryptography)&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Asymmetric cryptography&quot;), &quot;, or &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;public-key cryptography&quot;), &quot; is &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../cryptography/&quot;
  }, &quot;cryptography&quot;), &quot; system that uses key pairs to encrypt and decrypt messages. A key pair includes a public key and a private key. The public key can be distributed without compromising the security of messages, however the private key must be kept secret for the scheme to work.&quot;), mdx(&quot;p&quot;, null, &quot;Any message encrypted with the public key may only be read by decrypting it using the private key. This means that the sender and receiver do not require a shared secret in order to &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../cybersecurity/&quot;
  }, &quot;securely&quot;), &quot; exchange messages.&quot;), mdx(&quot;p&quot;, null, &quot;Conversely, a message may be signed with the private key and validated with the public key, thus authenticating the message source.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Hash Functions]]></title><description><![CDATA[Hash functions]]></description><link>https://www.jamestharpe.com/hash-functions/</link><guid isPermaLink="false">https://www.jamestharpe.com/hash-functions/</guid><pubDate>Sun, 05 Sep 2021 21:02:27 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-09-05T21:02:27.000Z&quot;,
  &quot;description&quot;: &quot;Hash functions&quot;,
  &quot;tags&quot;: [&quot;math&quot;],
  &quot;title&quot;: &quot;Hash Functions&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Hash Functions&quot;), mdx(&quot;p&quot;, null, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;hash function&quot;), &quot; is any &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../math/&quot;
  }, &quot;mathematical&quot;), &quot; function that maps data to a fixed-length value. The result of a hash function is called a &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;hash&quot;), &quot;, &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;hash value&quot;), &quot;, &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;hash code&quot;), &quot;, or &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;digest&quot;), &quot;.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Cryptography]]></title><description><![CDATA[Techniques to secure communication]]></description><link>https://www.jamestharpe.com/cryptography/</link><guid isPermaLink="false">https://www.jamestharpe.com/cryptography/</guid><pubDate>Sun, 05 Sep 2021 20:54:27 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-09-05T20:54:27.000Z&quot;,
  &quot;description&quot;: &quot;Techniques to secure communication&quot;,
  &quot;tags&quot;: [&quot;math&quot;, &quot;computer-science&quot;],
  &quot;title&quot;: &quot;Cryptography&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Cryptography&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Cryptography&quot;), &quot; is the set of techniques to secure communication so that it cannot be understood or tampered with by an adversary. Modern cryptography generally combines &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../math/&quot;
  }, &quot;math&quot;), &quot;, &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../computer-science/&quot;
  }, &quot;computer science&quot;), &quot;, and other &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../science/&quot;
  }, &quot;science&quot;), &quot; and &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../engineering/&quot;
  }, &quot;engineering&quot;), &quot; disciplines to make secure communication practical and ubiquitous.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[HyperText Markup Language (HTML)]]></title><description><![CDATA[The standard markup language for content on the web]]></description><link>https://www.jamestharpe.com/html/</link><guid isPermaLink="false">https://www.jamestharpe.com/html/</guid><pubDate>Sun, 05 Sep 2021 20:38:41 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-09-05T20:38:41.000Z&quot;,
  &quot;description&quot;: &quot;The standard markup language for content on the web&quot;,
  &quot;tags&quot;: [&quot;computer-languages&quot;],
  &quot;title&quot;: &quot;HyperText Markup Language (HTML)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;HyperText Markup Language (HTML)&quot;), mdx(&quot;p&quot;, null, &quot;HyperText Markup Language (HTML) is a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../computer-languages/&quot;
  }, &quot;computer-language&quot;), &quot; that describes text-based content.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[JSON Web Tokens (JWT)]]></title><description><![CDATA[A method to represent claims based security values, defined by RFC 7519]]></description><link>https://www.jamestharpe.com/jwt/</link><guid isPermaLink="false">https://www.jamestharpe.com/jwt/</guid><pubDate>Sun, 05 Sep 2021 12:09:27 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-09-05T12:09:27.000Z&quot;,
  &quot;description&quot;: &quot;A method to represent claims based security values, defined by RFC 7519&quot;,
  &quot;tags&quot;: [&quot;json&quot;, &quot;jws&quot;, &quot;base64url&quot;, &quot;jose&quot;, &quot;ietf-standards&quot;],
  &quot;title&quot;: &quot;JSON Web Tokens (JWT)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;JSON Web Tokens (JWT)&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;JSON Web Token (JWT)&quot;), &quot; is an open standard for representing passing claims securely between two parties as three concatenated base64url-encoded strings of &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../json/&quot;
  }, &quot;JSON&quot;), &quot; data, joined by dots (&quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;.&quot;), &quot;). JWTs are used for authentication, authorization, and information exchange.&quot;), mdx(&quot;p&quot;, null, &quot;The first string is the &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;strong&quot;,
    &quot;href&quot;: &quot;../jose/&quot;
  }, &quot;JOSE&quot;), &quot; Header&quot;), &quot;, which describes the digital signature or &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../hmacs/&quot;
  }, &quot;HMAC&quot;), &quot; applied to the second string. The second string is a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../jws/&quot;
  }, &quot;JWS&quot;), &quot; payload, which contains JSON-encoded &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;claims&quot;), &quot; which are the information to be exchanged. Finally, the third string is a JWS signature that can be used to validate that the header and payload segments were not altered.&quot;), mdx(&quot;h2&quot;, null, &quot;JWT Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://datatracker.ietf.org/doc/html/rfc7519&quot;
  }, &quot;JSON Web Token (JWT), RFC 7519&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://jwt.io/&quot;
  }, &quot;JWT Decoder and Debugger&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Information Technology (IT)]]></title><description><![CDATA[The principles, practices, and technologies used to build information systems]]></description><link>https://www.jamestharpe.com/information-technology/</link><guid isPermaLink="false">https://www.jamestharpe.com/information-technology/</guid><pubDate>Wed, 01 Sep 2021 12:23:27 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-09-01T12:23:27.000Z&quot;,
  &quot;description&quot;: &quot;The principles, practices, and technologies used to build information systems&quot;,
  &quot;redirect_from&quot;: [&quot;/it/&quot;],
  &quot;tags&quot;: [&quot;information&quot;, &quot;engineering&quot;],
  &quot;title&quot;: &quot;Information Technology (IT)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Information Technology (IT)&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Information Technology (IT)&quot;), &quot; consists of the principles, practices, and technologies used to build, maintain, and use information systems.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Cybersecurity]]></title><description><![CDATA[Methods for protecting information systems from unauthorized and malicious use]]></description><link>https://www.jamestharpe.com/cybersecurity/</link><guid isPermaLink="false">https://www.jamestharpe.com/cybersecurity/</guid><pubDate>Wed, 01 Sep 2021 12:20:27 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-09-01T12:20:27.000Z&quot;,
  &quot;description&quot;: &quot;Methods for protecting information systems from unauthorized and malicious use&quot;,
  &quot;tags&quot;: [&quot;information-technology&quot;],
  &quot;title&quot;: &quot;Cybersecurity&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Cybersecurity&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Cybersecurity&quot;), &quot; is the practice of protecting &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../information-technology/&quot;
  }, &quot;IT&quot;), &quot; systems from unauthorized and malicious use through prevention, detection, and counter-measures.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[JavaScript Object Notation (JSON)]]></title><description><![CDATA[A simple text-based format for data exchange based on a subset of JavaScript, defined by RFC 7159]]></description><link>https://www.jamestharpe.com/json/</link><guid isPermaLink="false">https://www.jamestharpe.com/json/</guid><pubDate>Wed, 01 Sep 2021 12:11:27 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-09-01T12:11:27.000Z&quot;,
  &quot;description&quot;: &quot;A simple text-based format for data exchange based on a subset of JavaScript, defined by RFC 7159&quot;,
  &quot;tags&quot;: [&quot;javascript&quot;, &quot;ietf-standards&quot;],
  &quot;title&quot;: &quot;JavaScript Object Notation (JSON)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;JavaScript Object Notation (JSON)&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;JavaScript Object Notation (JSON)&quot;), &quot; is a simple text-based, structured data format that&apos;s easy for humans and computers to read and write. Though JSON is based on a subset of JavaScript, virtually every modern &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../computer-languages/&quot;
  }, &quot;programming language&quot;), &quot; can read and write it.&quot;), mdx(&quot;h2&quot;, null, &quot;JSON Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://datatracker.ietf.org/doc/html/rfc7159&quot;
  }, &quot;JavaScript Object Notation (JSON) Data Interchange Format, RFC 7159&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Hash-based Message Authentication Codes (HMAC)]]></title><description><![CDATA[Hash-based Message Authentication Codes]]></description><link>https://www.jamestharpe.com/hmacs/</link><guid isPermaLink="false">https://www.jamestharpe.com/hmacs/</guid><pubDate>Wed, 01 Sep 2021 12:09:27 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-09-01T12:09:27.000Z&quot;,
  &quot;description&quot;: &quot;Hash-based Message Authentication Codes&quot;,
  &quot;tags&quot;: [&quot;cybersecurity&quot;, &quot;cryptography&quot;, &quot;hash-functions&quot;],
  &quot;title&quot;: &quot;Hash-based Message Authentication Codes (HMAC)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Hash-based Message Authentication Codes (HMACs)&quot;), mdx(&quot;p&quot;, null, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Hash-based Message Authentication Code (HMAC)&quot;), &quot; is a method to verify the sender of a message and that the message has not been tampered with, often used in combination with &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../asymmetric-cryptography/&quot;
  }, &quot;public-key cryptography&quot;), &quot;.&quot;), mdx(&quot;p&quot;, null, &quot;HMAC works by using a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../cryptography/&quot;
  }, &quot;cryptographic&quot;), &quot; &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../hash-functions/&quot;
  }, &quot;hash function&quot;), &quot; and a shared secret, or &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;salt&quot;), &quot;. The sender computes the the hash value for the original message using the salt, then sends the original message and hash value to the receiver as a single message. The receiver then recomputes the hash value of the original message using the same hash function and salt. If the message was tampered with or if a different salt was used, a different hash value will result thus invalidating the message.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[JSON Web Signatures (JWS)]]></title><description><![CDATA[A method to represent content secured with digital signatures or MACs using JSON, defined by RFC 7515]]></description><link>https://www.jamestharpe.com/jws/</link><guid isPermaLink="false">https://www.jamestharpe.com/jws/</guid><pubDate>Wed, 01 Sep 2021 12:09:27 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-09-01T12:09:27.000Z&quot;,
  &quot;description&quot;: &quot;A method to represent content secured with digital signatures or MACs using JSON, defined by RFC 7515&quot;,
  &quot;tags&quot;: [&quot;jose&quot;, &quot;ietf-standards&quot;],
  &quot;title&quot;: &quot;JSON Web Signatures (JWS)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;JSON Web Signatures (JWS)&quot;), mdx(&quot;p&quot;, null, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;JSON Web Signature (JWS)&quot;), &quot; is a standard way to represent digitally signed and/or &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../hmacs/&quot;
  }, &quot;HMACed&quot;), &quot; content using &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../json/&quot;
  }, &quot;JSON&quot;), &quot; data structures.&quot;), mdx(&quot;h2&quot;, null, &quot;JWS Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://datatracker.ietf.org/doc/html/rfc7515&quot;
  }, &quot;JSON Web Signatures (JWS), RFC 7515&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[chmod Linux Command]]></title><description><![CDATA[A Linux command used to change the mode of a file or directory]]></description><link>https://www.jamestharpe.com/chmod/</link><guid isPermaLink="false">https://www.jamestharpe.com/chmod/</guid><pubDate>Tue, 31 Aug 2021 13:07:52 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-08-31T13:07:52.000Z&quot;,
  &quot;description&quot;: &quot;A Linux command used to change the mode of a file or directory&quot;,
  &quot;tags&quot;: [&quot;linux-file-system&quot;],
  &quot;title&quot;: &quot;chmod Linux Command&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, mdx(&quot;code&quot;, {
    parentName: &quot;h1&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;chmod&quot;), &quot;: The \&quot;Change Mode\&quot; Command&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, &quot;[&quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;chmod&quot;), &quot;]&quot;, &quot; command is used to change the mode of a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../linux/&quot;
  }, &quot;linux&quot;), &quot; or Unix file or directory.&quot;), mdx(&quot;h2&quot;, null, mdx(&quot;code&quot;, {
    parentName: &quot;h2&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;chmod&quot;), &quot; recipes&quot;), mdx(&quot;table&quot;, null, mdx(&quot;thead&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;thead&quot;
  }, mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Command&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Effect&quot;))), mdx(&quot;tbody&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;chmod +rwx file-name&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Adds read, write, and execute permissions for the owner of the file&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;chmod g+rwx file-name&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Adds read and write permissions for the group owners of the file&quot;)))), mdx(&quot;h2&quot;, null, mdx(&quot;code&quot;, {
    parentName: &quot;h2&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;chmod&quot;), &quot; Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.man7.org/linux/man-pages/man1/chmod.1.html&quot;
  }, &quot;chmod man page&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[ROAM: Resolved, Owned, Accepted, Mitigated]]></title><description><![CDATA[A risk evaluation and acceptance model]]></description><link>https://www.jamestharpe.com/roam/</link><guid isPermaLink="false">https://www.jamestharpe.com/roam/</guid><pubDate>Mon, 30 Aug 2021 18:32:25 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-08-30T18:32:25.000Z&quot;,
  &quot;description&quot;: &quot;A risk evaluation and acceptance model&quot;,
  &quot;tags&quot;: [&quot;project-management&quot;],
  &quot;title&quot;: &quot;ROAM: Resolved, Owned, Accepted, Mitigated&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;ROAM: Resolved, Owned, Accepted, Mitigated&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;ROAM&quot;), &quot; is a model to clearly articulate the risks associated with a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../project-management/&quot;
  }, &quot;project&quot;), &quot;. The term \&quot;ROAM\&quot; is derived from the model, which specifies a status of resolved, owned, accepted, or mitigated for a given risk.&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Resolved&quot;), &quot; means that the risk no longer poses a threat to the project and therefore no further action is required.&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Owned&quot;), &quot; indicates that the risk presents a threat to the project scope, timeline, or budget and an owner has been assigned to mitigate or otherwise address the risk.&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Accepted&quot;), &quot; risks are risks which cannot or should not be resolved.&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Mitigated&quot;), &quot; risks still threaten a project but have an acceptable plan in place for mitigation, should the risk arise.&quot;), mdx(&quot;h2&quot;, null, &quot;Flow of a Risk through ROAM&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;mermaid&quot;
  }));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Containers]]></title><description><![CDATA[Packaging applications with all of their dependencies]]></description><link>https://www.jamestharpe.com/containers/</link><guid isPermaLink="false">https://www.jamestharpe.com/containers/</guid><pubDate>Fri, 20 Aug 2021 16:36:36 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-08-20T16:36:36.000Z&quot;,
  &quot;description&quot;: &quot;Packaging applications with all of their dependencies&quot;,
  &quot;tags&quot;: [&quot;software-engineering&quot;],
  &quot;title&quot;: &quot;Containers&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Containers&quot;), mdx(&quot;p&quot;, null, &quot;Containers are a way of packaging applications with their dependencies and configuration in a single, runnable package. Containers are similar to virtual machines in that they isolate applications from each other on a shared &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../operating-systems/&quot;
  }, &quot;operating system&quot;), &quot; but different in that containers do not provide hardware-level virtualization as virtual machines do.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Kubernetes CLI: kubectl]]></title><description><![CDATA[The CLI interface for Kubernetes]]></description><link>https://www.jamestharpe.com/kubectl/</link><guid isPermaLink="false">https://www.jamestharpe.com/kubectl/</guid><pubDate>Wed, 18 Aug 2021 11:13:14 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-08-18T11:13:14.000Z&quot;,
  &quot;description&quot;: &quot;The CLI interface for Kubernetes&quot;,
  &quot;tags&quot;: [&quot;kubernetes&quot;, &quot;cli&quot;],
  &quot;title&quot;: &quot;Kubernetes CLI: kubectl&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Kubernetes CLI: kubectl&quot;), mdx(&quot;p&quot;, null, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;kubectl&quot;), &quot; is the command line interface for &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../kubernetes/&quot;
  }, &quot;Kubernetes&quot;), &quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;Basic &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;h2&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;kubectl&quot;), &quot; commands&quot;), mdx(&quot;table&quot;, null, mdx(&quot;thead&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;thead&quot;
  }, mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Command&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Description&quot;))), mdx(&quot;tbody&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;kubectl get pods&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;List all pods&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;kubectl cluster-info&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Display cluster information&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;kubectl get all&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;List all resources: Pods, deployments, services, etc.&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;kubectl run [container-name] --image=[image-name]&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Create a deployment for a pod&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;kubectl port-forward [pod-name] [port-number]&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Forward a port to a pod to allow external access&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;kubectl create [resource]&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Create a resource&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;kubectl apply [resource]&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Create or update resource&quot;)))), mdx(&quot;h2&quot;, null, &quot;Useful Aliases for &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;h2&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;kubectl&quot;)), mdx(&quot;p&quot;, null, &quot;A common practice for &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;kubectl&quot;), &quot; is to alias it to &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;k&quot;), &quot; for convenience.&quot;), mdx(&quot;p&quot;, null, &quot;To alias &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;kubectl&quot;), &quot; to &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;k&quot;), &quot; in &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../powershell/&quot;
  }, &quot;PowerShell&quot;), &quot;:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;powershell&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-powershell&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-powershell&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;Set-Alias&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;-&quot;), &quot;Name k &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;-&quot;), &quot;Value kubectl&quot;))), mdx(&quot;p&quot;, null, &quot;To alias &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;kubectl&quot;), &quot; to &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;k&quot;), &quot; in &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../bash/&quot;
  }, &quot;bash&quot;), &quot;:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;alias&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token assign-left variable&quot;
  }, &quot;k&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;kubectl\&quot;&quot;)))), mdx(&quot;p&quot;, null, &quot;You can test the alias by running &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;k version&quot;), &quot;.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Kubernetes (k8s)]]></title><description><![CDATA[A system to conduct an orchestra of containers]]></description><link>https://www.jamestharpe.com/kubernetes/</link><guid isPermaLink="false">https://www.jamestharpe.com/kubernetes/</guid><pubDate>Wed, 18 Aug 2021 11:13:14 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-08-18T11:13:14.000Z&quot;,
  &quot;description&quot;: &quot;A system to conduct an orchestra of containers&quot;,
  &quot;tags&quot;: [&quot;containers&quot;, &quot;open-source-software&quot;],
  &quot;title&quot;: &quot;Kubernetes (k8s)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Kubernetes (k8s)&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Kubernetes&quot;), &quot;, sometimes stylistically written as &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;k8s&quot;), &quot;, is an &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../open-source-software/&quot;
  }, &quot;open-source software&quot;), &quot; system to automate the deployment, scaling, and management of &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../containers/&quot;
  }, &quot;containerized&quot;), &quot; applications. Kubernetes includes networking and storage abstractions to make it easy for deployments to be distributed across physical machine boundaries while maintaining the ability to communicate. Kubernetes provides the means to eliminate single points of failure, automatically scale, and to update containers without downtime through built-in services for service discovery, load balancing, automated roll-outs/roll-backs, self healing, and configuration management.&quot;), mdx(&quot;h2&quot;, null, &quot;How Kubernetes Works&quot;), mdx(&quot;p&quot;, null, &quot;Kubernetes works by maintaining a cluster of nodes, where each &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;node&quot;), &quot; is a physical or virtual machine capable of running one or more pods and managed by an agent called &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet/&quot;
  }, &quot;kublet&quot;), &quot;. A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;pod&quot;), &quot; is a group of containers that share a common configuration and are scheduled onto the same node. Kubernetes is declaratively configured by a manifest file, which describes the desired state of the cluster. Differences between the desired state are reconciled through the &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;control plane&quot;), &quot;, which is an extensible set of components that are responsible for maintaining the desired state of the cluster.&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;mermaid&quot;
  }, &quot;graph TD\n    subgraph Cluster\n\t\tMaster(\&quot;fa:fa-asterisk Master Node\&quot;)\n        subgraph Node1[Node]\n            Kublet1(\&quot;fa:fa-cog Kublet\&quot;) --&gt; Pod1[Pod]\n            Kublet1 --&gt; Pod2[Pod]\n            Pod1[Pod]\n            Pod2[Pod]\n        end\n\t\tsubgraph Node2[Node]\n            Kublet2(\&quot;fa:fa-cog Kublet\&quot;) --&gt; Pod3[Pod]\n            Kublet2 --&gt; Pod4\n            Pod3[Pod]\n            Pod4[Pod]\n        end\n        subgraph Node3[Node]\n            Kublet3(\&quot;fa:fa-cog Kublet\&quot;) --&gt; Pod5[Pod]\n            Kublet3 --&gt; Pod6\n            Pod5[Pod]\n            Pod6[Pod]\n        end\n    end\n    subgraph CP[Control Plane]\n\t\tStore[(\&quot;Store (etcd)\&quot;)] --&gt;|Configuration| Master\n        API --&gt; Master\n        Scheduler --&gt; Master\n        Controller[\&quot;Controller Manager\&quot;] --&gt; Master\n    end\n    kubectl[\&quot;$ kubectl\&quot;] --&gt; API\n    Master --&gt; Kublet1\n    Master --&gt; Kublet2\n    Master --&gt; Kublet3&quot;), mdx(&quot;h2&quot;, null, &quot;Components of Kubernetes&quot;), mdx(&quot;h3&quot;, null, &quot;Pods&quot;), mdx(&quot;p&quot;, null, &quot;Pods are the most basic unit of execution in Kubernetes. A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;pod&quot;), &quot; is a group of containers that share a common configuration and are scheduled onto the same node. Pods are the smallest deployable unit of execution in Kubernetes.&quot;), mdx(&quot;h3&quot;, null, &quot;ReplicaSets&quot;), mdx(&quot;p&quot;, null, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;ReplicaSet&quot;), &quot; is a declarative way to maintain a set of pods that share a common configuration. Each pod in a ReplicaSet is a replica of all the other pods in that set, and the ReplicaSets creates and maintains the desired state of the pods. ReplicaSets act as a self-healing mechanism in that if a pod fails, the ReplicaSet will create a new pod to replace it. ReplicaSets provide fault tolerance and can also be used to automatically scale the number of pods horizontally based on a variety of conditions.&quot;), mdx(&quot;p&quot;, null, &quot;ReplicaSets rely on pod templates to define the desired state of the pods.&quot;), mdx(&quot;h3&quot;, null, &quot;Deployments&quot;), mdx(&quot;p&quot;, null, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;deployment&quot;), &quot; is a declarative way to manage ReplicaSets. Deployments support zero-downtime updates and rollbacks through the orchestrated creation and destruction of ReplicaSets.&quot;), mdx(&quot;h3&quot;, null, &quot;Labels&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Labels&quot;), &quot; are key-value pairs attached to pods, ReplicaSets, Deployments, and other Kubernetes objects to organize and identify those objects. Common uses for labels include identifying application names (e.g. \&quot;mysql\&quot;), versions (e.g. \&quot;5.7.21\&quot;), and instances (e.g. \&quot;mysql-production\&quot;), architectural components (e.g. \&quot;ui\&quot; or \&quot;database\&quot;), higher-level applications (e.g. \&quot;whenner\&quot;), and other application meta information.&quot;), mdx(&quot;h3&quot;, null, &quot;Services&quot;), mdx(&quot;p&quot;, null, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;service&quot;), &quot; allows an application to be exposed on a network, even as the pods that host the application are created and destroyed, by abstracting pod IP addresses away from application consumers and load balancing between active pods. Services rely on labels to to associate with pods.&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;mermaid&quot;
  }, &quot;graph TD\n\tClient[External Client] --&gt; Service\n\tsubgraph Kubernetes\n\t\tService --&gt; Pod1\n\t\tService --&gt; Pod2\n\t\tend&quot;), mdx(&quot;p&quot;, null, &quot;There are four main types of Service:&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;ClusterIP service&quot;), &quot; exposes the service on an IP address internal to the cluster so that only pods within the cluster can communicate with the service&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;NodePort service&quot;), &quot; exposes the service on static port on each node&apos;s IP address so that the service is accessible from outside the cluster, the node then uses a ClusterIP service to proxy requests on that port to an appropriate pod&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;LoadBalancer service&quot;), &quot; allocates an external IP address and integrates with an external load-balancer to automatically create routes to nodes (and pods by extension) exposed by a NodePort service&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;An &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;ExternalName service&quot;), &quot; associates a service with a DNS name by returning a CNAME record on DNS lookup&quot;)), mdx(&quot;h3&quot;, null, &quot;Storage and Volumes&quot;), mdx(&quot;p&quot;, null, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;volume&quot;), &quot; references a storage location that can be used by Kubernetes for persistent storage. &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Volume mounts&quot;), &quot; attach pods to volumes via the volume name and a specified mount path.&quot;), mdx(&quot;p&quot;, null, &quot;Basic types of volumes include:&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;emptyDir&quot;), &quot; volumes provide an empty directory for the lifetime of a Pod. This is useful for sharing files between containers, caching, and other ephemeral storage needs.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;hostPath&quot;), &quot; volumes provide access to the underlying node&apos;s filesystem. This is useful for added node health monitoring, such as &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://github.com/google/cadvisor&quot;
  }, &quot;cAdvisor&quot;), &quot;. For security reasons, &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;hostPath&quot;), &quot; volumes are typically readonly.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;nfs&quot;), &quot; volumes provide network file system access. This is useful for shared resources across pods and pod life cycles.&quot;)), mdx(&quot;h4&quot;, null, mdx(&quot;code&quot;, {
    parentName: &quot;h4&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;PersistentVolumes&quot;)), mdx(&quot;p&quot;, null, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;PersistentVolume&quot;), &quot; provides cluster-wide storage through network-attached storage (NAS) that can be made available to any pod even if it is rescheduled to another node. A PersistentVolume is associated with a pod through a &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;PersistentVolumeClaim (PVC)&quot;), &quot;. The storage that backs a persistent volume is usually implemented as a Network File System (NFS), iSCSI, cloud service, or other type of network based storage.&quot;), mdx(&quot;h2&quot;, null, &quot;Kubernetes Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://kubernetes.io/docs/home/&quot;
  }, &quot;Official Kubernetes Documentation&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://github.com/kubernetes/examples&quot;
  }, &quot;Open Source Kubernetes Examples&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://kubernetes.io/docs/tutorials/&quot;
  }, &quot;Official Kubernetes Tutorials&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[SCARF Model: Status, Certainty, Autonomy, Relatedness, Fairness]]></title><description><![CDATA[The opportunity for fair representation within a group]]></description><link>https://www.jamestharpe.com/scarf-model/</link><guid isPermaLink="false">https://www.jamestharpe.com/scarf-model/</guid><pubDate>Fri, 23 Jul 2021 14:11:25 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-07-23T14:11:25.000Z&quot;,
  &quot;description&quot;: &quot;The opportunity for fair representation within a group&quot;,
  &quot;tags&quot;: [&quot;social-justice&quot;],
  &quot;title&quot;: &quot;SCARF Model: Status, Certainty, Autonomy, Relatedness, Fairness&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;SCARF Model: Status, Certainty, Autonomy, Relatedness, Fairness&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;SCARF Model&quot;), &quot; is a model of common factors that activate a reward response in the brain when perceived to be present, and a threat response when perceived to be absent. The factors of SCARF are Status, Certainty, Autonomy, Relatedness, and Fairness.&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Status&quot;), &quot; is the feeling of being respected and valued.&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Certainty&quot;), &quot; is the predictability of outcomes and events.&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Autonomy&quot;), &quot; is the ability ability to make independent decisions.&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Relatedness&quot;), &quot; is the feeling of belonging in a group.&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Fairness&quot;), &quot; is the impartiality and lack of favoritism or bias in decision making.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Software Testing]]></title><description><![CDATA[The art and science of testing software]]></description><link>https://www.jamestharpe.com/software-testing/</link><guid isPermaLink="false">https://www.jamestharpe.com/software-testing/</guid><pubDate>Thu, 22 Jul 2021 16:10:41 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-07-22T16:10:41.000Z&quot;,
  &quot;description&quot;: &quot;The art and science of testing software&quot;,
  &quot;title&quot;: &quot;Software Testing&quot;,
  &quot;tags&quot;: [&quot;software-engineering&quot;]
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Software Testing&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Inclusion]]></title><description><![CDATA[The opportunity for fair representation within a group]]></description><link>https://www.jamestharpe.com/inclusion/</link><guid isPermaLink="false">https://www.jamestharpe.com/inclusion/</guid><pubDate>Tue, 20 Jul 2021 14:54:25 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-07-20T14:54:25.000Z&quot;,
  &quot;description&quot;: &quot;The opportunity for fair representation within a group&quot;,
  &quot;tags&quot;: [&quot;social-justice&quot;],
  &quot;title&quot;: &quot;Inclusion&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Inclusion&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Inclusion&quot;), &quot; is the engagement, respect, and support of individuals in a group such as a team, company, or governing body. If &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../diversity/&quot;
  }, &quot;diversity&quot;), &quot; is \&quot;having a seat at the table\&quot; then inclusion is \&quot;having a voice at the table.\&quot; An environment is considered \&quot;inclusive\&quot; when individuals from distinct cohorts report similar ability to share ideas with their peers and leadership.&quot;), mdx(&quot;p&quot;, null, &quot;A common rule to ensure an environment is inclusive is that \&quot;if you&apos;re not intentionally including, you&apos;re probably accidentally excluding.\&quot;&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Social Justice]]></title><description><![CDATA[The balance of opportunity and wealth distribution in a society]]></description><link>https://www.jamestharpe.com/social-justice/</link><guid isPermaLink="false">https://www.jamestharpe.com/social-justice/</guid><pubDate>Tue, 20 Jul 2021 14:53:25 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-07-20T14:53:25.000Z&quot;,
  &quot;description&quot;: &quot;The balance of opportunity and wealth distribution in a society&quot;,
  &quot;tags&quot;: [&quot;sociology&quot;],
  &quot;title&quot;: &quot;Social Justice&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Social Justice&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Social justice&quot;), &quot; is the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../sociology/&quot;
  }, &quot;sociological&quot;), &quot; concept of the balancing of opportunity and wealth distribution among individuals in a society.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Software Engineering News Sources]]></title><description><![CDATA[News sources to help stay up-to-date with Software Engineering]]></description><link>https://www.jamestharpe.com/software-engineering-news/</link><guid isPermaLink="false">https://www.jamestharpe.com/software-engineering-news/</guid><pubDate>Mon, 19 Jul 2021 17:17:26 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-07-19T17:17:26.000Z&quot;,
  &quot;description&quot;: &quot;News sources to help stay up-to-date with Software Engineering&quot;,
  &quot;tags&quot;: [&quot;engineering&quot;, &quot;computer-science&quot;],
  &quot;title&quot;: &quot;Software Engineering News Sources&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Software Engineering News Sources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCSJbGtTlrDami-tDGPUV9-w&quot;
  }, &quot;Academind YouTube Channel&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UC-8QAzbLcRglXeN_MY9blyw&quot;
  }, &quot;Ben Awad YouTube Channel&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UC4DwZ2VXM2KWtzHjVk9M_xg&quot;
  }, &quot;Blondiebytes&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCDCHcqyeQgJ-jVSd6VJkbCw&quot;
  }, &quot;codeSTACKr YouTube Channel&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCxX9wt5FWQUAAz4UrysqK9A&quot;
  }, &quot;CS Dojo&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCsBjURrPoezykLs9EqgamOA&quot;
  }, &quot;Fireship YouTube Channel&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UC8butISFwT-Wl7EV0hUK0BQ&quot;
  }, &quot;freeCodeCamp YouTube Channel&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UC7c3Kb6jYCRj4JOHHZTxKsQ&quot;
  }, &quot;GitHub YouTube Channel&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCnMGQ8QHMAnVIsI3xJrihhg&quot;
  }, &quot;GitLab YouTube Channel&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCOf7UPMHBjAavgD0Qw5q5ww&quot;
  }, &quot;HackerRank&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCoSPSd6Or4F_vpjo4SmyoEA&quot;
  }, &quot;InnerSource Commons YouTube Channel&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCVTlvUkGslCV_h-nSAId8Sw&quot;
  }, &quot;LearnCode.academy&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UC93BPd533EKzu_L3LeMo6Gw&quot;
  }, &quot;Lena Hall&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UC0m-80FnNY2Qb7obvTL_2fA&quot;
  }, &quot;Microsoft Azure YouTube Channel&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCvmINlrza7JHB1zkIOuXEbw&quot;
  }, &quot;Mike Dane YouTube Channel&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCL4-_86jqOf1C4IQz9oAFLA&quot;
  }, &quot;Mr Sandeep YouTube Channel&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCQPYJluYC_sn_Qz_XE-YbTQ&quot;
  }, &quot;Node.JS YouTube Channel&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UC3BGlwmI-Vk6PWyMt15dKGw&quot;
  }, &quot;O&apos;Reilly YouTube Channel&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCk3yOoaVtORwXipuLZ3jWNg&quot;
  }, &quot;Sandi Metz YouTube Channel&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCL-fHOdarou-CR2XUmK48Og&quot;
  }, &quot;Scott Hanselman YouTube Channel&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCFYG383lawh9Hrs_DEKTtdg&quot;
  }, &quot;Serverless YouTube Channel&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://twitter.com/i/lists/1413210669264953345&quot;
  }, &quot;Software Engineering Twitter List&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UC_QIfHvN9auy2CoOdSfMWDw&quot;
  }, &quot;Strange Loop Conference YouTube Channel&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCPkKhlR0sXtN5hlB228xuTg&quot;
  }, &quot;Tim Ermilov YouTube Channel&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UC29ju8bIPH5as8OGnQzwJyA&quot;
  }, &quot;Traversy Media&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCs5Y5_7XK8HLDX0SLNwkd3w&quot;
  }, &quot;Visual Studio Code YouTube Channel&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Richard Feynman: Lectures and Other Works]]></title><description><![CDATA[Information about the famous scientist, Richard Feynman]]></description><link>https://www.jamestharpe.com/richard-feynman/</link><guid isPermaLink="false">https://www.jamestharpe.com/richard-feynman/</guid><pubDate>Sat, 17 Jul 2021 23:35:58 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-07-17T23:35:58.000Z&quot;,
  &quot;description&quot;: &quot;Information about the famous scientist, Richard Feynman&quot;,
  &quot;tags&quot;: [&quot;physics&quot;],
  &quot;title&quot;: &quot;Richard Feynman: Lectures and Other Works&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Richard Feynman&quot;), mdx(&quot;h2&quot;, null, &quot;Recorded Lectures on Physics&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/watch?v=QRE0GxT6Zbw&quot;
  }, &quot;The Law of Gravitation&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/watch?v=hxKw4xEEFHQ&quot;
  }, &quot;The Relation of Mathematics and Physics&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/watch?v=klLY4cxz9vM&quot;
  }, &quot;The Great Conservation Principles&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/watch?v=2t_dtOfLqkw&quot;
  }, &quot;Symmetry in Physical Law&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/watch?v=VU0mpPm9U-4&quot;
  }, &quot;The Distinction of Past and Future&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/watch?v=f27bh4CIky4&quot;
  }, &quot;Probability and Uncertainty&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/watch?v=ZcpwnozMh2U&quot;
  }, &quot;Quantum Mechanical View of Reality&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/watch?v=MDZaM-Bi-kI&quot;
  }, &quot;The Reason for Antiparticles&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/watch?v=EKWGGDXe5MA&quot;
  }, &quot;Computer Heuristics&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/watch?v=4eRCygdW--c&quot;
  }, &quot;There&apos;s Plenty of Room at the Bottom&quot;))), mdx(&quot;h2&quot;, null, &quot;Works of Richard Feynman&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.feynmanlectures.caltech.edu/&quot;
  }, &quot;Feynman Lectures on Physics&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Equity]]></title><description><![CDATA[The opportunity for fair representation within a group]]></description><link>https://www.jamestharpe.com/equity/</link><guid isPermaLink="false">https://www.jamestharpe.com/equity/</guid><pubDate>Mon, 12 Jul 2021 16:56:25 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-07-12T16:56:25.000Z&quot;,
  &quot;description&quot;: &quot;The opportunity for fair representation within a group&quot;,
  &quot;tags&quot;: [&quot;social-justice&quot;],
  &quot;title&quot;: &quot;Equity&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Equity&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Equity&quot;), &quot; is the variance in access to opportunities offered or controlled by a group such as a team, company, or governing body. Access to opportunities often differs based on &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../diversity/&quot;
  }, &quot;diversity traits&quot;), &quot;, thus efforts to provide equity seek to overcome disadvantages some individuals experience that prevent access to opportunity. If &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../diversity/&quot;
  }, &quot;diversity&quot;), &quot; is \&quot;having a seat at the table,\&quot; equity is \&quot;the opportunity to get to the table.\&quot;&quot;), mdx(&quot;p&quot;, null, mdx(&quot;img&quot;, {
    parentName: &quot;p&quot;,
    &quot;src&quot;: &quot;../img/equality-vs-equity.jpg&quot;,
    &quot;alt&quot;: &quot;Equity vs. Equality Illustration by MPCA Photos&quot;
  })));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Diversity]]></title><description><![CDATA[How sufficiently people are represented in groups]]></description><link>https://www.jamestharpe.com/diversity/</link><guid isPermaLink="false">https://www.jamestharpe.com/diversity/</guid><pubDate>Mon, 12 Jul 2021 16:52:25 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-07-12T16:52:25.000Z&quot;,
  &quot;description&quot;: &quot;How sufficiently people are represented in groups&quot;,
  &quot;tags&quot;: [&quot;social-justice&quot;, &quot;equity&quot;],
  &quot;title&quot;: &quot;Diversity&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Diversity&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Diversity&quot;), &quot; is the full range of salient differences between people in a group such as a team, company, or governing body. Aspects of diversity can include cohorts of education level, life experiences, abilities, race/ethnicity, sex, gender identity, sexual orientation, age, physical/mental health, or other demographic traits.&quot;), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;A simple metaphor to understand diversity is that diversity means \&quot;having a seat at the table.\&quot;&quot;)), mdx(&quot;p&quot;, null, &quot;A group is considered \&quot;diverse\&quot; when it has representation from each cohort in the same proportions as the larger group it belongs to. For example, a team in a department at a company should reflect the cohorts within the department, which should reflect the cohorts within the company, which should represent the cohorts within the society it is part of.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Jira Align]]></title><description><![CDATA[Notes on Jira Align]]></description><link>https://www.jamestharpe.com/jira-align/</link><guid isPermaLink="false">https://www.jamestharpe.com/jira-align/</guid><pubDate>Mon, 12 Jul 2021 16:36:25 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-07-12T16:36:25.000Z&quot;,
  &quot;description&quot;: &quot;Notes on Jira Align&quot;,
  &quot;tags&quot;: [&quot;project-management&quot;, &quot;safe-framework&quot;],
  &quot;title&quot;: &quot;Jira Align&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Jira Align&quot;), mdx(&quot;h2&quot;, null, &quot;Forecasting in JiraAlign&quot;), mdx(&quot;p&quot;, null, &quot;Jira Align provides two potential inputs to use in &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://community.atlassian.com/t5/Jira-Align-discussions/Forecasting-in-Jira-Align/td-p/1652210&quot;
  }, &quot;forecasting&quot;), &quot;: Member Weeks, and Team Weeks. &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Member weeks (MW)&quot;), &quot; are the number of team members that will work on a feature multiplied by the number of weeks they believe it would take if they focused on it completely. &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Team Weeks (TW)&quot;), &quot; are the number of weeks an entire &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../safe-framework/&quot;
  }, &quot;agile team&quot;), &quot; believes it would take to complete a feature if they focused on it completely. Both data points are used in forecasting and high-level planning in Jira Align, however member weeks is believed to be more accurate because it takes into account that different members of the same team can work on separate features in parallel.&quot;), mdx(&quot;p&quot;, null, &quot;Member Weeks Example: An agile team estimates that 3 of its developers can complete the shopping cart feature in about two weeks, if they fully focus on that feature. Three developers times two weeks equals 6 member weeks, or &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;3&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;d&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;e&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;v&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;e&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;l&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;o&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;p&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;e&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;r&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;s&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u2217&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;2&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;w&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;e&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;e&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;k&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;s&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;6&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;m&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;e&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;m&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;b&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;e&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;r&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;w&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;e&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;e&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;k&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;s&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;3 developers * 2 weeks = 6 member weeks&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8888799999999999em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.19444em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;3&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;d&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;e&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.03588em&quot;
    }
  }, &quot;v&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;e&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.01968em&quot;
    }
  }, &quot;l&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;o&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;p&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;e&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.02778em&quot;
    }
  }, &quot;r&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;s&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2222222222222222em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mbin&quot;
  }, &quot;\u2217&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2222222222222222em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.69444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.02691em&quot;
    }
  }, &quot;w&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;e&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;e&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.03148em&quot;
    }
  }, &quot;k&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;s&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.69444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;6&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;m&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;e&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;m&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;b&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;e&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.02778em&quot;
    }
  }, &quot;r&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.02691em&quot;
    }
  }, &quot;w&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;e&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;e&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.03148em&quot;
    }
  }, &quot;k&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;s&quot;))))), &quot;.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Change Management]]></title><description><![CDATA[The practice of implementing and communicating changes in organizations]]></description><link>https://www.jamestharpe.com/change-management/</link><guid isPermaLink="false">https://www.jamestharpe.com/change-management/</guid><pubDate>Sat, 26 Jun 2021 19:01:25 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-06-26T19:01:25.000Z&quot;,
  &quot;description&quot;: &quot;The practice of implementing and communicating changes in organizations&quot;,
  &quot;tags&quot;: [],
  &quot;title&quot;: &quot;Change Management&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Change Management&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Change management&quot;), &quot; is the application of a structured approach to transition an organization from its current state to a desired future state. Effective change management not only reduces the risk of changes being rejected, but also helps ensure changes accurately target their objectives.&quot;), mdx(&quot;h2&quot;, null, &quot;Roles and Responsibilities in Change Management&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;change management lead&quot;), &quot; is &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;../raci/&quot;
  }, &quot;accountable and responsible&quot;), &quot; for the change strategy. They assess the change needed, outline an &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;../project-management/&quot;
  }, &quot;implementation plan&quot;), &quot;, and oversee the execution of the plan.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;change sponsor&quot;), &quot; is an individual or group that defines and promotes the change goals, is accountable for benefit realization, and serve as the ultimate authority on decision making and funding.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Change agents&quot;), &quot; are charged with modeling behaviors required for successful change and giving feedback on changes.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;change management team&quot;), &quot; designs and develops the tools for change adoption. The team gathers and aggregates feedback, conducts training, and communicates changes to those who are impacted.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;change management practitioner&quot;), &quot; coordinates and tracks change management activities.&quot;)), mdx(&quot;h2&quot;, null, &quot;Change Management Terminology&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Adoption&quot;), &quot; is acceptance and demonstration of new ways of thinking or behaving that are consistent with future state behavior&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;benefit&quot;), &quot; is a quantitative or qualitative desirable outcome that results from a change&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Benefit realization&quot;), &quot; is the achievement of the expected benefits of a change&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Current state&quot;), &quot; is the condition of a system at the time when change is initiated, or simply put it&apos;s the \&quot;status quo\&quot;&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Future state&quot;), &quot; is the condition of a system at the time when the benefits of a change have been realized&quot;)), mdx(&quot;h2&quot;, null, &quot;Transitions&quot;), mdx(&quot;p&quot;, null, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;transition&quot;), &quot; is the change from the current state to the future state, and is the primary focus of change management. Typical transitions result in an initial drop in performance while teams become accustomed to the change; however, successful change management helps teams navigate through the transition to establish a \&quot;new normal\&quot; where performance eventually exceeds the old status quo as a result of the change.&quot;), mdx(&quot;p&quot;, null, &quot;A classic example of the typical transition curve is roadway construction. During the construction, traffic slows down and the problem of traffic may seem worse than ever. However, once construction is completed, traffic flows more smoothly than before construction began.&quot;), mdx(&quot;h2&quot;, null, &quot;Change Management Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://hbr.org/2020/06/3-things-youre-getting-wrong-about-organizational-change&quot;
  }, &quot;HBR: 3 Things You\u2019re Getting Wrong About Organizational Change&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.mckinsey.com/business-functions/organization/our-insights/personalizing-change-management-in-the-smartphone-era&quot;
  }, &quot;McKinsey: Personalizing change management in the smartphone era&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://twitter.com/i/lists/1409262959881244677&quot;
  }, &quot;Change management Tweeters&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Cynefin Framework]]></title><description><![CDATA[A framework for making sense out of chaotic or complex situations]]></description><link>https://www.jamestharpe.com/cynefin/</link><guid isPermaLink="false">https://www.jamestharpe.com/cynefin/</guid><pubDate>Sat, 26 Jun 2021 19:01:25 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-06-26T19:01:25.000Z&quot;,
  &quot;description&quot;: &quot;A framework for making sense out of chaotic or complex situations&quot;,
  &quot;tags&quot;: [&quot;change-management&quot;],
  &quot;title&quot;: &quot;Cynefin Framework&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Cynefin Framework&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Cynefin Framework&quot;), &quot; is a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../change-management/&quot;
  }, &quot;change management&quot;), &quot; framework to aid decision making, especially in chaotic or complex situations. The term \&quot;cynefin\&quot; (pronounced &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;kuh-nev-in&quot;), &quot;) means \&quot;habitat\&quot; in Welsh, and is intended to invoke a sense of interconnectedness that can never be fully understood.&quot;), mdx(&quot;p&quot;, null, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../img/cynefin.jpg&quot;
  }, mdx(&quot;img&quot;, {
    parentName: &quot;a&quot;,
    &quot;src&quot;: &quot;../img/cynefin.jpg&quot;,
    &quot;alt&quot;: &quot;Cynefin framework visualized by Edwin Stoop of Sketching Maniacs&quot;
  }))), mdx(&quot;h2&quot;, null, &quot;Cynefin Contexts&quot;), mdx(&quot;p&quot;, null, &quot;In cynefin, a &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;context&quot;), &quot;, sometimes called a &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;domain&quot;), &quot;, is the set of circumstances that drive decisions. Cynefin seeks to match actions to context to aid decision making. Each context is paired with a decision model for sensing, acting, analyzing, categorizing, and responding based on the available information.&quot;), mdx(&quot;h3&quot;, null, &quot;Disorder&quot;), mdx(&quot;p&quot;, null, &quot;Disorder is the center of the cynefin framework. When a system is in &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;disorder&quot;), &quot;, the specific context is unclear. When in disorder, the determination whether the context is chaos, complex, complicated, or obvious may be subjectively assessed based on each person&apos;s background or personal history rather than an objective criteria.&quot;), mdx(&quot;p&quot;, null, &quot;A system in disorder is one in which decisions are most likely to be wrong. Disorder differs from chaos in that a chaotic system lacks order, where as a disordered system &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;unknowingly&quot;), &quot; falls under any of the other domains.&quot;), mdx(&quot;p&quot;, null, &quot;Bureaucrats tend to see problems through the &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;simple&quot;), &quot; context, as failures of process. Experts tend to see problems through the &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;complicated&quot;), &quot; context, as failure of analysis. The cynefin framework provides a means of parsing through multiple perspectives to assign the right context, think in the most effective terms, and subsequently take the right actions.&quot;), mdx(&quot;h3&quot;, null, &quot;Chaotic: Act, Sense, Respond&quot;), mdx(&quot;p&quot;, null, &quot;In &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;chaotic systems&quot;), &quot;, there is no definitive understanding between cause and effect. This can be intentional when existing rules are cast aside - usually in a controlled manner, such as a skunk-works project - in an attempt to innovate. Chaotic systems also emerge unintentionally, when existing systems fail or are disrupted.&quot;), mdx(&quot;p&quot;, null, &quot;The decision model for chaotic systems is:&quot;), mdx(&quot;ol&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Act&quot;), &quot; by doing &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;li&quot;
  }, &quot;something&quot;), &quot;, often something extreme, as a way to establish a baseline for improvement&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Sense&quot;), &quot; the situation created through action&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Respond&quot;), &quot; with \&quot;novel practices\&quot; to understand and improve upon the baseline&quot;)), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Novel practices&quot;), &quot; are practices that seem to work or seem like they will work and may be discarded as quickly as they are adopted in attempts to stabilize the system.&quot;), mdx(&quot;p&quot;, null, &quot;Chaotic systems have no effective constraints. The lack of effective constraints can be an absence of constraints, or a set of constraints that must be broken for progress to be made.&quot;), mdx(&quot;h3&quot;, null, &quot;Complex: Probe, Sense, Respond&quot;), mdx(&quot;p&quot;, null, &quot;In &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;complex systems&quot;), &quot;, there is little understanding of the relationship between cause and effect, thus knowledge is gained largely through trial-and-error and progress requires exaptive practice (the re-use of existing tools and knowledge in new ways).&quot;), mdx(&quot;p&quot;, null, &quot;The decision model for complex systems is:&quot;), mdx(&quot;ol&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Probe&quot;), &quot; the situation through small actions, targeted to safely increase understanding and make incremental progress&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Sense&quot;), &quot; the situation based on the facts established from probes&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Respond&quot;), &quot; to the situation with \&quot;emergent/exaptive practices\&quot; to achieve informative results&quot;)), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Emergent/exaptive practices&quot;), &quot; consist of general guidance based on previous experience including heuristics, narratives, and historic \&quot;what worked for me\&quot; examples. This often includes existing tools, repurposed for novel applications.&quot;), mdx(&quot;p&quot;, null, &quot;Complex systems use &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;enabling constraints&quot;), &quot;, which provide lenses through which to view complexity, and guiding principles. Complex systems are best managed through the discovery and communication of enabling constraints. For example, the US Marines use \&quot;capture the high ground, stay in touch, and keep moving\&quot; as the enabling constraints for active battlefields.&quot;), mdx(&quot;h3&quot;, null, &quot;Complicated: Sense, Analyze, Respond&quot;), mdx(&quot;p&quot;, null, &quot;In &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;complicated systems&quot;), &quot;, there is a direct and known relation between cause and effect, however that relationship is not self-evident unless you&apos;re an expert. Complicated systems differ from complex systems in that experts can be trusted in a complicated situation, but not in a complex one. The maintenance of complicated systems therefore requires the continual building of expertise and trust in them.&quot;), mdx(&quot;p&quot;, null, &quot;The decision model for obvious systems is:&quot;), mdx(&quot;ol&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Sense&quot;), &quot; the situation by establishing the facts of what is known&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Analyze&quot;), &quot; the situation through employment of subject matter experts (SMEs)&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Respond&quot;), &quot; to the situation with \&quot;good practices\&quot; to achieve a probable result&quot;)), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Good practices&quot;), &quot; provide a menu of sensible options based on hypotheses formed from context and analysis. Subsequent actions are then most effectively selected by those with the most knowledge of the context and expertise in the system.&quot;), mdx(&quot;p&quot;, null, &quot;A common mistake in complicated systems is to impose best practices in a context where good practices are required. In complicated systems, best practices oversimplify the context, lead to suboptimal decisions, and may erode trust in expertise. When trust is sufficiently eroded, a complicated system can devolve into a complex one.&quot;), mdx(&quot;p&quot;, null, &quot;Complicated systems use &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;governing constraints&quot;), &quot;, which define the &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;limits&quot;), &quot; of what &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;must&quot;), &quot; or &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;must not&quot;), &quot; be done and otherwise provide flexibility context-based decision making.&quot;), mdx(&quot;p&quot;, null, &quot;The border between complicated and complex&quot;), mdx(&quot;h3&quot;, null, &quot;Obvious: Sense, Categorize, Respond&quot;), mdx(&quot;p&quot;, null, &quot;In &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;obvious systems&quot;), &quot; (formerly &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;simple&quot;), &quot; systems), there is a direct and known relationship between cause and effect, which is clear to virtually everyone. Obvious systems are predictable, with clear actions and reactions, and hardly anyone would dispute how the system works.&quot;), mdx(&quot;p&quot;, null, &quot;The decision model for obvious systems is:&quot;), mdx(&quot;ol&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Sense&quot;), &quot; the situation by establishing the facts of what is known&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Categorize&quot;), &quot; the situation according to the system into established categories&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Respond&quot;), &quot; to the situation with the prescribed \&quot;best practice\&quot; to achieve a predictable result&quot;)), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Best practice&quot;), &quot; provide specific actions for well-categorized situations. Subsequent actions are then most effectively selected by the system its self in most cases.&quot;), mdx(&quot;p&quot;, null, &quot;Obvious systems use &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;rigid constrains&quot;), &quot;, sometimes called &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;fixed constraints&quot;), &quot;, which are constraints that require little context and tend to operate according to simple \&quot;if, then\&quot; rules, though perhaps not completely without exception.&quot;), mdx(&quot;p&quot;, null, &quot;The border between obvious and chaos is called the \&quot;zone of complacency\&quot; where if an obvious system is over-constrained - if the rules are too rigid - it may collapse and become a chaotic system.&quot;), mdx(&quot;h2&quot;, null, &quot;Video: The Cynefin Framework&quot;), mdx(&quot;iframe&quot;, {
    width: &quot;560&quot;,
    height: &quot;315&quot;,
    src: &quot;https://www.youtube.com/embed/N7oz366X0-8&quot;,
    title: &quot;YouTube video player&quot;,
    frameBorder: &quot;0&quot;,
    allow: &quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot;,
    allowFullScreen: true
  }));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Scaled Agile Framework (SAFe)]]></title><description><![CDATA[A product and project management framework for large enterprises]]></description><link>https://www.jamestharpe.com/safe-framework/</link><guid isPermaLink="false">https://www.jamestharpe.com/safe-framework/</guid><pubDate>Thu, 24 Jun 2021 17:48:42 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-06-24T17:48:42.000Z&quot;,
  &quot;description&quot;: &quot;A product and project management framework for large enterprises&quot;,
  &quot;tags&quot;: [&quot;product-management&quot;, &quot;project-management&quot;, &quot;sdlc&quot;],
  &quot;title&quot;: &quot;Scaled Agile Framework (SAFe)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Scaled Agile Framework (SAFe)&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;SAFe&quot;), &quot; is a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../product-management/&quot;
  }, &quot;product&quot;), &quot; and &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../project-management/&quot;
  }, &quot;project&quot;), &quot; framework for large &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../enterprise-initiatives/&quot;
  }, &quot;enterprises&quot;), &quot;. It consists of seven core competencies around which business strategy is organized.&quot;), mdx(&quot;h2&quot;, null, &quot;SAFe Organization&quot;), mdx(&quot;h3&quot;, null, &quot;Agile Teams / Team and Technical Agility&quot;), mdx(&quot;p&quot;, null, &quot;According to SAFe, an &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;agile team&quot;), &quot; is a group of about five to eleven members capable of managing the end-to-end delivery of business value in short, &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../timeboxing/&quot;
  }, &quot;time boxed&quot;), &quot; iterations. A typical agile team includes developers, a product owner, and a ScrumMaster. The primary SAFe competency of an agile team is &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;team and technical agility&quot;), &quot;.&quot;), mdx(&quot;p&quot;, null, &quot;The daily &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../business-operations/&quot;
  }, &quot;operations&quot;), &quot; of the team are guided by other agile frameworks such as Scrum or Kanban. Each iteration starts with a planning event to decide what will be done within the iteration. During the iteration, the team meets daily to coordinate their work and focus on meeting the iteration goals. At the end of the iteration, the team holds an &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;iteration review&quot;), &quot; to demo the work they&apos;ve completed to stakeholders. After the iteration review, they hold a &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;retrospective&quot;), &quot; to reflect on ways they can improve on the value they deliver.&quot;), mdx(&quot;h3&quot;, null, &quot;Agile Release Trains (ARTs) / Agile Product Delivery&quot;), mdx(&quot;p&quot;, null, &quot;An &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;agile release train (ART)&quot;), &quot; is a \&quot;team of agile teams\&quot;. The typical ART includes 50 to 125 people, or roughly ten agile teams. An ART should include all the people needed to deliver a complex solution to customers. An ART also includes a &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;release train engineer&quot;), &quot;, who serves as the coach for the ART, representatives from &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;product management&quot;), &quot; to provide the vision and backlog, and a &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;system architect&quot;), &quot; to provide architectural guidance. The primary SAFe competency of an ART is &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;agile product delivery&quot;), &quot;.&quot;), mdx(&quot;p&quot;, null, &quot;ARTs operate in &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;program increments (PIs)&quot;), &quot;, which are typically five iterations long. Similar to the way agile teams operate, PIs start with a planning event in which the teams pull from the backlog to identify what should be delivered within the PI. During PI planning, dependencies between teams are visualized on a &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;program board&quot;), &quot;. At the end of the PI, the ART team holds a &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;system demo&quot;), &quot; to show the fully integrated work they&apos;ve completed to stakeholders. After the system demo, the hold an &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;inspect and adapt event&quot;), &quot;.&quot;), mdx(&quot;h3&quot;, null, &quot;Solution Trains / Solution Management&quot;), mdx(&quot;p&quot;, null, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;solution train&quot;), &quot; is a group of agile release trains that coordinates especially large and complex solutions. A solution train includes a &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;solution management&quot;), &quot; group with authority over what gets built, a &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;solution architect&quot;), &quot; to provide architectural guidance across ARTs, and a &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;solution train engineer&quot;), &quot; to coach and facilitate the activities of the solution train.&quot;), mdx(&quot;h2&quot;, null, &quot;Additional SAFe Terms&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;p&quot;, {
    parentName: &quot;li&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Lean portfolio management&quot;), &quot; seeks to align strategy with execution through the creation of strategic themes, a portfolio vision, and organizes funding around the delivery of value and value streams.&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;p&quot;, {
    parentName: &quot;li&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Organizational agility&quot;), &quot; is the ability to change direction quickly based on market conditions, re-organizing as needed across the entire enterprise. This is done through the creation of a culture of continuous learning and investment in individuals that deliver results and demonstrate lean thinking.&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;p&quot;, {
    parentName: &quot;li&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Lean-Agile Leadership&quot;), &quot; is the embodiment and teaching of lean and agile principles.&quot;))), mdx(&quot;h2&quot;, null, &quot;SAFe Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.scaledagileframework.com/&quot;
  }, &quot;Official SAFe website&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/user/scaledagile&quot;
  }, &quot;Scaled Agile YouTube channel&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://support.scaledagile.com/s/article/Exam-Details-POPM?language=en_US&quot;
  }, &quot;SAFe Product Owner/Product Manager Study Guide&quot;))), mdx(&quot;h2&quot;, null, &quot;Video: SAFe Overview in 5 Minutes&quot;), mdx(&quot;iframe&quot;, {
    width: &quot;560&quot;,
    height: &quot;315&quot;,
    src: &quot;https://www.youtube.com/embed/aW2m-BtCJyE&quot;,
    title: &quot;YouTube video player&quot;,
    frameBorder: &quot;0&quot;,
    allow: &quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot;,
    allowFullScreen: true
  }));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Scrum]]></title><description><![CDATA[A lightweight framework for product and project management]]></description><link>https://www.jamestharpe.com/scrum/</link><guid isPermaLink="false">https://www.jamestharpe.com/scrum/</guid><pubDate>Thu, 24 Jun 2021 17:48:42 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-06-24T17:48:42.000Z&quot;,
  &quot;description&quot;: &quot;A lightweight framework for product and project management&quot;,
  &quot;tags&quot;: [&quot;agile&quot;, &quot;project-management&quot;, &quot;product-management&quot;],
  &quot;title&quot;: &quot;Scrum&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Scrum&quot;), mdx(&quot;p&quot;, null, &quot;Scrum is a simple framework for iterative &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../product-management/&quot;
  }, &quot;product&quot;), &quot; and &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../project-management/&quot;
  }, &quot;project&quot;), &quot; management, based on &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../agile/&quot;
  }, &quot;agile principles&quot;), &quot;. The goal of scrum is to enhance the creation of value through adaptation. Work is done in iterations called sprints. A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;sprint&quot;), &quot; is a short &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../timeboxing/&quot;
  }, &quot;timebox&quot;), &quot; of work, typically 1 - 4 weeks long, in which the team plans, executes, and delivers an increment of progress. Scrum is pull-based, meaning the teams are responsible for \&quot;pulling\&quot; items from the backlog to create a sprint plan. A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;backlog&quot;), &quot; is simply a prioritized list of improvements to the product the team develops.&quot;), mdx(&quot;h2&quot;, null, &quot;Scrum Roles&quot;), mdx(&quot;p&quot;, null, &quot;Scrum defines three roles:&quot;), mdx(&quot;ol&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;The &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;scrum master&quot;), &quot; manages ceremonies and helps remove roadblocks for the team&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;The &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;product owner&quot;), &quot; defines and prioritizes the product backlog&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;The &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;developer&quot;), &quot; implements the solution&quot;)), mdx(&quot;p&quot;, null, &quot;A Scrum team is typically made up of one scrum master, one product owner, and roughly 5 - 10 developers.&quot;), mdx(&quot;h2&quot;, null, &quot;Scrum Ceremonies&quot;), mdx(&quot;p&quot;, null, &quot;The ceremonies that happen during each sprint are:&quot;), mdx(&quot;ol&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;Each sprint is initiated with &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;sprint planning&quot;), &quot;, when the team evaluates the backlog and decides what will be delivered during the sprint.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;The team meets each day in the &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;daily scrum&quot;), &quot; to review progress from the previous day, plans for the day ahead, and known risks and road blocks.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;Each sprint closes with a &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;sprint review&quot;), &quot; where the team demonstrates their progress to stakeholders and collects feedback that can inform the next sprint plan.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;Finally, the team holds a &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;sprint retrospective&quot;), &quot; to reflect on how they can improve their interactions, processes, and tools.&quot;)), mdx(&quot;h2&quot;, null, &quot;Scrum Artifacts&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Scrum artifacts&quot;), &quot; are the output of the Scrum process. They include:&quot;), mdx(&quot;ol&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;The &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;product backlog&quot;), &quot;: A prioritized list of product improvements that serves as the single source of work for the team.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;The &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;sprint backlog&quot;), &quot; is pulled from the product backlog to create a prioritized list of improvements that can reasonably be delivered in the current sprint.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;An &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;increment&quot;), &quot; is the set of improvements delivered and demoed in a sprint.&quot;)), mdx(&quot;h2&quot;, null, &quot;Scrum Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://scrumguides.org/scrum-guide.html&quot;
  }, &quot;Official Scrum Guide&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[RACI: Responsible, Accountable, Consulted, Informed]]></title><description><![CDATA[An roles and responsibilities model]]></description><link>https://www.jamestharpe.com/raci/</link><guid isPermaLink="false">https://www.jamestharpe.com/raci/</guid><pubDate>Thu, 24 Jun 2021 17:12:25 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-06-24T17:12:25.000Z&quot;,
  &quot;description&quot;: &quot;An roles and responsibilities model&quot;,
  &quot;tags&quot;: [&quot;project-management&quot;],
  &quot;title&quot;: &quot;RACI: Responsible, Accountable, Consulted, Informed&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Responsible, Accountable, Consulted, Informed (RACI)&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;RACI&quot;), &quot; is a model to clearly articulate the roles and responsibilities for a person, team, organization, or activity. The term \&quot;RACI\&quot; is derived from the model, which specifies who is responsible, accountable, consulted, and informed for a given outcome.&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Responsible&quot;), &quot; refers to the person that does the work. The RACI model prescribes that this is never more than one person.&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Accountable&quot;), &quot; refers to the decision maker or decision making body. The accountable person or committee is generally expected to justify (provide an account of) the decisions made.&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Consulted&quot;), &quot; refers to anyone that can help make an informed decision or evaluate the quality of work, but does not necessarily make the decision or perform the work.&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Informed&quot;), &quot; refers to anyone that should be notified of decisions and when work is completed.&quot;), mdx(&quot;h2&quot;, null, &quot;RACI Charts&quot;), mdx(&quot;p&quot;, null, &quot;RACI charts help organize and visualize the RACI model by plotting work by attribute or by plotting attribute by.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Fix the Windows Subsystem for Linux internet connection while on VPN]]></title><description><![CDATA[How to fix VPN connection issues on Windows Subsystem for Linux]]></description><link>https://www.jamestharpe.com/wsl-vpn/</link><guid isPermaLink="false">https://www.jamestharpe.com/wsl-vpn/</guid><pubDate>Tue, 22 Jun 2021 12:54:27 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-06-22T12:54:27.000Z&quot;,
  &quot;description&quot;: &quot;How to fix VPN connection issues on Windows Subsystem for Linux&quot;,
  &quot;tags&quot;: [&quot;wsl&quot;],
  &quot;title&quot;: &quot;Fix the Windows Subsystem for Linux internet connection while on VPN&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;WSL: Fix the Internet Connection while on VPN&quot;), mdx(&quot;p&quot;, null, &quot;Based on &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://github.com/microsoft/WSL/issues/4285#issuecomment-522201021&quot;
  }, &quot;this comment&quot;), &quot;, the following instructions worked for me on Ubuntu Linux:&quot;), mdx(&quot;p&quot;, null, &quot;In your &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../wsl/&quot;
  }, &quot;WSL&quot;), &quot; Linux instance, create or edit &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/etc/wsl.conf&quot;), &quot; to look like this:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;ini&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-ini&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-ini&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token section&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;[&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token section-name selector&quot;
  }, &quot;network&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;]&quot;)), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key attr-name&quot;
  }, &quot;generateResolvConf&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token value attr-value&quot;
  }, &quot;false&quot;)))), mdx(&quot;p&quot;, null, &quot;Back in &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../windows/&quot;
  }, &quot;Windows&quot;), &quot;, restart WSL using &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../powershell/&quot;
  }, &quot;PowerShell&quot;), &quot;:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;powershell&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-powershell&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-powershell&quot;
  }, &quot;wsl &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;--&quot;), &quot;shutdown\nwsl&quot;))), mdx(&quot;p&quot;, null, &quot;In your WSL Linux, create or edit &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/etc/resolv.conf&quot;), &quot; to use &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://developers.google.com/speed/public-dns/&quot;
  }, &quot;Google Public DNS&quot;), &quot; by creating the following entry (you may or may not have to delete other entries to get it working):&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;text&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;nameserver 8.8.8.8&quot;))), mdx(&quot;p&quot;, null, &quot;Restart WSL again in PowerShell:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;powershell&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-powershell&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-powershell&quot;
  }, &quot;wsl &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;--&quot;), &quot;shutdown\nwsl&quot;))), mdx(&quot;p&quot;, null, &quot;Finally, once connected to the VPN, run the following command in Windows PowerShell, substituting &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;&lt;vpn name&gt;&quot;), &quot; with your VPN&apos;s name:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;powershell&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-powershell&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-powershell&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;Get-NetAdapter&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;|&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;Where-Object&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$_&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;InterfaceDescription &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;-Match&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;&lt;vpn name&gt;\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;|&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;Set-NetIPInterface&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;-&quot;), &quot;InterfaceMetric 6000&quot;))), mdx(&quot;p&quot;, null, &quot;For example, if your VPN&apos;s name is &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;Cisco AnyConnect&quot;), &quot;, the command would look like this:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;powershell&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-powershell&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-powershell&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;Get-NetAdapter&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;|&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;Where-Object&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$_&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;InterfaceDescription &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;-Match&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;Cisco AnyConnect\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;|&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;Set-NetIPInterface&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;-&quot;), &quot;InterfaceMetric 6000&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Reset the a user's password in Windows Subsystem for Linux (WSL)]]></title><description><![CDATA[How to reset the any users password in Windows Subsystem for Linux]]></description><link>https://www.jamestharpe.com/wsl-root-password/</link><guid isPermaLink="false">https://www.jamestharpe.com/wsl-root-password/</guid><pubDate>Tue, 22 Jun 2021 12:53:27 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-06-22T12:53:27.000Z&quot;,
  &quot;description&quot;: &quot;How to reset the any users password in Windows Subsystem for Linux&quot;,
  &quot;tags&quot;: [&quot;wsl&quot;],
  &quot;title&quot;: &quot;Reset the a user&apos;s password in Windows Subsystem for Linux (WSL)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;WSL: Reset a User&apos;s Password&quot;), mdx(&quot;p&quot;, null, &quot;On &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../wsl/&quot;
  }, &quot;Windows Subsystem for Linux&quot;), &quot;, you can reset a user&apos;s password using the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;--user&quot;), &quot; (or &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;-u&quot;), &quot;) flag to run the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://man7.org/linux/man-pages/man1/passwd.1.html&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;a&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;passwd&quot;)), &quot; Linux command as the specified user.&quot;), mdx(&quot;ol&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;Open &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;../powershell/&quot;
  }, &quot;PowerShell&quot;), &quot;, then use the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;wsl -u root&quot;), &quot; to run the next command as the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;root&quot;), &quot; user.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;At the prompt, enter &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;passwd &lt;username&gt;&quot;), &quot; where &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;&lt;username&gt;&quot;), &quot; is the account to change the password of, (e.g. &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;passwd james&quot;), &quot;).&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;Enter your password twice as prompted. It will not show in the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;../terminal/&quot;
  }, &quot;terminal&quot;), &quot;.&quot;)), mdx(&quot;p&quot;, null, &quot;The password is now changed! Here&apos;s an example session using the username &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;current_user&quot;), &quot;:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;powershell&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-powershell&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-powershell&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;PS&quot;), &quot; C:\\&gt; wsl &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;-&quot;), &quot;u root\nroot@COMPUTER:&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;/&quot;), &quot;mnt/c/Users/current_user/&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# passwd current_user&quot;), &quot;\nEnter new UNIX password:\nRetype new UNIX password:\npasswd: updated successfully\nroot@COMPUTER:&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;/&quot;), &quot;mnt/c/Users/current_user/&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# exit&quot;), &quot;\nlogout\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;PS&quot;), &quot; C:\\&gt;&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Taoism]]></title><description><![CDATA[A philosophical and spiritual tradition of living in harmony with the Tao]]></description><link>https://www.jamestharpe.com/taoism/</link><guid isPermaLink="false">https://www.jamestharpe.com/taoism/</guid><pubDate>Mon, 21 Jun 2021 00:28:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-06-21T00:28:11.000Z&quot;,
  &quot;description&quot;: &quot;A philosophical and spiritual tradition of living in harmony with the Tao&quot;,
  &quot;tags&quot;: [],
  &quot;title&quot;: &quot;Taoism&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Taoism&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Project Management]]></title><description><![CDATA[Resources for Project Management]]></description><link>https://www.jamestharpe.com/project-management/</link><guid isPermaLink="false">https://www.jamestharpe.com/project-management/</guid><pubDate>Sat, 05 Jun 2021 19:40:01 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-06-05T19:40:01.000Z&quot;,
  &quot;description&quot;: &quot;Resources for Project Management&quot;,
  &quot;tags&quot;: [&quot;product-management&quot;, &quot;change-management&quot;],
  &quot;title&quot;: &quot;Project Management&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Project Management&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Project management&quot;), &quot; is the practice of creating, allocating, applying resources to the completion of a project. A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;project&quot;), &quot; is an undertaking that seeks to create something new to meet an &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../requirements/&quot;
  }, &quot;objective&quot;), &quot;, generally through the creation or &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../change-management/&quot;
  }, &quot;enhancement&quot;), &quot; of a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../product-management/&quot;
  }, &quot;product&quot;), &quot; or service. A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;product&quot;), &quot; is the output of the project. A project is completed when the objective is met or cannot be met based on resource constraints.&quot;), mdx(&quot;h2&quot;, null, &quot;The Iron Triangle of Project Management&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;iron triangle&quot;), &quot; are the constraints of managing a project. They are:&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Speed&quot;), &quot;: How quickly the project can complete&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Cost&quot;), &quot;: How much money the project requires&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Scope&quot;), &quot;: The requirements and constraints of what must be delivered&quot;)), mdx(&quot;p&quot;, null, &quot;Generally speaking, you can optimize for any &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;two&quot;), &quot; points on the iron triangle. For example, to get more done (scope) in less time (speed) often requires spending more money (cost). Of course, it&apos;s not always that simple.&quot;), mdx(&quot;h2&quot;, null, &quot;Project Artifacts&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Project artifacts&quot;), &quot; are the output of project management practices other than the product, such as schedules, budgets, and status reports. Depending on project size, there are many different artifacts that might be produced as part of the project.&quot;), mdx(&quot;h3&quot;, null, &quot;Project Charter&quot;), mdx(&quot;p&quot;, null, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;project charter&quot;), &quot; is a founding document that summarizes why the project was started, plus the initial set of expectations for budget, scope, and timeline. Often a project charter is maintained as a \&quot;living document\&quot; that is updated periodically as the project progresses.&quot;), mdx(&quot;p&quot;, null, &quot;Common elements of a project charter include:&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;vision&quot;), &quot; that describes what is valuable about the project for both the producer and consumer of the product.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;requirements summary&quot;), &quot; that gives a high-level description of what must be delivered by when.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;A set of &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;stretch goals&quot;), &quot; that describe accomplishments that would be \&quot;nice to have\&quot; but aren&apos;t necessary to consider the project a success.&quot;)), mdx(&quot;h3&quot;, null, &quot;Project Plan&quot;), mdx(&quot;p&quot;, null, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;project plan&quot;), &quot; is defines the sequence of tasks, dependencies between tasks, and organizational elements of the project. Typically a project plan is a \&quot;living document\&quot; that is updated regularly as the project progresses.&quot;), mdx(&quot;p&quot;, null, &quot;Common elements of a project plan include:&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;project brief&quot;), &quot; or &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;executive summary&quot;), &quot; that describes the projects purpose, timeline, budget, and scope in a few short paragraphs or bullet points&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;vision statement&quot;), &quot; that describes the purpose of the end-product, or a synopsis of (or link to) the project charter&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;history&quot;), &quot; of achieved milestones and changes to the plan&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;schedule overview&quot;), &quot; that lists each project milestone along with its purpose, scope, and anticipated completion date&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;resources list&quot;), &quot; that includes the teams, tools, materials and the focus/purpose of each resource involved in the project (see also: &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;../enterprise-initiatives/&quot;
  }, &quot;Enterprise Initiatives&quot;), &quot;)&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;risk list&quot;), &quot; that describes known risks to project success, along with each risk&apos;s probability, impact, and mitigation plan&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;definition of done&quot;), &quot; or &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;release criteria&quot;), &quot; that describes the quality, performance, and sign-off requirements needed to consider each feature \&quot;done\&quot; or otherwise ready to be used by the customer.&quot;)), mdx(&quot;h2&quot;, null, &quot;Project Management Tips&quot;), mdx(&quot;h3&quot;, null, &quot;Plan to Re-plan&quot;), mdx(&quot;p&quot;, null, &quot;Each project is a novel undertaking and it&apos;s exceptionally rare that up-front plans are perfect. Instead of spending excessive effort to create the perfect plan, plan just enough to get started and to re-plan as you learn from experience. As the project proceeds, take what you&apos;ve learned and update the plan regularly throughout the project.&quot;), mdx(&quot;p&quot;, null, &quot;For the long-term plan, use the \&quot;cone of uncertainty\&quot; to set expectations.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Cascading Style Sheets (CSS)]]></title><description><![CDATA[Cascading Style Sheets (CSS)]]></description><link>https://www.jamestharpe.com/css/</link><guid isPermaLink="false">https://www.jamestharpe.com/css/</guid><pubDate>Tue, 01 Jun 2021 21:29:41 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-06-01T21:29:41.000Z&quot;,
  &quot;description&quot;: &quot;Cascading Style Sheets (CSS)&quot;,
  &quot;tags&quot;: [&quot;computer-languages&quot;, &quot;html&quot;],
  &quot;title&quot;: &quot;Cascading Style Sheets (CSS)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Cascading Style Sheets (CSS)&quot;), mdx(&quot;p&quot;, null, &quot;Cascading Style Sheets (CSS) is a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../computer-languages/&quot;
  }, &quot;computer-language&quot;), &quot; that describes how XML and &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../html/&quot;
  }, &quot;HTML&quot;), &quot; documents should be visually presented. One of the best ways to learn CSS is through the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://developer.mozilla.org/en-US/docs/Learn/CSS&quot;
  }, &quot;MDN CSS Learning Arena&quot;), &quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;CSS Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://developer.mozilla.org/en-US/docs/Web/CSS&quot;
  }, &quot;CSS: Cascading Style Sheets on MDN&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.w3.org/TR/CSS/#css&quot;
  }, &quot;CSS Official Definition on W3C&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;http://www.csszengarden.com/&quot;
  }, &quot;CSS Zen Garden&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Konmari Method]]></title><description><![CDATA[A method to manage belongings and de-clutter work and living spaces]]></description><link>https://www.jamestharpe.com/konmari-method/</link><guid isPermaLink="false">https://www.jamestharpe.com/konmari-method/</guid><pubDate>Sat, 29 May 2021 12:36:54 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-05-29T12:36:54.000Z&quot;,
  &quot;description&quot;: &quot;A method to manage belongings and de-clutter work and living spaces&quot;,
  &quot;tags&quot;: [&quot;personal-productivity&quot;],
  &quot;title&quot;: &quot;Konmari Method&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Steps to Keep Organized&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Konmari Method&quot;), &quot; is described in the book \&quot;The Life-Changing Magic of Tidying Up\&quot; by Marie Kondo.&quot;), mdx(&quot;h2&quot;, null, &quot;Step One: Make Organizing an Event&quot;), mdx(&quot;p&quot;, null, &quot;Work quickly and organize completely, in one shot, as a special event. Do not work gradually or make regular incremental progress. The idea is to create a \&quot;shock\&quot; that will motivate you to stay tidy, long term.&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Set a deadline.&quot;), &quot; Commit to completing the organization process within a specific time frame. If the process will take longer than one day, commit to a regular schedule. For example, if your deadline is one month from now, commit to working daily or each weekend in the weeks ahead.&quot;), mdx(&quot;h2&quot;, null, &quot;Step Two: Make Piles&quot;), mdx(&quot;p&quot;, null, &quot;Round up everything that needs to be organized, and pile them by category - not by location. Categories could be: Books, clothes, dishes, electronics, office supplies, and so on. This simultaneously frees space and makes the amount of \&quot;stuff\&quot; in each category visually obvious. The idea is that we often don&apos;t realize how much excess we have until we see it all in one place.&quot;), mdx(&quot;h2&quot;, null, &quot;Step Three: Keep and Discard&quot;), mdx(&quot;p&quot;, null, &quot;Go one-by-one through each item in each pile, hold it, and ask yourself \&quot;does this spark joy?\&quot; If an item doesn&apos;t make you happy, discard it. The idea is to frame the decision in terms of what&apos;s &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;truly worth keeping&quot;), &quot;, rather than what you &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;might want to get rid of&quot;), &quot;.&quot;), mdx(&quot;p&quot;, null, &quot;To know whether an item \&quot;sparks joy,\&quot; hold it in your hands and notice how your body reacts. Do you feel a sense of excitement or inspiration? Keep it. Otherwise, discard it.&quot;), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;Is an item necessary, but it doesn&apos;t spark joy? Keep it, or decide to replace it with a better version if possible.&quot;)), mdx(&quot;p&quot;, null, &quot;Perform this process in the following order: Clothes, books, documents, miscellaneous items, mementos. The order is important to building momentum. Clothes come first because they&apos;re they typically create the most organizational progress in the least amount of time, thus providing motivation to keep going. Mementos come last because they tend to inspire nostalgia and stop the organizing process.&quot;), mdx(&quot;h2&quot;, null, &quot;Step Four: Put Away&quot;), mdx(&quot;p&quot;, null, &quot;When only the items that \&quot;spark joy\&quot; remain, put them away. Just as they were brought out and piled in categories, they should be put away in locations by category rather than by room.&quot;), mdx(&quot;h2&quot;, null, &quot;Video: The Life Changing Magic of Tidying Up | Marie Kondo | Talks at Google&quot;), mdx(&quot;iframe&quot;, {
    width: &quot;560&quot;,
    height: &quot;315&quot;,
    src: &quot;https://www.youtube.com/embed/w1-HMMX_NR8&quot;,
    title: &quot;YouTube video player&quot;,
    frameBorder: &quot;0&quot;,
    allow: &quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot;,
    allowFullScreen: true
  }));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Solenoids]]></title><description><![CDATA[Electrical components that act as magnets when carrying electricity]]></description><link>https://www.jamestharpe.com/solenoids/</link><guid isPermaLink="false">https://www.jamestharpe.com/solenoids/</guid><pubDate>Sat, 08 May 2021 17:20:43 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-05-08T17:20:43.000Z&quot;,
  &quot;description&quot;: &quot;Electrical components that act as magnets when carrying electricity&quot;,
  &quot;tags&quot;: [&quot;electrical-components&quot;],
  &quot;title&quot;: &quot;Solenoids&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Solenoids&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Solenoids&quot;), &quot; are &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../electrical-components/&quot;
  }, &quot;electrical components&quot;), &quot; that act as magnets when carrying &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../current/&quot;
  }, &quot;electrical current&quot;), &quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;Video: Solenoid Basics Explained&quot;), mdx(&quot;iframe&quot;, {
    width: &quot;560&quot;,
    height: &quot;315&quot;,
    src: &quot;https://www.youtube.com/embed/BbmocfETTFo&quot;,
    title: &quot;YouTube video player&quot;,
    frameBorder: &quot;0&quot;,
    allow: &quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot;,
    allowFullScreen: true
  }));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Conductance and Siemens]]></title><description><![CDATA[The ability to conduct to current, measured in siemens]]></description><link>https://www.jamestharpe.com/conductance/</link><guid isPermaLink="false">https://www.jamestharpe.com/conductance/</guid><pubDate>Sat, 08 May 2021 15:34:43 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-05-08T15:34:43.000Z&quot;,
  &quot;description&quot;: &quot;The ability to conduct to current, measured in siemens&quot;,
  &quot;tags&quot;: [&quot;electricity&quot;, &quot;si-units&quot;, &quot;resistance&quot;, &quot;current&quot;, &quot;voltage&quot;],
  &quot;title&quot;: &quot;Conductance and Siemens&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Conductance and Siemens&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Conductance&quot;), &quot; (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;G&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;G&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;G&quot;))))), &quot;) is the ability of a material to carry electricity, is &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../si-units/&quot;
  }, &quot;measured&quot;), &quot; in Siemens (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;S&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;S&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.05764em&quot;
    }
  }, &quot;S&quot;))))), &quot;), and defined indirectly by &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../ohms-law/&quot;
  }, &quot;Ohm&apos;s Law&quot;), &quot; as &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../current/&quot;
  }, &quot;current&quot;), &quot; (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;I&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;I&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.07847em&quot;
    }
  }, &quot;I&quot;))))), &quot;) over &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../voltage/&quot;
  }, &quot;voltage&quot;), &quot;, or &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;G&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;I&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;V&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;G = I/V&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;G&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.07847em&quot;
    }
  }, &quot;I&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.22222em&quot;
    }
  }, &quot;V&quot;))))), &quot;. The inverse of conductance is &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../resistance/&quot;
  }, &quot;resistance&quot;), &quot;.&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Conductors&quot;), &quot; are materials that carry electricity well, and thus have a high conductance (and thus a low resistance) value.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Managing Enterprise Initiatives]]></title><description><![CDATA[How to manage enterprise initiatives]]></description><link>https://www.jamestharpe.com/enterprise-initiatives/</link><guid isPermaLink="false">https://www.jamestharpe.com/enterprise-initiatives/</guid><pubDate>Tue, 04 May 2021 14:00:31 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-05-04T14:00:31.000Z&quot;,
  &quot;description&quot;: &quot;How to manage enterprise initiatives&quot;,
  &quot;redirect_from&quot;: [&quot;/enterprise-it-initiatives/&quot;],
  &quot;tags&quot;: [&quot;change-management&quot;],
  &quot;title&quot;: &quot;Managing Enterprise Initiatives&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Managing Enterprise Initiatives&quot;), mdx(&quot;p&quot;, null, &quot;Enterprise initiatives are infamous for causing confusion. The process of deciding on priorities, and integrating those priorities with ongoing efforts to support \&quot;the business\&quot; is fraught with competing perspectives, disorganization, miscommunication, and inconsistent implementations.&quot;), mdx(&quot;p&quot;, null, &quot;To help things go smoothly, each enterprise IT initiative should have a \&quot;home page\&quot; that is linked to in all formal communications about the initiative. The home page should, in turn, have as many of the following resources as possible:&quot;), mdx(&quot;table&quot;, null, mdx(&quot;thead&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;thead&quot;
  }, mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Asset&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Purpose&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Description&quot;))), mdx(&quot;tbody&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Dashboard&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Track overall progress&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Display attainment levels for objectives and key results, broken down by department then team&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Glossary&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Clearly define terminology&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Precise definitions of terms and measures of success&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Resources Directory&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Maximize utilization of all available resources&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Complete list of training materials, tools, and support-teams available to assist with the initiative&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Assessment&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Identify areas of risk and non-compliance&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;A workflow-driven series of questions designed to elicit next steps and identify risks&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Sample Plans&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Ensure scope and impact is fully accounted for across teams&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Examples of successful plans from early adopters, annotated with insights (e.g. expected vs. actual costs &amp; budgets) gained from the experience of execution&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Sample/templated Solutions&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Accelerate roll-out&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Code, tests, pipelines, scripts and other assets that can be easily adapted to specific team needs&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Training Materials&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Minimize risks inherent with new tools and methods&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;A list of available training resources, documentation, videos, and courses&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Historic References&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Accelerate planning and estimation&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Project summaries of completed initiatives of similar size and/or goals&quot;)))), mdx(&quot;p&quot;, null, &quot;Each asset should be cross-linked where possible. For example, the OKRs in the dashboard should link to the definitions in the glossary.&quot;), mdx(&quot;p&quot;, null, &quot;The key is to create discoverability and build awareness of the available resources, and plan to fill in gaps when they do not exist. Without coordinating on these resources, teams can invent hundreds of ways to solve a single problem, creating huge amounts of waste in the process.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Software Development Lifecycle (SDLC)]]></title><description><![CDATA[The lifecycle of software applications, from concept to revenue]]></description><link>https://www.jamestharpe.com/sdlc/</link><guid isPermaLink="false">https://www.jamestharpe.com/sdlc/</guid><pubDate>Tue, 04 May 2021 14:00:31 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-05-04T14:00:31.000Z&quot;,
  &quot;description&quot;: &quot;The lifecycle of software applications, from concept to revenue&quot;,
  &quot;tags&quot;: [&quot;software-engineering&quot;],
  &quot;title&quot;: &quot;Software Development Lifecycle (SDLC)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Software Development Lifecycle (SDLC)&quot;), mdx(&quot;p&quot;, null, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Software Development Lifecycle (SDLC)&quot;), &quot; is a process of conceiving, planning, building, deploying, using, and retiring software applications. SDLC methods can vary widely, but generally share goals around customer satisfaction, quality, and efficiency. The \&quot;best\&quot; SDLC is \&quot;what works for you\&quot; or \&quot;what works for your organization\&quot; and is dependent on a wide variety of factors such as industry, culture, and expertise.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Electrical Components]]></title><description><![CDATA[Building blocks for electrical circuits]]></description><link>https://www.jamestharpe.com/electrical-components/</link><guid isPermaLink="false">https://www.jamestharpe.com/electrical-components/</guid><pubDate>Fri, 23 Apr 2021 19:00:43 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-04-23T19:00:43.000Z&quot;,
  &quot;description&quot;: &quot;Building blocks for electrical circuits&quot;,
  &quot;tags&quot;: [&quot;circuits&quot;],
  &quot;title&quot;: &quot;Electrical Components&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Electrical Components&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Electrical components&quot;), &quot;, sometimes referred to as &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;electrical elements&quot;), &quot;, are the discreet parts of an &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../circuits/&quot;
  }, &quot;electrical circuit&quot;), &quot; that modify or manipulate the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../current/&quot;
  }, &quot;flow of electricity&quot;), &quot;. Components are made up of &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;terminals&quot;), &quot;, points where the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../conductance/&quot;
  }, &quot;conductors&quot;), &quot; come to an end (or \&quot;terminate\&quot;), and &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;leads&quot;), &quot;, conductors (typically wires or metals) which join two points electrically.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Resistors (Electrical Component)]]></title><description><![CDATA[Electrical components that resist the flow of electricity]]></description><link>https://www.jamestharpe.com/resistors/</link><guid isPermaLink="false">https://www.jamestharpe.com/resistors/</guid><pubDate>Fri, 23 Apr 2021 18:58:43 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-04-23T18:58:43.000Z&quot;,
  &quot;description&quot;: &quot;Electrical components that resist the flow of electricity&quot;,
  &quot;tags&quot;: [&quot;electrical-components&quot;, &quot;resistance&quot;],
  &quot;title&quot;: &quot;Resistors (Electrical Component)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Resistors&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Resistors&quot;), &quot; are &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../electrical-components/&quot;
  }, &quot;electrical components&quot;), &quot; that provide &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../resistance/&quot;
  }, &quot;resistance&quot;), &quot; in an &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../circuits/&quot;
  }, &quot;electrical circuit&quot;), &quot;. When resistors are arranged in series, the total resistance is the sum of all the resistors in the series. When arranged in parallel, the total resistance (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;R&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;R&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.00773em&quot;
    }
  }, &quot;R&quot;))))), &quot;) is the reciprocal of the sum of one over resistors in parallel, or &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;R&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;stretchy&quot;: &quot;false&quot;
  }, &quot;(&quot;), mdx(&quot;munder&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mo&quot;, {
    parentName: &quot;munder&quot;
  }, &quot;\u2211&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;munder&quot;
  }, &quot;i&quot;)), mdx(&quot;mfrac&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mfrac&quot;
  }, &quot;1&quot;), mdx(&quot;msub&quot;, {
    parentName: &quot;mfrac&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;msub&quot;
  }, &quot;R&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;msub&quot;
  }, &quot;i&quot;))), mdx(&quot;msup&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mo&quot;, {
    parentName: &quot;msup&quot;,
    &quot;stretchy&quot;: &quot;false&quot;
  }, &quot;)&quot;), mdx(&quot;mrow&quot;, {
    parentName: &quot;msup&quot;
  }, mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u2212&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;1&quot;)))), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;R = (\\sum\\limits_{i} \\frac{1}{R_i})^{-1}&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.00773em&quot;
    }
  }, &quot;R&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1.8227769999999999em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.977669em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mopen&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mop op-limits&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t vlist-t2&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.750005em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-2.122331em&quot;,
      &quot;marginLeft&quot;: &quot;0em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;3em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal mtight&quot;
  }, &quot;i&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.0000050000000003em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;3em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mop op-symbol small-op&quot;
  }, &quot;\u2211&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-s&quot;
  }, &quot;\u200B&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.977669em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;
  }))))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.16666666666666666em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mopen nulldelimiter&quot;
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mfrac&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t vlist-t2&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.845108em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-2.655em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;3em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal mtight&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.00773em&quot;
    }
  }, &quot;R&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t vlist-t2&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.3280857142857143em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-2.357em&quot;,
      &quot;marginLeft&quot;: &quot;-0.00773em&quot;,
      &quot;marginRight&quot;: &quot;0.07142857142857144em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.5em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size3 size1 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal mtight&quot;
  }, &quot;i&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-s&quot;
  }, &quot;\u200B&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.143em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;
  }))))))))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.23em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;3em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;frac-line&quot;,
    &quot;style&quot;: {
      &quot;borderBottomWidth&quot;: &quot;0.04em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.394em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;3em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;1&quot;))))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-s&quot;
  }, &quot;\u200B&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.44509999999999994em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;
  }))))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mclose nulldelimiter&quot;
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mclose&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mclose&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.063em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;\u2212&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;1&quot;))))))))))))), &quot; or &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;R&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;stretchy&quot;: &quot;false&quot;
  }, &quot;(&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;1&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;msub&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;msub&quot;
  }, &quot;R&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;msub&quot;
  }, &quot;1&quot;)), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;+&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;1&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;msub&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;msub&quot;
  }, &quot;R&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;msub&quot;
  }, &quot;2&quot;)), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;+&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;.&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;.&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;.&quot;), mdx(&quot;msup&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mo&quot;, {
    parentName: &quot;msup&quot;,
    &quot;stretchy&quot;: &quot;false&quot;
  }, &quot;)&quot;), mdx(&quot;mrow&quot;, {
    parentName: &quot;msup&quot;
  }, mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u2212&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;1&quot;)))), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;R = (1/R_1 + 1/R_2 + ...)^{-1}&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.00773em&quot;
    }
  }, &quot;R&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mopen&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.00773em&quot;
    }
  }, &quot;R&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t vlist-t2&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.30110799999999993em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-2.5500000000000003em&quot;,
      &quot;marginLeft&quot;: &quot;-0.00773em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;1&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-s&quot;
  }, &quot;\u200B&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.15em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;
  })))))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2222222222222222em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mbin&quot;
  }, &quot;+&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2222222222222222em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.00773em&quot;
    }
  }, &quot;R&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t vlist-t2&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.30110799999999993em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-2.5500000000000003em&quot;,
      &quot;marginLeft&quot;: &quot;-0.00773em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;2&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-s&quot;
  }, &quot;\u200B&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.15em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;
  })))))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2222222222222222em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mbin&quot;
  }, &quot;+&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2222222222222222em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1.064108em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mclose&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mclose&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.063em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;\u2212&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;1&quot;))))))))))))), &quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;Video: Series Resistors&quot;), mdx(&quot;iframe&quot;, {
    width: &quot;560&quot;,
    height: &quot;315&quot;,
    src: &quot;https://www.youtube.com/embed/P_SELh0dPW0&quot;,
    title: &quot;YouTube video player&quot;,
    frameBorder: &quot;0&quot;,
    allow: &quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot;,
    allowFullScreen: true
  }), mdx(&quot;h2&quot;, null, &quot;Video: Parallel Resistors&quot;), mdx(&quot;iframe&quot;, {
    width: &quot;560&quot;,
    height: &quot;315&quot;,
    src: &quot;https://www.youtube.com/embed/MHADYILlW1E&quot;,
    title: &quot;YouTube video player&quot;,
    frameBorder: &quot;0&quot;,
    allow: &quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot;,
    allowFullScreen: true
  }));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Electrical Circuits]]></title><description><![CDATA[Ways of assembling electronic elements]]></description><link>https://www.jamestharpe.com/circuits/</link><guid isPermaLink="false">https://www.jamestharpe.com/circuits/</guid><pubDate>Fri, 23 Apr 2021 18:40:41 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-04-23T18:40:41.000Z&quot;,
  &quot;description&quot;: &quot;Ways of assembling electronic elements&quot;,
  &quot;tags&quot;: [&quot;electrical-engineering&quot;, &quot;ohms-law&quot;],
  &quot;title&quot;: &quot;Electrical Circuits&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Electrical Circuits&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Circuits&quot;), &quot; are assemblies of &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../electrical-engineering/&quot;
  }, &quot;electronic&quot;), &quot; &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../electrical-components/&quot;
  }, &quot;components&quot;), &quot;. The &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../current/&quot;
  }, &quot;flow of electricity&quot;), &quot; through a circuit is described by &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../ohms-law/&quot;
  }, &quot;Ohm&apos;s Law&quot;), &quot;. Electricity flows through &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;nodes&quot;), &quot;, also called &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;junctions&quot;), &quot;, which are electrical connections between components. Nodes are made up of one or more &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;branches&quot;), &quot;, which are the the connections between the components that make up a node; branches and components are effectivly the same.&quot;), mdx(&quot;h2&quot;, null, &quot;Video: Circuit Terminology&quot;), mdx(&quot;iframe&quot;, {
    width: &quot;560&quot;,
    height: &quot;315&quot;,
    src: &quot;https://www.youtube.com/embed/-82UNytyrCQ&quot;,
    title: &quot;YouTube video player&quot;,
    frameBorder: &quot;0&quot;,
    allow: &quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot;,
    allowFullScreen: true
  }));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Chemistry]]></title><description><![CDATA[The composition, structure, and transformations of matter]]></description><link>https://www.jamestharpe.com/chemistry/</link><guid isPermaLink="false">https://www.jamestharpe.com/chemistry/</guid><pubDate>Fri, 23 Apr 2021 18:23:36 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-04-23T18:23:36.000Z&quot;,
  &quot;description&quot;: &quot;The composition, structure, and transformations of matter&quot;,
  &quot;tags&quot;: [&quot;science&quot;],
  &quot;title&quot;: &quot;Chemistry&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Chemistry&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Chemistry&quot;), &quot; is the branch of &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../science/&quot;
  }, &quot;science&quot;), &quot; that studies the composition, structure and transformations of matter.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Atoms]]></title><description><![CDATA[The basic units of chemical elements]]></description><link>https://www.jamestharpe.com/atoms/</link><guid isPermaLink="false">https://www.jamestharpe.com/atoms/</guid><pubDate>Fri, 23 Apr 2021 18:20:36 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-04-23T18:20:36.000Z&quot;,
  &quot;description&quot;: &quot;The basic units of chemical elements&quot;,
  &quot;tags&quot;: [&quot;chemistry&quot;],
  &quot;title&quot;: &quot;Atoms&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Atoms&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Atoms&quot;), &quot; are the basic units of chemical elements. Atoms themselves are made of positively &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../charge/&quot;
  }, &quot;charged&quot;), &quot; particles called protons, negatively charged particles called electrons, and neutrons which have atomic weight but no charge.&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Elements&quot;), &quot; are chemical substances composed of only one type of atom, whereas substances composed of multiple types of atoms are called &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;compounds&quot;), &quot;. &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Molecules&quot;), &quot; are the basic units of compounds and are made of two or more atoms. Matter made of multiple molecules is called a &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;mixture&quot;), &quot;.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Bureau International des Poids et Mesures (BIPM)]]></title><description><![CDATA[Keepers of SI Units and UTC time scale]]></description><link>https://www.jamestharpe.com/bipm/</link><guid isPermaLink="false">https://www.jamestharpe.com/bipm/</guid><pubDate>Thu, 22 Apr 2021 04:38:45 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;title&quot;: &quot;Bureau International des Poids et Mesures (BIPM)&quot;,
  &quot;date&quot;: &quot;2021-04-22T04:38:45.000Z&quot;,
  &quot;tags&quot;: [&quot;si-units&quot;],
  &quot;description&quot;: &quot;Keepers of SI Units and UTC time scale&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Bureau International des Poids et Mesures (BIPM)&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;BIPM&quot;), &quot; is an intergovernmental organization that maintains the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../si-units/&quot;
  }, &quot;international system of units&quot;), &quot; and international reference time scale (UTC).&quot;), mdx(&quot;h2&quot;, null, &quot;References&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.bipm.org/&quot;
  }, &quot;Official BIPM Website&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Internet Engineering Task Force (IETF)]]></title><description><![CDATA[A international standards body that develops open standards for the Internet]]></description><link>https://www.jamestharpe.com/ietf/</link><guid isPermaLink="false">https://www.jamestharpe.com/ietf/</guid><pubDate>Thu, 22 Apr 2021 04:38:45 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-04-22T04:38:45.000Z&quot;,
  &quot;description&quot;: &quot;A international standards body that develops open standards for the Internet&quot;,
  &quot;tags&quot;: [],
  &quot;title&quot;: &quot;Internet Engineering Task Force (IETF)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Internet Engineering Task Force (IETF)&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Internet Engineering Task Force (IETF)&quot;), &quot; is an international standards body that develops open standards for the Internet. The specification for each standard is published as a &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Request For Comments (RFC)&quot;), &quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;IETF Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.ietf.org/&quot;
  }, &quot;IETF Official Website&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[The Pomodoro Technique]]></title><description><![CDATA[A time management method for short-bursts of focus]]></description><link>https://www.jamestharpe.com/pomodoro/</link><guid isPermaLink="false">https://www.jamestharpe.com/pomodoro/</guid><pubDate>Thu, 22 Apr 2021 04:13:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-04-22T04:13:11.000Z&quot;,
  &quot;description&quot;: &quot;A time management method for short-bursts of focus&quot;,
  &quot;tags&quot;: [&quot;personal-productivity&quot;, &quot;timeboxing&quot;],
  &quot;title&quot;: &quot;The Pomodoro Technique&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;The Pomodoro Technique&quot;), mdx(&quot;div&quot;, {
    style: {
      &quot;float&quot;: &quot;right&quot;,
      border: &quot;solid&quot;,
      width: &quot;40%&quot;,
      padding: &quot;2em&quot;
    }
  }, mdx(&quot;h2&quot;, null, &quot;Pomodoro Timer&quot;), mdx(PomodoroTimer, {
    mdxType: &quot;PomodoroTimer&quot;
  })), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Pomodoro Technique&quot;), &quot; is a simple but effective technique for time management that uses short &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../timeboxing/&quot;
  }, &quot;timeboxes&quot;), &quot; and frequent breaks. It is an especially useful way to get through drudgery, reduce procrastination, and increase focus.&quot;), mdx(&quot;p&quot;, null, &quot;Here&apos;s how it works:&quot;), mdx(&quot;ol&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;Decide on a task&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;Set a timer for 25 minutes&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;Work on the task until the time goes off&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;Take a break for 5 minutes&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;Go back to step one&quot;)), mdx(&quot;p&quot;, null, &quot;After four cycles (about two hours), take a longer break of about 15 to 30 minutes.&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;mermaid&quot;
  }, &quot;graph TD\n\tDecide[\&quot;Decide on a&quot;, mdx(&quot;br&quot;, {
    parentName: &quot;div&quot;
  }), &quot;Task\&quot;] --&gt;\n\tWork[\&quot;Work the task&quot;, mdx(&quot;br&quot;, {
    parentName: &quot;div&quot;
  }), &quot;for 25 Minutes\&quot;] --&gt;\n\tCount{\&quot;Has it been&quot;, mdx(&quot;br&quot;, {
    parentName: &quot;div&quot;
  }), &quot;4 iterations?\&quot;} --&gt;\n\t|No| Break5[\&quot;Take a 5 minute&quot;, mdx(&quot;br&quot;, {
    parentName: &quot;div&quot;
  }), &quot;break\&quot;]\n\tCount --&gt; |Yes| Break15[\&quot;Take a 15&quot;, mdx(&quot;br&quot;, {
    parentName: &quot;div&quot;
  }), &quot;minute break\&quot;]\n\tBreak5 --&gt; Decide\n\tBreak15 --&gt; Decide&quot;), mdx(&quot;h2&quot;, null, &quot;Tips for Effective Pomodoro Iterations&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Avoid distractions: Silence your phone, close your door, and so on&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Keep a notepad to record other tasks that come to mind&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Adjust the times to suit your needs and tasks&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;If you&apos;re \&quot;in the zone\&quot; when it&apos;s break time, keep going!&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Move your body during breaks: Do a quick stretch, go for a walk, etc.&quot;)), mdx(&quot;h2&quot;, null, &quot;Animated Video: The Pomodoro Technique - A Study and Productivity Technique&quot;), mdx(&quot;iframe&quot;, {
    width: &quot;560&quot;,
    height: &quot;315&quot;,
    src: &quot;https://www.youtube.com/embed/AYR-RuGwJbM&quot;,
    title: &quot;YouTube video player&quot;,
    frameBorder: &quot;0&quot;,
    allow: &quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot;,
    allowFullScreen: true
  }));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Nonprofit Organizations]]></title><description><![CDATA[Institutions not intended to turn a profit]]></description><link>https://www.jamestharpe.com/nonprofits/</link><guid isPermaLink="false">https://www.jamestharpe.com/nonprofits/</guid><pubDate>Sat, 10 Apr 2021 20:47:43 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-04-10T20:47:43.000Z&quot;,
  &quot;description&quot;: &quot;Institutions not intended to turn a profit&quot;,
  &quot;tags&quot;: [],
  &quot;title&quot;: &quot;Nonprofit Organizations&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Nonprofit Organizations&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Charge and Coulombs]]></title><description><![CDATA[How force is exerted in electromagnetic field, measured in coulombs]]></description><link>https://www.jamestharpe.com/charge/</link><guid isPermaLink="false">https://www.jamestharpe.com/charge/</guid><pubDate>Sat, 10 Apr 2021 19:54:43 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-04-10T19:54:43.000Z&quot;,
  &quot;description&quot;: &quot;How force is exerted in electromagnetic field, measured in coulombs&quot;,
  &quot;tags&quot;: [&quot;electricity&quot;, &quot;electrical-engineering&quot;, &quot;si-units&quot;, &quot;atoms&quot;],
  &quot;title&quot;: &quot;Charge and Coulombs&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Charge and Coulombs (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;h1&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;C&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;C&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.07153em&quot;
    }
  }, &quot;C&quot;))))), &quot;)&quot;), mdx(&quot;p&quot;, null, &quot;Charge is the property of matter that causes &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../physics/&quot;
  }, &quot;force&quot;), &quot; to be exerted in an electromagnetic field. Protons are positively charged and electrons are negatively charged. Charge is measured in coulombs (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;C&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;C&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.07153em&quot;
    }
  }, &quot;C&quot;))))), &quot;). One &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;coulomb&quot;), &quot; is approximately equal to &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;6.2415090744&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u22C5&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;1&quot;), mdx(&quot;msup&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;0&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;18&quot;))), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;6.2415090744 \\cdot 10^{18}&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.64444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;6&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;4&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;5&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;9&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;7&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;4&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;4&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2222222222222222em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mbin&quot;
  }, &quot;\u22C5&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2222222222222222em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.063em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;8&quot;))))))))))))), &quot; elementary charges (i.e. &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../atoms/&quot;
  }, &quot;electrons or protons&quot;), &quot;). The charge of one electron is therefore &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u2212&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;1.602176565&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u22C5&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;1&quot;), mdx(&quot;msup&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;0&quot;), mdx(&quot;mrow&quot;, {
    parentName: &quot;msup&quot;
  }, mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u2212&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;19&quot;))), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;C&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;-1.602176565 \\cdot 10^{-19}C&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.72777em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.08333em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;\u2212&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;6&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;7&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;6&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;5&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;6&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;5&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2222222222222222em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mbin&quot;
  }, &quot;\u22C5&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2222222222222222em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.063em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;\u2212&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;9&quot;))))))))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.07153em&quot;
    }
  }, &quot;C&quot;))))), &quot;.&quot;), mdx(&quot;p&quot;, null, &quot;Coulombs form the basis for &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../current/&quot;
  }, &quot;amps&quot;), &quot;, which describe the amount of charge moving past a fixed point per second (the \&quot;flow\&quot;), and &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../voltage/&quot;
  }, &quot;volts&quot;), &quot;, which describe the difference in charge between two points. One coulomb is equal to one amp (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;A&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;A&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;A&quot;))))), &quot;) per second (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;s&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;s&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.43056em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;s&quot;))))), &quot;), or &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;C&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;A&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;s&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;C = A/s&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.07153em&quot;
    }
  }, &quot;C&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;A&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;s&quot;))))), &quot;, and one coulomb is equal to one joule per volt, or &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;C&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;J&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;V&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;C = J/V&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.07153em&quot;
    }
  }, &quot;C&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.09618em&quot;
    }
  }, &quot;J&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.22222em&quot;
    }
  }, &quot;V&quot;))))), &quot;.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Resistance and Ohms]]></title><description><![CDATA[Opposition to current, measured in ohms]]></description><link>https://www.jamestharpe.com/resistance/</link><guid isPermaLink="false">https://www.jamestharpe.com/resistance/</guid><pubDate>Sat, 10 Apr 2021 19:18:43 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-04-10T19:18:43.000Z&quot;,
  &quot;description&quot;: &quot;Opposition to current, measured in ohms&quot;,
  &quot;tags&quot;: [&quot;electricity&quot;, &quot;si-units&quot;, &quot;conductance&quot;, &quot;voltage&quot;, &quot;current&quot;],
  &quot;title&quot;: &quot;Resistance and Ohms&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Resistance and Ohms&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Resistance&quot;), &quot; is opposition to &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../current/&quot;
  }, &quot;current&quot;), &quot;, is measured in Ohms (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;\u03A9&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;\u03A9&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;\u03A9&quot;))))), &quot;), and defined by &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../ohms-law/&quot;
  }, &quot;Ohm&apos;s Law&quot;), &quot; as &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../voltage/&quot;
  }, &quot;voltage&quot;), &quot; over current, or &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;R&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;V&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;I&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;R = V/I&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.00773em&quot;
    }
  }, &quot;R&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.22222em&quot;
    }
  }, &quot;V&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.07847em&quot;
    }
  }, &quot;I&quot;))))), &quot;. The inverse of resistance is &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../conductance/&quot;
  }, &quot;conductance&quot;), &quot;.&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Resistors&quot;), &quot; are materials that resist the flow of electricity, and therefore have a high resistance (and thus a low conductance) value, hence the term &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../resistors/&quot;
  }, &quot;\&quot;resistor\&quot;&quot;), &quot; for the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../electrical-components/&quot;
  }, &quot;electrical component&quot;), &quot; which reduce current.&quot;), mdx(&quot;h2&quot;, null, &quot;History&quot;), mdx(&quot;p&quot;, null, &quot;The term \&quot;ohm\&quot; is named after &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://en.wikipedia.org/wiki/Georg_Ohm&quot;
  }, &quot;Georg Simon Ohm&quot;), &quot;, who first derived the relationships between current, voltage, and resistance now known as Ohm&apos;s Law.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Frequency and Hertz (Hz)]]></title><description><![CDATA[The number of times something happens per second]]></description><link>https://www.jamestharpe.com/frequency/</link><guid isPermaLink="false">https://www.jamestharpe.com/frequency/</guid><pubDate>Sat, 10 Apr 2021 19:15:22 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-04-10T19:15:22.000Z&quot;,
  &quot;description&quot;: &quot;The number of times something happens per second&quot;,
  &quot;tags&quot;: [&quot;si-units&quot;],
  &quot;title&quot;: &quot;Frequency and Hertz (Hz)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Frequency and Hertz (Hz)&quot;), mdx(&quot;p&quot;, null, &quot;Frequency is the number of times something happens within a unit of time. The &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../si-units/&quot;
  }, &quot;SI Unit&quot;), &quot; of measure for frequency is hertz (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;H&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;z&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;Hz&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.08125em&quot;
    }
  }, &quot;H&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.04398em&quot;
    }
  }, &quot;z&quot;))))), &quot;), which is equal to &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;1&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;s&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;1/s&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;s&quot;))))), &quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;Common Frequencies&quot;), mdx(&quot;table&quot;, null, mdx(&quot;thead&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;thead&quot;
  }, mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Item&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Frequency&quot;))), mdx(&quot;tbody&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Computer processor internal clock&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;3&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;G&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;H&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;z&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;3GHz&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;3&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;G&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.08125em&quot;
    }
  }, &quot;H&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.04398em&quot;
    }
  }, &quot;z&quot;))))))), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Human heartbeat&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;1&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;H&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;z&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;1Hz&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.08125em&quot;
    }
  }, &quot;H&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.04398em&quot;
    }
  }, &quot;z&quot;))))))))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Khan Academy]]></title><description><![CDATA[A nonprofit organization that provides free education online]]></description><link>https://www.jamestharpe.com/khan-academy/</link><guid isPermaLink="false">https://www.jamestharpe.com/khan-academy/</guid><pubDate>Sat, 10 Apr 2021 17:50:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-04-10T17:50:11.000Z&quot;,
  &quot;description&quot;: &quot;A nonprofit organization that provides free education online&quot;,
  &quot;tags&quot;: [&quot;nonprofits&quot;],
  &quot;title&quot;: &quot;Khan Academy&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Khan Academy&quot;), mdx(&quot;p&quot;, null, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://www.khanacademy.org/&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;a&quot;
  }, &quot;Khan Academy&quot;)), &quot; is a nonprofit organization that provides free courses in common academic subjects such as &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../math/&quot;
  }, &quot;math&quot;), &quot;, &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../science/&quot;
  }, &quot;science&quot;), &quot;, and &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../engineering/&quot;
  }, &quot;engineering&quot;), &quot;.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Scientific Notation]]></title><description><![CDATA[Expressions of very large and very small numbers in science and math]]></description><link>https://www.jamestharpe.com/scientific-notation/</link><guid isPermaLink="false">https://www.jamestharpe.com/scientific-notation/</guid><pubDate>Sat, 10 Apr 2021 17:40:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-04-10T17:40:11.000Z&quot;,
  &quot;description&quot;: &quot;Expressions of very large and very small numbers in science and math&quot;,
  &quot;tags&quot;: [&quot;science&quot;, &quot;math&quot;, &quot;si-units&quot;],
  &quot;title&quot;: &quot;Scientific Notation&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Scientific Notation&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Scientific Notation&quot;), &quot; is a way to express very small and very large numbers using exponents, and is useful for brevity and for comparing orders of magnitude between numbers.&quot;), mdx(&quot;p&quot;, null, &quot;To convert a number to scientific notation, it is rewritten to be greater than zero but less than ten multiplied by &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;10&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;10&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.64444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;))))), &quot; raised to some exponent.&quot;), mdx(&quot;p&quot;, null, &quot;Simple Examples:&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;99&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;separator&quot;: &quot;true&quot;
  }, &quot;,&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;000&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;99,000&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8388800000000001em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.19444em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;9&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;9&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mpunct&quot;
  }, &quot;,&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.16666666666666666em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;))))), &quot; expressed in scientific notation is &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;9.9&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u22C5&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;1&quot;), mdx(&quot;msup&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;0&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;4&quot;))), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;9.9 \\cdot 10^4&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.64444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;9&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;9&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2222222222222222em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mbin&quot;
  }, &quot;\u22C5&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2222222222222222em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.063em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;4&quot;)))))))))))), &quot;.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;0.00099&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;0.00099&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.64444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;9&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;9&quot;))))), &quot; expressed in scientific notation is &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;9.9&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u22C5&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;1&quot;), mdx(&quot;msup&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;0&quot;), mdx(&quot;mrow&quot;, {
    parentName: &quot;msup&quot;
  }, mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u2212&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;4&quot;)))), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;9.9 \\cdot 10^{-4}&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.64444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;9&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;9&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2222222222222222em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mbin&quot;
  }, &quot;\u22C5&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2222222222222222em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.063em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;\u2212&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;4&quot;))))))))))))))), mdx(&quot;p&quot;, null, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../si-units/&quot;
  }, &quot;SI number prefixes&quot;), &quot; are commonly used in lieu of scientific or &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../engineering-notation/&quot;
  }, &quot;engineering notation&quot;), &quot;. For example, rather than writing \&quot;&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;1.23&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u22C5&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;1&quot;), mdx(&quot;msup&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;0&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;3&quot;)), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;g&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;1.23 \\cdot 10^3g&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.64444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;3&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2222222222222222em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mbin&quot;
  }, &quot;\u22C5&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2222222222222222em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1.008548em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.19444em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.063em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;3&quot;)))))))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.03588em&quot;
    }
  }, &quot;g&quot;))))), &quot;\&quot; (grams), we can write \&quot;&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;1.23&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;k&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;g&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;1.23kg&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8888799999999999em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.19444em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;3&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.03148em&quot;
    }
  }, &quot;k&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.03588em&quot;
    }
  }, &quot;g&quot;))))), &quot;\&quot; (kilograms).&quot;), mdx(&quot;h2&quot;, null, &quot;Common large numbers expressed in scientific notation&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Avogadro&apos;s number&quot;), &quot; is &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;6.02214076&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u22C5&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;1&quot;), mdx(&quot;msup&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;0&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;23&quot;))), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;6.02214076 \\cdot 10^{23}&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.64444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;6&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;4&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;7&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;6&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2222222222222222em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mbin&quot;
  }, &quot;\u22C5&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2222222222222222em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.063em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;3&quot;))))))))))))), &quot;.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;The charge of an Electron is &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;0.6021766208&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u22C5&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;1&quot;), mdx(&quot;msup&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;0&quot;), mdx(&quot;mrow&quot;, {
    parentName: &quot;msup&quot;
  }, mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u2212&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;19&quot;)))), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;0.6021766208 \\cdot 10^{-19}&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.64444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;6&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;7&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;6&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;6&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;8&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2222222222222222em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mbin&quot;
  }, &quot;\u22C5&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2222222222222222em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.063em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;\u2212&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;9&quot;))))))))))))), &quot; &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;../charge/&quot;
  }, &quot;coulombs&quot;), &quot;.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;googol&quot;), &quot; is, a one followed by 100 zeros, is &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;1&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u22C5&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;1&quot;), mdx(&quot;msup&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;0&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;100&quot;))), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;1 \\cdot 10^{100}&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.64444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2222222222222222em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mbin&quot;
  }, &quot;\u22C5&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2222222222222222em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.063em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;0&quot;)))))))))))))), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;The &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;speed of light&quot;), &quot; is &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;2.99792458&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u22C5&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;1&quot;), mdx(&quot;msup&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;0&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;8&quot;))), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;2.99792458 \\cdot 10^8&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.64444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;9&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;9&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;7&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;9&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;4&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;5&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;8&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2222222222222222em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mbin&quot;
  }, &quot;\u22C5&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2222222222222222em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.063em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;8&quot;)))))))))))), &quot; meters per second.&quot;)), mdx(&quot;h2&quot;, null, &quot;Video: Introduction to scientific notation&quot;), mdx(&quot;iframe&quot;, {
    width: &quot;560&quot;,
    height: &quot;315&quot;,
    src: &quot;https://www.youtube.com/embed/trdbaV4TaAo&quot;,
    title: &quot;YouTube video player&quot;,
    frameBorder: &quot;0&quot;,
    allow: &quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot;,
    allowFullScreen: true
  }));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Engineering Notation]]></title><description><![CDATA[Expressions of very large and very small numbers for engineers]]></description><link>https://www.jamestharpe.com/engineering-notation/</link><guid isPermaLink="false">https://www.jamestharpe.com/engineering-notation/</guid><pubDate>Sat, 10 Apr 2021 17:38:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-04-10T17:38:11.000Z&quot;,
  &quot;description&quot;: &quot;Expressions of very large and very small numbers for engineers&quot;,
  &quot;tags&quot;: [&quot;engineering&quot;, &quot;scientific-notation&quot;, &quot;si-units&quot;],
  &quot;title&quot;: &quot;Engineering Notation&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Engineering Notation&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Engineering notation&quot;), &quot; is a form of &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../scientific-notation/&quot;
  }, &quot;scientific notation&quot;), &quot; used to express very small and very large numbers in engineering contexts. Whereas scientific notation formats numbers so that there is only one digit to the left of the decimal place, engineering notation expresses up to three digits to the left of the decimal place so long as the exponent is divisible by 3 (powers of 1,000).&quot;), mdx(&quot;p&quot;, null, &quot;To convert a number to engineering notation, the decimal point is moved three digits at a time. For example, the speed of light is &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;299&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;separator&quot;: &quot;true&quot;
  }, &quot;,&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;792&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;separator&quot;: &quot;true&quot;
  }, &quot;,&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;458&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;299,792,458&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8388800000000001em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.19444em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;9&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;9&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mpunct&quot;
  }, &quot;,&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.16666666666666666em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;7&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;9&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mpunct&quot;
  }, &quot;,&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.16666666666666666em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;4&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;5&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;8&quot;))))), &quot; meters per second, or &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;299.792458&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u22C5&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;1&quot;), mdx(&quot;msup&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;0&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;6&quot;))), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;299.792458 \\cdot 10^6&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.64444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;9&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;9&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;7&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;9&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;4&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;5&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;8&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2222222222222222em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mbin&quot;
  }, &quot;\u22C5&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2222222222222222em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.063em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;6&quot;)))))))))))), &quot; when written in engineering notation.&quot;), mdx(&quot;p&quot;, null, &quot;This format can sometimes be misleading about significant digits. Tolerance can be noted with the &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\xB1&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;\\pm&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.66666em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.08333em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;\xB1&quot;))))), &quot; sign, for example a large &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../ohms-law/&quot;
  }, &quot;resistance&quot;), &quot; value may be written as &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;34.5&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u22C5&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;1&quot;), mdx(&quot;msup&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;0&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;6&quot;)), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;\u03A9&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\xB1&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;1&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;%&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;34.5 \\cdot 10^6\u03A9 \\pm 1\\%&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.64444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;3&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;4&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;5&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2222222222222222em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mbin&quot;
  }, &quot;\u22C5&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2222222222222222em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.897438em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.08333em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.063em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;6&quot;)))))))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;\u03A9&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2222222222222222em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mbin&quot;
  }, &quot;\xB1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2222222222222222em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.80556em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.05556em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;%&quot;)))))), mdx(&quot;p&quot;, null, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../si-units/&quot;
  }, &quot;SI number prefixes&quot;), &quot; are commonly used in lieu of engineering or scientific notation. For example, rather than writing \&quot;&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;12.3&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u22C5&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;1&quot;), mdx(&quot;msup&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;0&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;3&quot;)), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;g&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;12.3 \\cdot 10^3g&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.64444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;3&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2222222222222222em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mbin&quot;
  }, &quot;\u22C5&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2222222222222222em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1.008548em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.19444em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.063em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;3&quot;)))))))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.03588em&quot;
    }
  }, &quot;g&quot;))))), &quot;\&quot; (grams), we can write \&quot;&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;12.3&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;k&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;g&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;12.3kg&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8888799999999999em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.19444em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;3&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.03148em&quot;
    }
  }, &quot;k&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.03588em&quot;
    }
  }, &quot;g&quot;))))), &quot;\&quot; (kilograms).&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[International System of Units (SI)]]></title><description><![CDATA[Formal terms and definitions of the metric system]]></description><link>https://www.jamestharpe.com/si-units/</link><guid isPermaLink="false">https://www.jamestharpe.com/si-units/</guid><pubDate>Sat, 10 Apr 2021 17:38:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-04-10T17:38:11.000Z&quot;,
  &quot;description&quot;: &quot;Formal terms and definitions of the metric system&quot;,
  &quot;tags&quot;: [&quot;engineering&quot;, &quot;science&quot;],
  &quot;title&quot;: &quot;International System of Units (SI)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;International System of Units (SI)&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;SI Units&quot;), &quot; are the formal terms, definitions, and symbols used in the metric system. SI units start from &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;base units&quot;), &quot; which are the axiomatic building blocks from which all other units, called &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;derived units&quot;), &quot;, are created.&quot;), mdx(&quot;p&quot;, null, &quot;Base units include standard measures for time (second), distance (meter), mass (kilogram), and more. Derived units combine base units, for example velocity (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;v&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;v&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.43056em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.03588em&quot;
    }
  }, &quot;v&quot;))))), &quot;) is distance (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;d&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;d&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.69444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;d&quot;))))), &quot;) over time (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;t&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;t&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.61508em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;t&quot;))))), &quot;), or &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;v&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;d&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;t&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;v=d/t&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.43056em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.03588em&quot;
    }
  }, &quot;v&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;d&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;t&quot;))))), &quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;SI Unit Prefixes&quot;), mdx(&quot;table&quot;, null, mdx(&quot;thead&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;thead&quot;
  }, mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Prefix&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Symbol&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Value&quot;))), mdx(&quot;tbody&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;tera&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;T&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;T&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.13889em&quot;
    }
  }, &quot;T&quot;)))))), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;1&quot;), mdx(&quot;msup&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;0&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;12&quot;))), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;10^{12}&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.063em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;2&quot;))))))))))))))), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;giga&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;G&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;G&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;G&quot;)))))), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;1&quot;), mdx(&quot;msup&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;0&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;9&quot;))), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;10^{9}&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.063em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;9&quot;))))))))))))))), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;mega&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;M&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;M&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.10903em&quot;
    }
  }, &quot;M&quot;)))))), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;1&quot;), mdx(&quot;msup&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;0&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;6&quot;))), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;10^{6}&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.063em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;6&quot;))))))))))))))), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;kilo&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;k&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;k&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.69444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.03148em&quot;
    }
  }, &quot;k&quot;)))))), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;1&quot;), mdx(&quot;msup&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;0&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;3&quot;))), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;10^{3}&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.063em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;3&quot;))))))))))))))), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;hecto&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;h&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;h&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.69444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;h&quot;)))))), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;1&quot;), mdx(&quot;msup&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;0&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;2&quot;))), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;10^{2}&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.063em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;2&quot;))))))))))))))), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;deca&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;h&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;h&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.69444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;h&quot;)))))), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;1&quot;), mdx(&quot;msup&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;0&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;1&quot;))), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;10^{1}&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.063em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;1&quot;))))))))))))))), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;deci&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;d&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;d&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.69444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;d&quot;)))))), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;1&quot;), mdx(&quot;msup&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;0&quot;), mdx(&quot;mrow&quot;, {
    parentName: &quot;msup&quot;
  }, mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u2212&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;1&quot;)))), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;10^{-1}&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.063em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;\u2212&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;1&quot;))))))))))))))), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;centi&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;d&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;d&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.69444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;d&quot;)))))), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;1&quot;), mdx(&quot;msup&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;0&quot;), mdx(&quot;mrow&quot;, {
    parentName: &quot;msup&quot;
  }, mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u2212&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;2&quot;)))), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;10^{-2}&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.063em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;\u2212&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;2&quot;))))))))))))))), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;milli&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;m&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;m&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.43056em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;m&quot;)))))), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;1&quot;), mdx(&quot;msup&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;0&quot;), mdx(&quot;mrow&quot;, {
    parentName: &quot;msup&quot;
  }, mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u2212&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;3&quot;)))), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;10^{-3}&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.063em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;\u2212&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;3&quot;))))))))))))))), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;micro&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u03BC&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;\u03BC&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.625em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.19444em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;\u03BC&quot;)))))), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;1&quot;), mdx(&quot;msup&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;0&quot;), mdx(&quot;mrow&quot;, {
    parentName: &quot;msup&quot;
  }, mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u2212&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;6&quot;)))), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;10^{-6}&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.063em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;\u2212&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;6&quot;))))))))))))))), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;nano&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;n&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;n&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.43056em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;n&quot;)))))), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;1&quot;), mdx(&quot;msup&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;0&quot;), mdx(&quot;mrow&quot;, {
    parentName: &quot;msup&quot;
  }, mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u2212&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;9&quot;)))), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;10^{-9}&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.063em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;\u2212&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;9&quot;))))))))))))))))), mdx(&quot;h2&quot;, null, &quot;SI Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.bipm.org/en/measurement-units/si-base-units&quot;
  }, &quot;BIPM: The SI Base Units&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Current and Amperes]]></title><description><![CDATA[The flow of electricity, measured in amps]]></description><link>https://www.jamestharpe.com/current/</link><guid isPermaLink="false">https://www.jamestharpe.com/current/</guid><pubDate>Sat, 10 Apr 2021 16:43:22 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-04-10T16:43:22.000Z&quot;,
  &quot;description&quot;: &quot;The flow of electricity, measured in amps&quot;,
  &quot;tags&quot;: [&quot;electricity&quot;, &quot;electrical-engineering&quot;, &quot;si-units&quot;, &quot;charge&quot;],
  &quot;title&quot;: &quot;Current and Amperes&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Flowing Electricity: Current and Amperes (amps)&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Current&quot;), &quot; (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;I&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;I&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.07847em&quot;
    }
  }, &quot;I&quot;))))), &quot;) is the \&quot;flow\&quot; of electricity, measured in amperes or \&quot;amps\&quot; (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;A&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;A&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;A&quot;))))), &quot;). One amp is equal to one coulomb (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;C&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;C&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.07153em&quot;
    }
  }, &quot;C&quot;))))), &quot;) passing a given point in a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../circuits/&quot;
  }, &quot;circuit&quot;), &quot; per second (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;s&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;s&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.43056em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;s&quot;))))), &quot;), or &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;A&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;C&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;s&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;A = {C}/{s}&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;A&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.07153em&quot;
    }
  }, &quot;C&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;s&quot;)))))), &quot;. &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../charge/&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;a&quot;
  }, &quot;Coulombs&quot;)), &quot; are the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../si-units/&quot;
  }, &quot;standard measure&quot;), &quot; of electrical charge quantity (i.e. electrons or protons).&quot;), mdx(&quot;p&quot;, null, &quot;Current can be derived by &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../ohms-law/&quot;
  }, &quot;Ohm&apos;s Law&quot;), &quot; as &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;I&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;V&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;R&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;I = V/R&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.07847em&quot;
    }
  }, &quot;I&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.22222em&quot;
    }
  }, &quot;V&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.00773em&quot;
    }
  }, &quot;R&quot;))))), &quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;Video: Current (Khan Academy)&quot;), mdx(&quot;iframe&quot;, {
    width: &quot;560&quot;,
    height: &quot;315&quot;,
    src: &quot;https://www.youtube.com/embed/ZRLXDiiUv8Q&quot;,
    title: &quot;YouTube video player&quot;,
    frameBorder: &quot;0&quot;,
    allow: &quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot;,
    allowFullScreen: true
  }), mdx(&quot;h2&quot;, null, &quot;Direction of Current&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Conventional current&quot;), &quot; is current that \&quot;flows\&quot; in the direction that the positive charge travels and is usually what&apos;s meant when talking about \&quot;current\&quot; without specifying the type of current. Current flows in the direction that the negative charge travels is usually referred to more explicitly as &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;electron current&quot;), &quot;.&quot;), mdx(&quot;p&quot;, null, &quot;In &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../electrical-engineering/&quot;
  }, &quot;electrical engineering&quot;), &quot;, contentional current is used for calculations even though currents are typically generated through the flow of electrons rather than protons.&quot;), mdx(&quot;p&quot;, null, &quot;Current can also \&quot;flow\&quot; in both directions simultaneously, such as in salt water. When salt is dissolved in water it forms free-floating sodium (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;N&quot;), mdx(&quot;msup&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;a&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;+&quot;))), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;Na^+&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.771331em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.10903em&quot;
    }
  }, &quot;N&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;a&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.771331em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.063em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mbin mtight&quot;
  }, &quot;+&quot;)))))))))))), &quot;) and chlorine (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;C&quot;), mdx(&quot;msup&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;l&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;\u2212&quot;))), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;Cl^-&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.771331em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.07153em&quot;
    }
  }, &quot;C&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.01968em&quot;
    }
  }, &quot;l&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.771331em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.063em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mbin mtight&quot;
  }, &quot;\u2212&quot;)))))))))))), &quot;) ions which will both respond to electric force, moving in opposite directions.&quot;), mdx(&quot;h2&quot;, null, &quot;History&quot;), mdx(&quot;p&quot;, null, &quot;Amperes are named after &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://en.wikipedia.org/wiki/Andr%C3%A9-Marie_Amp%C3%A8re&quot;
  }, &quot;Andr\xE9-Marie Amp\xE8r&quot;), &quot;, known for inventing the solenoid and electric telegraph.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Voltage and Volts]]></title><description><![CDATA[Electrical potential energy, measured in volts]]></description><link>https://www.jamestharpe.com/voltage/</link><guid isPermaLink="false">https://www.jamestharpe.com/voltage/</guid><pubDate>Sat, 10 Apr 2021 16:39:43 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-04-10T16:39:43.000Z&quot;,
  &quot;description&quot;: &quot;Electrical potential energy, measured in volts&quot;,
  &quot;tags&quot;: [&quot;electricity&quot;, &quot;electrical-engineering&quot;, &quot;si-units&quot;, &quot;charge&quot;],
  &quot;title&quot;: &quot;Voltage and Volts&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Stored Electricity: Voltage and Volts (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;h1&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;V&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;V&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.22222em&quot;
    }
  }, &quot;V&quot;))))), &quot;)&quot;), mdx(&quot;p&quot;, null, &quot;Stored electricity is called voltage and is measured in volts. More precisely, &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;voltage&quot;), &quot; is the difference in electric potential energy between two points.&quot;), mdx(&quot;p&quot;, null, &quot;One &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;volt&quot;), &quot; is equal to 1 joule (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;J&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;J&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.09618em&quot;
    }
  }, &quot;J&quot;))))), &quot;, see &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../physics/&quot;
  }, &quot;physics&quot;), &quot;) per 1 coulomb (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;C&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;C&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.07153em&quot;
    }
  }, &quot;C&quot;))))), &quot;), or &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;V&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mfrac&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mfrac&quot;
  }, &quot;J&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mfrac&quot;
  }, &quot;C&quot;))), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;V = \\frac{J}{C}&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.22222em&quot;
    }
  }, &quot;V&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1.217331em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.345em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mopen nulldelimiter&quot;
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mfrac&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t vlist-t2&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.872331em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-2.6550000000000002em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;3em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal mtight&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.07153em&quot;
    }
  }, &quot;C&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.23em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;3em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;frac-line&quot;,
    &quot;style&quot;: {
      &quot;borderBottomWidth&quot;: &quot;0.04em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.394em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;3em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal mtight&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.09618em&quot;
    }
  }, &quot;J&quot;))))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-s&quot;
  }, &quot;\u200B&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.345em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;
  }))))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mclose nulldelimiter&quot;
  })))))), &quot;. A &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../charge/&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;a&quot;
  }, &quot;coulomb&quot;)), &quot; is a quantity of electrical charge (i.e. electrons or protons). Volts can also be expressed in terms of &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../watts-law/&quot;
  }, &quot;watts&quot;), &quot; and &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../current/&quot;
  }, &quot;amps&quot;), &quot;: &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;V&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;W&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;A&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;V=W/A&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.22222em&quot;
    }
  }, &quot;V&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.13889em&quot;
    }
  }, &quot;W&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;A&quot;))))), &quot;.&quot;), mdx(&quot;p&quot;, null, &quot;Another way to put it is, a volt is the amount of electricity required to accelerate 1kg by 1 meter per second squared (a joule) for 1 second (resulting in a displacement of &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;1&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;m&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;1m&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.64444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;m&quot;))))), &quot;), divided by the quantity of electrical charges (coulombs). In other words, a volt is \&quot;how much work can be done per coulomb\&quot;.&quot;), mdx(&quot;p&quot;, null, &quot;Voltage can be derived by &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../ohms-law/&quot;
  }, &quot;Ohm&apos;s Law&quot;), &quot; as &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;V&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;I&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;R&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;V = IR&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.22222em&quot;
    }
  }, &quot;V&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.07847em&quot;
    }
  }, &quot;I&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.00773em&quot;
    }
  }, &quot;R&quot;))))), &quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;Common Voltages&quot;), mdx(&quot;table&quot;, null, mdx(&quot;thead&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;thead&quot;
  }, mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Source&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Voltage&quot;))), mdx(&quot;tbody&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;AA Battery&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;1.5&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;V&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;1.5V&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;5&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.22222em&quot;
    }
  }, &quot;V&quot;))))))), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Car battery&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;12&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;V&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;12V&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.22222em&quot;
    }
  }, &quot;V&quot;))))))), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Wall socket&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;110&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;V&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;110V&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.22222em&quot;
    }
  }, &quot;V&quot;))))), &quot; or &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;220&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;V&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;220V&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.22222em&quot;
    }
  }, &quot;V&quot;))))))))), mdx(&quot;h2&quot;, null, &quot;Video: Voltage (Khan Academy)&quot;), mdx(&quot;iframe&quot;, {
    width: &quot;560&quot;,
    height: &quot;315&quot;,
    src: &quot;https://www.youtube.com/embed/k9SwNST1eW0&quot;,
    title: &quot;YouTube video player&quot;,
    frameBorder: &quot;0&quot;,
    allow: &quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot;,
    allowFullScreen: true
  }), mdx(&quot;h2&quot;, null, &quot;History&quot;), mdx(&quot;p&quot;, null, &quot;Volts and voltage are both named after &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://en.wikipedia.org/wiki/Alessandro_Volta&quot;
  }, &quot;Alessandro Volta&quot;), &quot;, who invented the first battery in 1800.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[SPACE Framework]]></title><description><![CDATA[SPACE Framework to Measure Developer Productivity: Satisfaction, Performance, Activity, Communication]]></description><link>https://www.jamestharpe.com/space-framework/</link><guid isPermaLink="false">https://www.jamestharpe.com/space-framework/</guid><pubDate>Thu, 08 Apr 2021 15:26:07 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-04-08T15:26:07.000Z&quot;,
  &quot;description&quot;: &quot;SPACE Framework to Measure Developer Productivity: Satisfaction, Performance, Activity, Communication&quot;,
  &quot;tags&quot;: [&quot;software-engineering&quot;, &quot;management&quot;, &quot;data-analysis&quot;],
  &quot;title&quot;: &quot;SPACE Framework&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;SPACE Framework&quot;), mdx(&quot;p&quot;, null, &quot;Developer productivity is notoriously difficult to measure, perhaps because there are so many tantalizing metrics that can be extracted from code, software, and project management tools. The &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;SPACE Framework&quot;), &quot; defines a wholistic approach to measuring productivity by demystifying common misconceptions of productivity measurement and providing a set of measurements and interpretive guidance for understanding productivity.&quot;), mdx(&quot;h2&quot;, null, &quot;Dispelled Myths&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Developer activity does not predict positive outcomes&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;High-performing individuals can comprise a low-performing team&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Productivity cannot be reduced to a single metric&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Productivity measures are helpful to individual contributors, not just managers&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Humans are an important source of data, not just tools&quot;)), mdx(&quot;h2&quot;, null, &quot;Developer Productivity Measures&quot;), mdx(&quot;h3&quot;, null, &quot;Satisfaction and Well-Being&quot;), mdx(&quot;p&quot;, null, &quot;Productivity and job satisfaction are strongly correlated according to the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://ieeexplore.ieee.org/document/8643844&quot;
  }, &quot;What Predicts Software Developers&apos; Productivity&quot;), &quot; paper published in 2019 by the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://www.ieee.org/&quot;
  }, &quot;IEEE&quot;), &quot;.&quot;), mdx(&quot;p&quot;, null, &quot;Employee satisfaction is most commonly measured through qualitative surveys and should target:&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Overall satisfaction: Would developers recommend their company and team to others as a place to work?&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Developer efficacy: Do developers have to resources and agency to do the right work in the right way?&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Burnout: Are developers exhausted by excessive, prolonged stress at work?&quot;)), mdx(&quot;h3&quot;, null, &quot;Performance&quot;), mdx(&quot;p&quot;, null, &quot;Performance is based on outcomes, rather than output, which can make individual contributions difficult to measure. When it comes to code, quantity does not equate to quality. When it comes to business, successful execution of a project plan does not equate to customer value.&quot;), mdx(&quot;p&quot;, null, &quot;Performance can be measured through quality metrics and business outcomes, including:&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Customer satisfaction&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Feature adoption, retention, and utilization&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Cost reductions&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Defect rates&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;SLA/SLO objectives such as up-time, response-time, etc.&quot;)), mdx(&quot;h2&quot;, null, &quot;Activity&quot;), mdx(&quot;p&quot;, null, &quot;Activity counts the actions and outputs performed by an individual or team. The value of such measures is limited and can only be understood in context of the other measures, but can provide value as a starting point for new insights, such as &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../five-whys/&quot;
  }, &quot;five whys&quot;), &quot;.&quot;), mdx(&quot;p&quot;, null, &quot;Examples of activity:&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Commits and merge requests&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Deployments&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Tests implemented/executed&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Documentation&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;User stories entered/completed&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Incident responses&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;On-call participation&quot;)), mdx(&quot;p&quot;, null, &quot;The SPACE Framework warns these measures \&quot;should never be used in isolation to make decisions about individual or team productivity because of their known limitations.\&quot;&quot;), mdx(&quot;h2&quot;, null, &quot;Communication and Collaboration&quot;), mdx(&quot;p&quot;, null, &quot;Effective communication and the ability to collaborate are key to identifying the right problems to work on, and implementing solutions effectively. To work together, teams require awareness of tasks and priorities, transparency of information and processes, and discoverability for the effective flow of information.&quot;), mdx(&quot;p&quot;, null, &quot;Communication and collaboration are difficult to measure, however valuable insights are still possible:&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Documentation discoverability and accuracy&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Peer reviews of work contributions&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Network metrics (who interacts with whom and how)&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;On-boarding time and experience of new team members&quot;)), mdx(&quot;h2&quot;, null, &quot;Efficiency and Flow&quot;), mdx(&quot;p&quot;, null, &quot;Efficiency and flow is a measure of the interruptions and delays (or lack thereof) to progress. Developers are known to talk about the importance of reaching and maintaining a \&quot;state of flow\&quot;.&quot;), mdx(&quot;p&quot;, null, &quot;Efficiency and Flow can be measured through:&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Number of handoffs in a process or across teams&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Developers&apos; perceived ability to reach and maintain \&quot;flow\&quot; to complete work&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;The count, duration, and frequency of interruptions&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Lead and cycle time of project work and defects&quot;)), mdx(&quot;h2&quot;, null, &quot;References&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://queue.acm.org/detail.cfm?id=3454124&quot;
  }, &quot;The SPACE of Developer Productivity on ACM Queue&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Levers]]></title><description><![CDATA[Learn about levers, fulcrums, effort arms, and resistance arms]]></description><link>https://www.jamestharpe.com/levers/</link><guid isPermaLink="false">https://www.jamestharpe.com/levers/</guid><pubDate>Sun, 14 Mar 2021 20:55:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-03-14T20:55:11.000Z&quot;,
  &quot;description&quot;: &quot;Learn about levers, fulcrums, effort arms, and resistance arms&quot;,
  &quot;tags&quot;: [&quot;simple-machines&quot;],
  &quot;title&quot;: &quot;Levers&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Levers&quot;), mdx(&quot;p&quot;, null, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;lever&quot;), &quot; consists of a fulcrum, a force or effort, and a resistance. The fulcrum is the point at which the lever pivots, the effort is the point at which force is applied, and the resistance is where the work output is done. The distance from the fulcrum to the effort is called the &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;effort arm&quot;), &quot;, and the length from the fulcrum to the resistance is referred to as the &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;resistance arm&quot;), &quot;.&quot;), mdx(&quot;p&quot;, null, &quot;Levers come in three classes: A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;first class lever&quot;), &quot; situates the fulcrum between the effort and the resistance, for example a seesaw. A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;second class lever&quot;), &quot; situates the resistance between the fulcrum and the effort, such as a wheelbarrow. A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;third class lever&quot;), &quot; situates the effort between the fulcrum and the resistance, such as a fishing pole.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Simple Machines]]></title><description><![CDATA[The most basic forms of machine: Levers, pulleys, wheels, inclined planes, screws, and wedges]]></description><link>https://www.jamestharpe.com/simple-machines/</link><guid isPermaLink="false">https://www.jamestharpe.com/simple-machines/</guid><pubDate>Sun, 14 Mar 2021 20:28:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-03-14T20:28:11.000Z&quot;,
  &quot;description&quot;: &quot;The most basic forms of machine: Levers, pulleys, wheels, inclined planes, screws, and wedges&quot;,
  &quot;tags&quot;: [&quot;mechanical-engineering&quot;],
  &quot;title&quot;: &quot;Simple Machines&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Simple Machines&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Simple machines&quot;), &quot; are the most basic forms of machines. Though &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../physics/&quot;
  }, &quot;physics&quot;), &quot; only recognizes the lever and the inclined plane as the basis for all machines, &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../mechanical-engineering/&quot;
  }, &quot;mechanical engineers&quot;), &quot; tend to think in terms of six simple machines: the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../levers/&quot;
  }, &quot;lever&quot;), &quot;, the block and tackle (pulley), the wheel and axel, the inclined plane, the screw, and the wedge.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Engineering]]></title><description><![CDATA[Apply science to create technology]]></description><link>https://www.jamestharpe.com/engineering/</link><guid isPermaLink="false">https://www.jamestharpe.com/engineering/</guid><pubDate>Sun, 14 Mar 2021 20:18:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-03-14T20:18:11.000Z&quot;,
  &quot;description&quot;: &quot;Apply science to create technology&quot;,
  &quot;tags&quot;: [&quot;science&quot;],
  &quot;title&quot;: &quot;Engineering&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Engineering&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Engineering&quot;), &quot; is the application of science to create machines, processes, and tools that serve some intention.&quot;), mdx(&quot;h2&quot;, null, &quot;Engineering YouTube Channels&quot;), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;Note: I don&apos;t update this list very often. If you notice an issue or would like to make a suggestion, &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://github.com/jamestharpe/jamestharpe.com/issues/new&quot;
  }, &quot;open an issue on GitHub&quot;), &quot; and I&apos;ll respond.&quot;)), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCu6mSoMNzHQiBIOCkHUa2Aw&quot;
  }, &quot;Cody&apos;s Lab&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCk0fGHsCEzGig-rSzkfCjMw&quot;
  }, &quot;The Engineering Mindset&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCqZQJ4600a9wIfMPbYc60OQ&quot;
  }, &quot;Lesics&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCY1kMZp36IQSyNx_9h4mpCg&quot;
  }, &quot;Mark Rober&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCMOqf8ab-42UUQIdVoKwjlQ&quot;
  }, &quot;Practical Engineering&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCR1IuLEqb6UEA_zQ81kwXfg&quot;
  }, &quot;Real Engineering&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UC6107grRI4m0o2-emgoDnAA&quot;
  }, &quot;Smarter Every Day&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCj1VqrHhDte54oLgPG4xpuQ&quot;
  }, &quot;Stuff Made Here&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Headless Chrome]]></title><description><![CDATA[A Chrome browser useful for automated testing]]></description><link>https://www.jamestharpe.com/headless-chrome/</link><guid isPermaLink="false">https://www.jamestharpe.com/headless-chrome/</guid><pubDate>Wed, 10 Mar 2021 20:17:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-03-10T20:17:11.000Z&quot;,
  &quot;description&quot;: &quot;A Chrome browser useful for automated testing&quot;,
  &quot;tags&quot;: [&quot;web-dev&quot;],
  &quot;title&quot;: &quot;Headless Chrome&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Headless Chrome&quot;), mdx(&quot;p&quot;, null, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://chromium.googlesource.com/chromium/src/+/lkgr/headless/&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;a&quot;
  }, &quot;Headless Chrome&quot;)), &quot; is a version of Google Chrome that that can run in a headless (UI-less) environment, such as on a server. It&apos;s useful for automation tasks, especially test automation.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Debian Linux Distribution]]></title><description><![CDATA[A popular distribution to base other distributions on]]></description><link>https://www.jamestharpe.com/debian/</link><guid isPermaLink="false">https://www.jamestharpe.com/debian/</guid><pubDate>Wed, 10 Mar 2021 20:09:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-03-10T20:09:11.000Z&quot;,
  &quot;description&quot;: &quot;A popular distribution to base other distributions on&quot;,
  &quot;tags&quot;: [&quot;linux&quot;],
  &quot;title&quot;: &quot;Debian Linux Distribution&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Debian&quot;), mdx(&quot;p&quot;, null, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://ubuntu.com/&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;a&quot;
  }, &quot;Ubuntu&quot;)), &quot; is a Debian-based Linux distribution, popular for desktop and cloud-computing applications.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Ubuntu Linux Distribution]]></title><description><![CDATA[A Debian-based Linux distribution]]></description><link>https://www.jamestharpe.com/ubuntu/</link><guid isPermaLink="false">https://www.jamestharpe.com/ubuntu/</guid><pubDate>Wed, 10 Mar 2021 20:03:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-03-10T20:03:11.000Z&quot;,
  &quot;description&quot;: &quot;A Debian-based Linux distribution&quot;,
  &quot;tags&quot;: [&quot;linux&quot;, &quot;debian&quot;],
  &quot;title&quot;: &quot;Ubuntu Linux Distribution&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Ubuntu&quot;), mdx(&quot;p&quot;, null, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://www.debian.org/&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;a&quot;
  }, &quot;Debian&quot;)), &quot; is a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../linux-file-system/&quot;
  }, &quot;Linux&quot;), &quot; distribution, popular for PC and server applications and as the basis for other Linux distributions.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Cross-Origin Resource Sharing (CORS)]]></title><description><![CDATA[A security mechanism for servers to indicate valid resource origins for HTTP requests]]></description><link>https://www.jamestharpe.com/cors/</link><guid isPermaLink="false">https://www.jamestharpe.com/cors/</guid><pubDate>Mon, 08 Mar 2021 15:09:30 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-03-08T15:09:30.000Z&quot;,
  &quot;description&quot;: &quot;A security mechanism for servers to indicate valid resource origins for HTTP requests&quot;,
  &quot;tags&quot;: [&quot;web-dev&quot;],
  &quot;title&quot;: &quot;Cross-Origin Resource Sharing (CORS)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Cross-Origin Resource Sharing (CORS)&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Cross-Origin Resource Sharing&quot;), &quot;, or simply &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;CORS&quot;), &quot;, is a security mechanism that allows servers to use HTTP headers to indicate to clients origins it deems valid. Client applications, typically web browsers, then permit or deny loading resources from origins.&quot;), mdx(&quot;h2&quot;, null, &quot;CORS Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS&quot;
  }, &quot;CORS on MDN&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA['Maybe' (taoist story)]]></title><description><![CDATA[A Taoist story from the lectures of Alan Watts]]></description><link>https://www.jamestharpe.com/maybe-story/</link><guid isPermaLink="false">https://www.jamestharpe.com/maybe-story/</guid><pubDate>Mon, 08 Mar 2021 15:09:10 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-03-08T15:09:10.000Z&quot;,
  &quot;description&quot;: &quot;A Taoist story from the lectures of Alan Watts&quot;,
  &quot;tags&quot;: [&quot;taoism&quot;],
  &quot;title&quot;: &quot;&apos;Maybe&apos; (taoist story)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Maybe, as told by Alan Watts&quot;), mdx(&quot;iframe&quot;, {
    width: &quot;560&quot;,
    height: &quot;315&quot;,
    src: &quot;https://www.youtube.com/embed/OX0OARBqBp0&quot;,
    title: &quot;YouTube video player&quot;,
    frameBorder: &quot;0&quot;,
    allow: &quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot;,
    allowFullScreen: true
  }), mdx(&quot;h2&quot;, null, &quot;Transcript&quot;), mdx(&quot;p&quot;, null, &quot;Once upon a time there was a Chinese farmer who lost a horse. It ran away. And all the neighbors came around that evening and said \&quot;that&apos;s too bad.\&quot;&quot;), mdx(&quot;p&quot;, null, &quot;And he said \&quot;maybe.\&quot;&quot;), mdx(&quot;p&quot;, null, &quot;The next day the horse came back and brought several wild horses with it. And all the neighbors came around and said, \&quot;wow, that&apos;s great isn&apos;t it!\&quot;&quot;), mdx(&quot;p&quot;, null, &quot;And he said \&quot;maybe.\&quot;&quot;), mdx(&quot;p&quot;, null, &quot;The next day his son was attempting to taim one of these horses and was riding it when he was thrown and broke his leg. And all the neighbors came around in the evening and said, \&quot;well that&apos;s too bad isn&apos;t it.\&quot;&quot;), mdx(&quot;p&quot;, null, &quot;And the farmer said, \&quot;maybe.\&quot;&quot;), mdx(&quot;p&quot;, null, &quot;And the next day the conscription officers came around looking for people for the army. And they rejected his son because he had a broken leg. And all the neighbors came around that evening and said, \&quot;isn&apos;t that wonderful!\&quot;&quot;), mdx(&quot;p&quot;, null, &quot;And he said, \&quot;maybe.\&quot;&quot;), mdx(&quot;p&quot;, null, &quot;The whole process of nature is an integrated process of immense complexity, and it\u2019s really impossible to tell whether anything that happens in it is good or bad \u2014 because you never know what will be the consequence of the misfortune; or, you never know what will be the consequences of good fortune.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Web Development]]></title><description><![CDATA[Tools and techniques for building websites and web-applications]]></description><link>https://www.jamestharpe.com/web-dev/</link><guid isPermaLink="false">https://www.jamestharpe.com/web-dev/</guid><pubDate>Mon, 08 Mar 2021 15:09:10 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-03-08T15:09:10.000Z&quot;,
  &quot;description&quot;: &quot;Tools and techniques for building websites and web-applications&quot;,
  &quot;tags&quot;: [&quot;software-engineering&quot;],
  &quot;title&quot;: &quot;Web Development&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Web Development&quot;), mdx(&quot;h2&quot;, null, &quot;Web Development News and Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCJZv4d5rbIKd4QHMPkcABCw&quot;
  }, &quot;Kevin Powell&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Operating Systems]]></title><description><![CDATA[Knowledge about Operating Systems]]></description><link>https://www.jamestharpe.com/operating-systems/</link><guid isPermaLink="false">https://www.jamestharpe.com/operating-systems/</guid><pubDate>Mon, 08 Mar 2021 14:36:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-03-08T14:36:11.000Z&quot;,
  &quot;description&quot;: &quot;Knowledge about Operating Systems&quot;,
  &quot;tags&quot;: [&quot;computer-science&quot;],
  &quot;title&quot;: &quot;Operating Systems&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Operating Systems&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Minicom]]></title><description><![CDATA[A text-based modem control program for Linux and other unix-like operating systems]]></description><link>https://www.jamestharpe.com/minicom/</link><guid isPermaLink="false">https://www.jamestharpe.com/minicom/</guid><pubDate>Mon, 08 Mar 2021 14:33:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-03-08T14:33:11.000Z&quot;,
  &quot;description&quot;: &quot;A text-based modem control program for Linux and other unix-like operating systems&quot;,
  &quot;tags&quot;: [&quot;linux&quot;],
  &quot;title&quot;: &quot;Minicom&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Minicom&quot;), mdx(&quot;p&quot;, null, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://salsa.debian.org/minicom-team/minicom&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;a&quot;
  }, &quot;Minicom&quot;)), &quot; is a text-based modem control program for &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../linux/&quot;
  }, &quot;Linux&quot;), &quot; and other unix-like &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../operating-systems/&quot;
  }, &quot;operating systems&quot;), &quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;How to Exit Minicom&quot;), mdx(&quot;p&quot;, null, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;Ctrl+A&quot;), &quot;, &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;x&quot;), &quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;Minicom Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://help.ubuntu.com/community/Minicom&quot;
  }, &quot;Ubuntu Minicom Documentation&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Relays]]></title><description><![CDATA[Learn about relays]]></description><link>https://www.jamestharpe.com/relays/</link><guid isPermaLink="false">https://www.jamestharpe.com/relays/</guid><pubDate>Mon, 08 Mar 2021 14:11:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-03-08T14:11:11.000Z&quot;,
  &quot;description&quot;: &quot;Learn about relays&quot;,
  &quot;tags&quot;: [&quot;electrical-engineering&quot;],
  &quot;title&quot;: &quot;Relays&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h2&quot;, null, &quot;Relay&quot;), mdx(&quot;p&quot;, null, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;relay&quot;), &quot; is a switch that can be &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../electrical-engineering/&quot;
  }, &quot;electronically&quot;), &quot; controlled to open or close a circuit.&quot;), mdx(&quot;p&quot;, null, &quot;Generally speaking, relays consist of an electromagnet, a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../mechanical-engineering/&quot;
  }, &quot;mechanically movable&quot;), &quot; contact, switching points, and a spring. An electrical signal is then used to activate the electromagnet which opens or closes the circuit; when the signal is turned off the electromagnet deactivates and the spring returns the circuit to its original position.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Actor Model]]></title><description><![CDATA[A model where an actor is the fundamental unit of computation including processing, storage, and communication]]></description><link>https://www.jamestharpe.com/actor-model/</link><guid isPermaLink="false">https://www.jamestharpe.com/actor-model/</guid><pubDate>Mon, 08 Mar 2021 14:09:46 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-03-08T14:09:46.000Z&quot;,
  &quot;description&quot;: &quot;A model where an actor is the fundamental unit of computation including processing, storage, and communication&quot;,
  &quot;tags&quot;: [&quot;computer-science&quot;],
  &quot;title&quot;: &quot;Actor Model&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Actor Model&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;actor model&quot;), &quot; is a model for computation in which the \&quot;actor\&quot; is the primitive element of system design (in the actor model, \&quot;everything is an actor\&quot;). Each actor embodies processing, storage, and communication for a specific purpose.&quot;), mdx(&quot;p&quot;, null, &quot;Each actor in a system can:&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Send messages to other actors&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Create additional actors&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Change internal state&quot;)), mdx(&quot;p&quot;, null, &quot;Each actor has an address to which messages can be sent. A single address can represent multiple actors or a single actor can have multiple addresses.&quot;), mdx(&quot;p&quot;, null, &quot;Messages are delivered at most one time, and the order of delivery is not guaranteed; however, a message can contain an ordered sequence. Additionally, &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;futures&quot;), &quot; are actors that represents a computation result, potentially before it is computed, so that computation results can be made available at the time of need.&quot;), mdx(&quot;h2&quot;, null, &quot;Video: Hewitt Meijer, and Szyperski: The Actor Model (everything you wanted to know)&quot;), mdx(&quot;iframe&quot;, {
    width: &quot;560&quot;,
    height: &quot;315&quot;,
    src: &quot;https://www.youtube.com/embed/1zVdhDx7Tbs&quot;,
    frameBorder: &quot;0&quot;,
    allow: &quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot;,
    allowFullScreen: true
  }));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Modify Response Headers in Angular Proxy (ng serve)]]></title><description><![CDATA[Use 'bypass' to modify request and response headers in the Angular Proxy]]></description><link>https://www.jamestharpe.com/angular-proxy-set-response-headers/</link><guid isPermaLink="false">https://www.jamestharpe.com/angular-proxy-set-response-headers/</guid><pubDate>Thu, 04 Mar 2021 18:51:10 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-03-04T18:51:10.000Z&quot;,
  &quot;description&quot;: &quot;Use &apos;bypass&apos; to modify request and response headers in the Angular Proxy&quot;,
  &quot;tags&quot;: [&quot;angular&quot;],
  &quot;title&quot;: &quot;Modify Response Headers in Angular Proxy (ng serve)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Modify Response Headers in Angular Proxy (&quot;, mdx(&quot;code&quot;, {
    parentName: &quot;h1&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;ng serve&quot;), &quot;)&quot;), mdx(&quot;p&quot;, null, &quot;Angular includes the ability to &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://angular.io/guide/build#proxying-to-a-backend-server&quot;
  }, &quot;proxy requests to back-end servers&quot;), &quot;. This feature can also be used to modify responses.&quot;), mdx(&quot;p&quot;, null, &quot;To modify responses, create &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;proxy.conf.js&quot;), &quot; in the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;src&quot;), &quot; folder, then add an entry to modify the response headers:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;javascript&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-javascript&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-javascript&quot;
  }, &quot;module&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;exports &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string-property property&quot;
  }, &quot;\&quot;/path/**\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token literal-property property&quot;
  }, &quot;secure&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token boolean&quot;
  }, &quot;false&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function-variable function&quot;
  }, &quot;bypass&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;function&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token parameter&quot;
  }, &quot;req&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; res&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; opts&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\t\tres&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;setHeader&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;x-your-header\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;value\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;)))), mdx(&quot;p&quot;, null, &quot;Now, after you run &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;ng server --proxy-config src/proxy.config.js&quot;), &quot; requests to &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/path&quot;), &quot; will contain the header.&quot;), mdx(&quot;p&quot;, null, &quot;A common application of this approach is to set &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../cors/&quot;
  }, &quot;CORS headers&quot;), &quot; when the Angular dev server is hosting scripts that can be loaded from other applications.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Arduino 16x2 LCD]]></title><description><![CDATA[How to use the popular 16x3 LCD included with many Arduino kits]]></description><link>https://www.jamestharpe.com/arduino-lcd-16x2/</link><guid isPermaLink="false">https://www.jamestharpe.com/arduino-lcd-16x2/</guid><pubDate>Sat, 06 Feb 2021 23:26:12 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-02-06T23:26:12.000Z&quot;,
  &quot;description&quot;: &quot;How to use the popular 16x3 LCD included with many Arduino kits&quot;,
  &quot;tags&quot;: [&quot;arduino&quot;],
  &quot;title&quot;: &quot;Arduino 16x2 LCD&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Arduino 16x2 LCD&quot;), mdx(&quot;p&quot;, null, &quot;The official Arduino Starter Kit includes, among other things, a 15x2 Liquid Crystal Display (LCD) that can be used to show simple text output. Other kits, such as the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://www.elegoo.com/collections/uno-r3-starter-kits/products/elegoo-uno-project-super-starter-kit&quot;
  }, &quot;Elegoo UNO R3 Super Starter Kit&quot;), &quot;, come with compatible versions.&quot;), mdx(&quot;h2&quot;, null, &quot;Wiring the Arduino 16x2 LCD&quot;), mdx(&quot;p&quot;, null, &quot;The Contrast pin (labeled &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;VO&quot;), &quot;) can be wired into a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://en.wikipedia.org/wiki/Potentiometer&quot;
  }, &quot;potentiometer&quot;), &quot; for contrast control, or directly into the 5V rail which will maximize the contrast and may make the display difficult to read.&quot;), mdx(&quot;p&quot;, null, mdx(&quot;img&quot;, {
    parentName: &quot;p&quot;,
    &quot;src&quot;: &quot;../img/arduino-lcd-16x2-wiring-diagram.svg&quot;,
    &quot;alt&quot;: &quot;wiring diagram&quot;
  })), mdx(&quot;h2&quot;, null, &quot;\&quot;Hello World\&quot; with Arduino 16x2 LCD and &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;h2&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;LiquidCrystal&quot;)), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;cpp&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-cpp&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-cpp&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token macro property&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token directive-hash&quot;
  }, &quot;#&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token directive keyword&quot;
  }, &quot;include&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&lt;LiquidCrystal.h&gt;&quot;)), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// LCD Configuration&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;const&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;int&quot;), &quot;\n\tLCD_PIN_RS &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;11&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\tLCD_PIN_EN &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;12&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\tLCD_PIN_D4 &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\tLCD_PIN_D5 &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;3&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\tLCD_PIN_D6 &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;4&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\tLCD_PIN_D7 &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;5&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\nLiquidCrystal &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;lcd&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;LCD_PIN_RS&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; LCD_PIN_EN&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; LCD_PIN_D4&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; LCD_PIN_D5&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; LCD_PIN_D6&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; LCD_PIN_D7&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;void&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;setup&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n  lcd&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;begin&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;16&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n  lcd&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;setCursor&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n  lcd&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;print&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;Hello World!\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;void&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;loop&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Do nothing&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;)))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Arduino Thermostat]]></title><description><![CDATA[Build your own programmable thermostat with Arduino]]></description><link>https://www.jamestharpe.com/arduino-thermostat/</link><guid isPermaLink="false">https://www.jamestharpe.com/arduino-thermostat/</guid><pubDate>Sat, 06 Feb 2021 23:26:12 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-02-06T23:26:12.000Z&quot;,
  &quot;description&quot;: &quot;Build your own programmable thermostat with Arduino&quot;,
  &quot;tags&quot;: [&quot;arduino-uno&quot;, &quot;arduino-lcd-16x2&quot;, &quot;relays&quot;],
  &quot;title&quot;: &quot;Arduino Thermostat&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Arduino Thermostat&quot;), mdx(&quot;p&quot;, null, &quot;This &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../arduino-uno/&quot;
  }, &quot;Arduino Uno&quot;), &quot; based thermostat provides an &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../arduino-lcd-16x2/&quot;
  }, &quot;LCD Display&quot;), &quot; of current and target temperature, plus temperature control and measure toggle (fahrenheit/celsius) through toggle switches.&quot;), mdx(&quot;p&quot;, null, &quot;It works by activating one relay when the temperature is too low, and another relay when the temperature is too high. When building the project, use LEDs in place of the relays for easy testing.&quot;), mdx(&quot;h2&quot;, null, &quot;Thermostat Parts&quot;), mdx(&quot;table&quot;, null, mdx(&quot;thead&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;thead&quot;
  }, mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Part&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: &quot;right&quot;
  }, &quot;Quantity&quot;))), mdx(&quot;tbody&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;a&quot;, {
    parentName: &quot;td&quot;,
    &quot;href&quot;: &quot;../arduino-uno/&quot;
  }, &quot;Arduino Uno&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: &quot;right&quot;
  }, &quot;1&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Breadboard&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: &quot;right&quot;
  }, &quot;1&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;16x2 LCD&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: &quot;right&quot;
  }, &quot;1&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Potentiometer&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: &quot;right&quot;
  }, &quot;1&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Momentary switches&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: &quot;right&quot;
  }, &quot;3&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;10k \u03A9 resistors&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: &quot;right&quot;
  }, &quot;3&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;5V Relays&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: &quot;right&quot;
  }, &quot;2&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;DHT11 temperature &amp; humidity sensor&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: &quot;right&quot;
  }, &quot;1&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Jumper wires&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: &quot;right&quot;
  }, &quot;Several&quot;)))), mdx(&quot;h2&quot;, null, &quot;Hardware Build&quot;), mdx(&quot;p&quot;, null, &quot;The instructions will be confusing if you do not reference the following wiring diagram!&quot;), mdx(&quot;p&quot;, null, mdx(&quot;img&quot;, {
    parentName: &quot;p&quot;,
    &quot;src&quot;: &quot;../img/arduino-thermostat-wiring-diagram.png&quot;,
    &quot;alt&quot;: &quot;wiring diagram&quot;
  })), mdx(&quot;h3&quot;, null, &quot;1. Connect the LCD to the breadboard&quot;), mdx(&quot;p&quot;, null, &quot;Note, some of the pin designations may differ between brands.&quot;), mdx(&quot;table&quot;, null, mdx(&quot;thead&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;thead&quot;
  }, mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;LCD Pin&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Destination&quot;))), mdx(&quot;tbody&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;VSS&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Breadboard ground rail (&quot;, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;-&quot;), &quot;)&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;VDD&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Breadboard power rail (&quot;, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;+&quot;), &quot;)&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;VO&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Potentiometer wiper (middle pin)&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;RS&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Arduino pin &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;11&quot;))), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;RW&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Ground rail (&quot;, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;-&quot;), &quot;)&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;E&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Arduino pin &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;12&quot;))), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;D4&quot;), &quot; (sometimes &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;DB4&quot;), &quot;)&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Arduino pin &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;2&quot;))), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;D5&quot;), &quot; (sometimes &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;DB5&quot;), &quot;)&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Arduino pin &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;3&quot;))), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;D6&quot;), &quot; (sometimes &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;DB6&quot;), &quot;)&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Arduino pin &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;4&quot;))), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;D7&quot;), &quot; (sometimes &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;DB7&quot;), &quot;)&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Arduino pin &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;5&quot;))), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;A&quot;), &quot; (sometimes &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;LED+&quot;), &quot;)&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Breadboard power rail (&quot;, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;+&quot;), &quot;)&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;K&quot;), &quot; (sometimes &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;LED-&quot;), &quot;)&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Breadboard ground rail (&quot;, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;-&quot;), &quot;)&quot;)))), mdx(&quot;h3&quot;, null, &quot;2. Connect the potentiometer&quot;), mdx(&quot;p&quot;, null, &quot;Seat the potentiometer in the breadboard. Connect outer pins of the potentiometer to the power and ground rails of the breadboard. The wiper pin (in the middle) will connect to the LED &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;VO&quot;), &quot; pin.&quot;), mdx(&quot;h3&quot;, null, &quot;3. Connect the momentary switches&quot;), mdx(&quot;p&quot;, null, &quot;Seat each momentary switch in the breadboard, then connect one pin of each switch to the breadboard power rail (&quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;+&quot;), &quot;) and the other to the breadboard ground rail (&quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;-&quot;), &quot;) with a 10K \u03A9 resistor. Finally, connect each ground pin to the Arduino according to its purpose:&quot;), mdx(&quot;table&quot;, null, mdx(&quot;thead&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;thead&quot;
  }, mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Purpose&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Arduino Pin&quot;))), mdx(&quot;tbody&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Temperature up&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;7&quot;))), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Toggle celsius/fahrenheit&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;8&quot;))), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Temperature down&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;9&quot;))))), mdx(&quot;h3&quot;, null, &quot;4. Connect the Temperature &amp; Humidity Sensor&quot;), mdx(&quot;p&quot;, null, &quot;Seat the temperature &amp; humidity sensor in the breadboard, then connect the ground and power pins to the ground and power breadboard rails, respectively. Connect the signal pin to the Arduino &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;A0&quot;), &quot; pin.&quot;), mdx(&quot;h3&quot;, null, &quot;5. Connect the Relays&quot;), mdx(&quot;p&quot;, null, &quot;Connect the ground and power pins of each relay to the ground and power breadboard rails, respectively. Finally, connect each relay&apos;s signal pin to the Arduino according to its purpose:&quot;), mdx(&quot;table&quot;, null, mdx(&quot;thead&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;thead&quot;
  }, mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Purpose&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Arduino Pin&quot;))), mdx(&quot;tbody&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Heating&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;13&quot;))), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Cooling&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;10&quot;))))), mdx(&quot;h3&quot;, null, &quot;6. Check connections&quot;), mdx(&quot;p&quot;, null, &quot;Ensure each connection is secure. The final build should look something like this (note: LEDs used as a stand-in for the relays).&quot;), mdx(&quot;p&quot;, null, mdx(&quot;img&quot;, {
    parentName: &quot;p&quot;,
    &quot;src&quot;: &quot;../img/arduino-thermostat_1073x1072.jpg&quot;,
    &quot;alt&quot;: &quot;Picture of an Arduino powered thermostat&quot;
  })), mdx(&quot;h2&quot;, null, &quot;Write the Software&quot;), mdx(&quot;h3&quot;, null, &quot;1. Import the DHT library&quot;), mdx(&quot;p&quot;, null, &quot;The DHT library is not available by default. To install it, navigate in the Arduino IDE to &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Tools&quot;), &quot; \u27A1 &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Manage Libraries...&quot;), &quot; then search for \&quot;DHT sensor library\&quot; and install it.&quot;), mdx(&quot;h3&quot;, null, &quot;2. Write (or copy &amp; paste) the code&quot;), mdx(&quot;p&quot;, null, &quot;Here is the full, annotated code for the thermostat:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;cpp&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-cpp&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-cpp&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// written by Dylon Jamna, modified by Micah Beeler, further modified by James Tharpe&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Original code: https://pastebin.com/HKbJjKxE&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Original instructions: https://www.instructables.com/Arduino-Thermostat/&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token macro property&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token directive-hash&quot;
  }, &quot;#&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token directive keyword&quot;
  }, &quot;include&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&lt;LiquidCrystal.h&gt;&quot;)), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token macro property&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token directive-hash&quot;
  }, &quot;#&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token directive keyword&quot;
  }, &quot;include&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&lt;DHT.h&gt;&quot;)), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Sensor Configuration: Should map to temperature &amp; humidity&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// sensor connections to the Arduino&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;const&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;int&quot;), &quot;\n\tDHT_PIN &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; A0&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\tDHT_TYPE &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; DHT11&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\nDHT &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;sensor&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;DHT_PIN&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; DHT_TYPE&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// LCD Configuration: Should map to temperature &amp; humidity&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// sensor connections to the Arduino&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;const&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;int&quot;), &quot;\n\tLCD_PIN_RS &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;11&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\tLCD_PIN_EN &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;12&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\tLCD_PIN_D4 &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\tLCD_PIN_D5 &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;3&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\tLCD_PIN_D6 &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;4&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\tLCD_PIN_D7 &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;5&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\nLiquidCrystal &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;lcd&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;\n\tLCD_PIN_RS&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\tLCD_PIN_EN&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\tLCD_PIN_D4&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\tLCD_PIN_D5&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\tLCD_PIN_D6&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\tLCD_PIN_D7&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Button configuration&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;const&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;int&quot;), &quot;\n\tDECREMENT_BTN_PIN &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;7&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\tTOGGLE_BTN_PIN &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;8&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\tINCREMENT_BTN_PIN &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;9&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// \&quot;Heater\&quot; and \&quot;cooler\&quot; configuration&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;const&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;int&quot;), &quot;\n\tHEATER_PIN &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;13&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\tCOOLER_PIN &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;10&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Controls&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;bool&quot;), &quot; useFahrenheit &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token boolean&quot;
  }, &quot;true&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;int&quot;), &quot; targetF &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;72&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; targetC &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;22&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;void&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;setup&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Serial (for logging)&quot;), &quot;\n  Serial&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;begin&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;9600&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n  Serial&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;print&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;setup()\\n\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Sensor&quot;), &quot;\n  sensor&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;begin&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n  Serial&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;print&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;\\tsensor initialized\\n\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// LCD&quot;), &quot;\n  lcd&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;begin&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;16&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n  lcd&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;setCursor&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n  lcd&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;clear&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n  Serial&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;print&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;\\tLCD initialized\\n\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Buttons&quot;), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;pinMode&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;INCREMENT_BTN_PIN&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; INPUT&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;pinMode&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;DECREMENT_BTN_PIN&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; INPUT&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;pinMode&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;TOGGLE_BTN_PIN&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; INPUT&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n  Serial&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;print&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;\\tButtons initialized\\n\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n  \n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Temperature Controllers&quot;), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;pinMode&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;HEATER_PIN&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; OUTPUT&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;pinMode&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;COOLER_PIN&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; OUTPUT&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n  \n  Serial&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;print&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;setup() DONE\\n\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;void&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;loop&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n  Serial&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;print&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;loop()\\n\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Read Button State&quot;), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;bool&quot;), &quot; incrementTarget &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;digitalRead&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;INCREMENT_BTN_PIN&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;bool&quot;), &quot; decrementTarget &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;digitalRead&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;DECREMENT_BTN_PIN&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;bool&quot;), &quot; toggle &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;digitalRead&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;TOGGLE_BTN_PIN&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;==&quot;), &quot; HIGH&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;bool&quot;), &quot; wait &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; incrementTarget &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;||&quot;), &quot; decrementTarget &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;||&quot;), &quot; toggle&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Configure&quot;), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;if&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;toggle&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; useFahrenheit &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;!&quot;), &quot;useFahrenheit&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;if&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;incrementTarget&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot; targetF&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;++&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot; targetC&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;++&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;if&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;decrementTarget&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot; targetF&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;--&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot; targetC&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;--&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;const&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;char&quot;), &quot; symbol &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; useFahrenheit &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;?&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token char&quot;
  }, &quot;&apos;F&apos;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token char&quot;
  }, &quot;&apos;C&apos;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;const&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;int&quot;), &quot; target &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; useFahrenheit &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;?&quot;), &quot; targetF &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; targetC&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Read Sensor Data&quot;), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;float&quot;), &quot; temperature &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; sensor&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;readTemperature&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;useFahrenheit&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;float&quot;), &quot; humidity &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; sensor&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;readHumidity&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n  Serial&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;print&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;\\t\&quot;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;+&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;String&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;temperature&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;+&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;\xB0\&quot;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;+&quot;), &quot; symbol &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;+&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;, Relative Humidity \&quot;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;+&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;String&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;humidity&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;+&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;% \\n\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n  \n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Write out to LCD&quot;), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;lcdWrite&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;Temp:   \&quot;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;+&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;String&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;temperature&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;+&quot;), &quot; symbol&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;lcdWrite&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;Target: \&quot;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;+&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;String&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;target&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;+&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;.00\&quot;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;+&quot;), &quot; symbol&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Activate Temperature Control&quot;), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;if&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;round&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;target&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;&gt;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;round&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;temperature&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;digitalWrite&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;HEATER_PIN&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; HIGH&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;else&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;digitalWrite&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;HEATER_PIN&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; LOW&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;if&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;round&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;target&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;&lt;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;round&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;temperature&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;digitalWrite&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;COOLER_PIN&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; HIGH&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;else&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;digitalWrite&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;COOLER_PIN&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; LOW&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Pause to allow finger to lift from button(s)&quot;), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;if&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;wait&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;delay&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;500&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Utility to simplify writing to LCD&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;void&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;lcdWrite&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;const&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;bool&quot;), &quot; line&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;const&quot;), &quot; String&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;&amp;&quot;), &quot; text&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n  lcd&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;setCursor&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; line&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n  lcd&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;print&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;text&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;)))), mdx(&quot;p&quot;, null, &quot;Connect the Arduino to you computer and click the &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Upload&quot;), &quot; button to deploye the code to the Arduino.&quot;), mdx(&quot;h2&quot;, null, &quot;3. Test it out!&quot;), mdx(&quot;p&quot;, null, &quot;You should be able to view the current temperature, adjust the target temperature up and down, switch between celsius and fahrenheit, adjust the brightness of the LED, and see the heating and cooling functions come on based on the difference between the current and target temperatures.&quot;), mdx(&quot;p&quot;, null, &quot;Here&apos;s a video of the thermostat in action:&quot;), mdx(&quot;iframe&quot;, {
    width: &quot;560&quot;,
    height: &quot;315&quot;,
    src: &quot;https://www.youtube.com/embed/IbFVXAm5U0U&quot;,
    frameBorder: &quot;0&quot;,
    allow: &quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot;,
    allowFullScreen: true
  }), mdx(&quot;h2&quot;, null, &quot;Credit&quot;), mdx(&quot;p&quot;, null, &quot;This project is adapted from the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://www.instructables.com/Arduino-Thermostat/&quot;
  }, &quot;Arduino Thermostat by Micah Beeler&quot;), &quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;Articles that Helped&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.circuitbasics.com/how-to-set-up-the-dht11-humidity-sensor-on-an-arduino/&quot;
  }, &quot;How to set up the DHT11 Humidity Sensor on an Arduino&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://arduinogetstarted.com/tutorials/arduino-lcd&quot;
  }, &quot;Arduino LCD tutorial&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Sugru]]></title><description><![CDATA[Sugru Sugru  is a moldable glue useful for making custom shapes for repairs, crafts, and DIY projects.]]></description><link>https://www.jamestharpe.com/sugru/</link><guid isPermaLink="false">https://www.jamestharpe.com/sugru/</guid><pubDate>Sun, 24 Jan 2021 16:22:10 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-01-24T16:22:10.000Z&quot;,
  &quot;tags&quot;: [],
  &quot;title&quot;: &quot;Sugru&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Sugru&quot;), mdx(&quot;p&quot;, null, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://sugru.com/&quot;
  }, &quot;Sugru&quot;), &quot; is a moldable glue useful for making custom shapes for repairs, crafts, and DIY projects.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Arduino]]></title><description><![CDATA[The open-source electronics platform for interactive projects and prototypes]]></description><link>https://www.jamestharpe.com/arduino/</link><guid isPermaLink="false">https://www.jamestharpe.com/arduino/</guid><pubDate>Mon, 18 Jan 2021 13:11:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-01-18T13:11:11.000Z&quot;,
  &quot;description&quot;: &quot;The open-source electronics platform for interactive projects and prototypes&quot;,
  &quot;tags&quot;: [&quot;open-source-hardware&quot;, &quot;electrical-engineering&quot;],
  &quot;title&quot;: &quot;Arduino&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Arduino&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Arduino&quot;), &quot; is a set of &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../open-source-hardware/&quot;
  }, &quot;ope-source hardware&quot;), &quot; and &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../open-source-software/&quot;
  }, &quot;software&quot;), &quot; used to build interactive electronics projects. Applications for Arduino are typically written in &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../cpp/&quot;
  }, &quot;C++&quot;), &quot; in the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://www.arduino.cc/en/software&quot;
  }, &quot;Arduino IDE&quot;), &quot; or &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://create.arduino.cc/editor&quot;
  }, &quot;Arduino Web Editor&quot;), &quot; (recommended over Arduino IDE); however other options for controlling arduinos exist such as with &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://nodered.org/docs/faq/interacting-with-arduino&quot;
  }, &quot;Node-RED&quot;), &quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;Components of an Arduino Build&quot;), mdx(&quot;ol&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Sensors&quot;), &quot; convert physical phenomena into &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;../electrical-engineering/&quot;
  }, &quot;electrical signals&quot;), &quot; (e.g. humidity, light, proximity)&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Effectors&quot;), &quot; convert electrical signals into physical phenomena (e.g. lights, motors, solenoids)&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Code&quot;), &quot; processes inputs from sensors and controls the outputs to effectors to create desired behaviors&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Wires&quot;), &quot; carry &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;../watts-law/&quot;
  }, &quot;electrical power&quot;), &quot; and signals between components&quot;)), mdx(&quot;h2&quot;, null, &quot;Arduino Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.arduino.cc/&quot;
  }, &quot;Official Arduino Website&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.arduino.cc/reference/en/&quot;
  }, &quot;Arduino Language Reference&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Angular Motion]]></title><description><![CDATA[The basics of angular motion]]></description><link>https://www.jamestharpe.com/angular-motion/</link><guid isPermaLink="false">https://www.jamestharpe.com/angular-motion/</guid><pubDate>Sat, 09 Jan 2021 19:34:24 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-01-09T19:34:24.000Z&quot;,
  &quot;description&quot;: &quot;The basics of angular motion&quot;,
  &quot;tags&quot;: [&quot;physics&quot;, &quot;radians&quot;],
  &quot;title&quot;: &quot;Angular Motion&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Angular Motion&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Angular motion&quot;), &quot; is the motion of an object around a fixed axis point, such as a swinging pendulum or an orbiting planet. By convention, measurements of angular motion are considered positive when the motion is counter-clockwise and negative when the motion is clockwise.&quot;), mdx(&quot;h2&quot;, null, &quot;Angular Displacement&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Angular displacement&quot;), &quot; (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u03B8&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;\\theta&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.69444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.02778em&quot;
    }
  }, &quot;\u03B8&quot;))))), &quot;) is the change (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;\u0394&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;\\Delta&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;\u0394&quot;))))), &quot;) in angle in &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../radians/&quot;
  }, &quot;radians&quot;), &quot; (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;r&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;a&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;d&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;rad&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.69444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.02778em&quot;
    }
  }, &quot;r&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;a&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;d&quot;))))), &quot;) of the arc length (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;S&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;S&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.05764em&quot;
    }
  }, &quot;S&quot;))))), &quot;) traveled by an object along a circular path. The angular displacement of an arc length equal to the radius (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;r&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;r&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.43056em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.02778em&quot;
    }
  }, &quot;r&quot;))))), &quot;) of a circle is, by definition, &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;1&quot;), mdx(&quot;mtext&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\xA0&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;r&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;a&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;d&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;1\\ rad&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.69444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;
  }, &quot;\xA0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.02778em&quot;
    }
  }, &quot;r&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;a&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;d&quot;))))), &quot;. Angular displacement can therefore be calculated as &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u03B8&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;\u0394&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;S&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;r&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;\\theta = \\Delta S/r&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.69444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.02778em&quot;
    }
  }, &quot;\u03B8&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;\u0394&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.05764em&quot;
    }
  }, &quot;S&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.02778em&quot;
    }
  }, &quot;r&quot;))))), &quot;, though the &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;\u0394&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;\\Delta&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;\u0394&quot;))))), &quot; is often omitted for brevity.&quot;), mdx(&quot;p&quot;, null, &quot;Angular displacement is the basis for angular motion because it allows all points on a rotating line to be measured, rather than just a single point by solving for the missing variable in the angular displacement calculation.&quot;), mdx(&quot;table&quot;, null, mdx(&quot;thead&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;thead&quot;
  }, mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Variable&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Solution&quot;))), mdx(&quot;tbody&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Angular displacement&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u03B8&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;S&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;r&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;\\theta = S/r&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.69444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.02778em&quot;
    }
  }, &quot;\u03B8&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.05764em&quot;
    }
  }, &quot;S&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.02778em&quot;
    }
  }, &quot;r&quot;))))))), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Arc length&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;S&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;r&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u03B8&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;S = r\\theta&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.05764em&quot;
    }
  }, &quot;S&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.69444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.02778em&quot;
    }
  }, &quot;r&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.02778em&quot;
    }
  }, &quot;\u03B8&quot;))))))), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Radius&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;r&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;S&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u03B8&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;r = S/\\theta&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.43056em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.02778em&quot;
    }
  }, &quot;r&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.05764em&quot;
    }
  }, &quot;S&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.02778em&quot;
    }
  }, &quot;\u03B8&quot;))))))))), mdx(&quot;h2&quot;, null, &quot;Angular Velocity&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Angular velocity&quot;), &quot; (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u03C9&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;\\omega&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.43056em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.03588em&quot;
    }
  }, &quot;\u03C9&quot;))))), &quot;) is the change in angular displacement over the change in time (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;t&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;t&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.61508em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;t&quot;))))), &quot;), or &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u03C9&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;\u0394&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u03B8&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;\u0394&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;t&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;\\omega = \\Delta\\theta/\\Delta t&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.43056em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.03588em&quot;
    }
  }, &quot;\u03C9&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;\u0394&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.02778em&quot;
    }
  }, &quot;\u03B8&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;\u0394&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;t&quot;))))), &quot; (again, the &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;\u0394&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;\\Delta&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;\u0394&quot;))))), &quot; is often omitted). Essentially, \&quot;radians per second\&quot;.&quot;), mdx(&quot;p&quot;, null, &quot;Angular velocity can be converted to speed (note that speed is not the same as velocity) by substituting arc length for angular displacement. Given &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;S&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;r&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u03B8&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;S = r\\theta&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.05764em&quot;
    }
  }, &quot;S&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.69444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.02778em&quot;
    }
  }, &quot;r&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.02778em&quot;
    }
  }, &quot;\u03B8&quot;))))), &quot; and &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u03C9&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u03B8&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;t&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;\\omega = \\theta/t&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.43056em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.03588em&quot;
    }
  }, &quot;\u03C9&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.02778em&quot;
    }
  }, &quot;\u03B8&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;t&quot;))))), &quot;, therefore &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;r&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u03C9&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;r&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u03B8&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;t&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;r\\omega = r\\theta/ t&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.43056em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.02778em&quot;
    }
  }, &quot;r&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.03588em&quot;
    }
  }, &quot;\u03C9&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.02778em&quot;
    }
  }, &quot;r&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.02778em&quot;
    }
  }, &quot;\u03B8&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;t&quot;))))), &quot; which equals &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;S&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;t&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;S/t&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.05764em&quot;
    }
  }, &quot;S&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;t&quot;))))), &quot; and &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;S&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;t&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;S/t&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.05764em&quot;
    }
  }, &quot;S&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;t&quot;))))), &quot; is distance over time, which is speed.&quot;), mdx(&quot;h2&quot;, null, &quot;Angular Acceleration&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Angular acceleration&quot;), &quot; (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u03B1&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;\\alpha&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.43056em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.0037em&quot;
    }
  }, &quot;\u03B1&quot;))))), &quot;) is the change in angular velocity over time, or &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u03B1&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;\u0394&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u03C9&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;\u0394&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;t&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;\\alpha=\\Delta\\omega/\\Delta t&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.43056em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.0037em&quot;
    }
  }, &quot;\u03B1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;\u0394&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.03588em&quot;
    }
  }, &quot;\u03C9&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;\u0394&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;t&quot;))))), &quot;. Essentially, \&quot;radians per second per second\&quot; or \&quot;radians per second squared\&quot;.&quot;), mdx(&quot;p&quot;, null, &quot;Angular acceleration can be converted to tangential acceleration (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;msub&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;msub&quot;
  }, &quot;A&quot;), mdx(&quot;mrow&quot;, {
    parentName: &quot;msub&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;t&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;a&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;n&quot;)))), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;A_{tan}&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.83333em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.15em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;A&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t vlist-t2&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.2805559999999999em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-2.5500000000000003em&quot;,
      &quot;marginLeft&quot;: &quot;0em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal mtight&quot;
  }, &quot;t&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal mtight&quot;
  }, &quot;a&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal mtight&quot;
  }, &quot;n&quot;))))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-s&quot;
  }, &quot;\u200B&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.15em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;
  })))))))))), &quot;), which is acceleration which doesn&apos;t account for the change in direction in circular motion, by substituting arc length for angular displacement. Given &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;S&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;r&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u03B8&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;S = r\\theta&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.05764em&quot;
    }
  }, &quot;S&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.69444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.02778em&quot;
    }
  }, &quot;r&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.02778em&quot;
    }
  }, &quot;\u03B8&quot;))))), &quot; and &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u03B1&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u03C9&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;t&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;\\alpha=\\omega/t&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.43056em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.0037em&quot;
    }
  }, &quot;\u03B1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.03588em&quot;
    }
  }, &quot;\u03C9&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;t&quot;))))), &quot;, therefore &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;r&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u03B1&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;r&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u03C9&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;t&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;r\\alpha=r\\omega/t&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.43056em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.02778em&quot;
    }
  }, &quot;r&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.0037em&quot;
    }
  }, &quot;\u03B1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.02778em&quot;
    }
  }, &quot;r&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.03588em&quot;
    }
  }, &quot;\u03C9&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;t&quot;))))), &quot;, which is the change in angular velocity over time.&quot;), mdx(&quot;h2&quot;, null, &quot;Conversion Tables&quot;), mdx(&quot;table&quot;, null, mdx(&quot;thead&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;thead&quot;
  }, mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;From&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;To&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Formula&quot;))), mdx(&quot;tbody&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Angular velocity&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Speed&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;S&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;t&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;S/t&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.05764em&quot;
    }
  }, &quot;S&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;t&quot;))))), &quot; or &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;r&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u03B8&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;t&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;r\\theta/t&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.02778em&quot;
    }
  }, &quot;r&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.02778em&quot;
    }
  }, &quot;\u03B8&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;t&quot;))))))), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Angular acceleration&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Tangential acceleration&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;r&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u03C9&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;t&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;r\\omega/t&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.02778em&quot;
    }
  }, &quot;r&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.03588em&quot;
    }
  }, &quot;\u03C9&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;t&quot;))))), &quot; or &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;r&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u03B8&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;msup&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;t&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;2&quot;))), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;r\\theta/t^2&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1.064108em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.02778em&quot;
    }
  }, &quot;r&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.02778em&quot;
    }
  }, &quot;\u03B8&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;t&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.063em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;2&quot;)))))))))))))))), mdx(&quot;h2&quot;, null, &quot;Resources to Lean about Angular Motion&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.khanacademy.org/science/high-school-physics/torque-and-angular-momentum#introduction-to-rotational-motion&quot;
  }, &quot;Introduction to Rotational Motion on Khan Academy&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Geometry]]></title><description><![CDATA[The mathematics of shapes]]></description><link>https://www.jamestharpe.com/geometry/</link><guid isPermaLink="false">https://www.jamestharpe.com/geometry/</guid><pubDate>Sat, 09 Jan 2021 17:39:24 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-01-09T17:39:24.000Z&quot;,
  &quot;description&quot;: &quot;The mathematics of shapes&quot;,
  &quot;tags&quot;: [&quot;math&quot;],
  &quot;title&quot;: &quot;Geometry&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Geometry&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Circles (Geometry)]]></title><description><![CDATA[The mathematics of circles]]></description><link>https://www.jamestharpe.com/circles/</link><guid isPermaLink="false">https://www.jamestharpe.com/circles/</guid><pubDate>Sat, 09 Jan 2021 17:39:24 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-01-09T17:39:24.000Z&quot;,
  &quot;description&quot;: &quot;The mathematics of circles&quot;,
  &quot;tags&quot;: [&quot;geometry&quot;],
  &quot;title&quot;: &quot;Circles (Geometry)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Circles&quot;), mdx(&quot;p&quot;, null, &quot;A circle is a shape on a plane in which all points are equally distant from the center.&quot;), mdx(&quot;h2&quot;, null, &quot;Terms and Symbols Related to Circles&quot;), mdx(&quot;table&quot;, null, mdx(&quot;thead&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;thead&quot;
  }, mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Term&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Symbol&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Definition&quot;))), mdx(&quot;tbody&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Area&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;a&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;a&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.43056em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;a&quot;)))))), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;The amount of space occupied by the surface of the circle&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Circumference&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;c&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;c&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.43056em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;c&quot;)))))), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;The perimeter of a circle&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Diameter&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;d&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;d&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.69444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;d&quot;)))))), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;The distance of a straight line from one point on a circle to the opposite point on the circle and passes through the center&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Pi&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u03C0&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;\\pi&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.43056em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.03588em&quot;
    }
  }, &quot;\u03C0&quot;)))))), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;The ratio of a circle&apos;s circumference to its diameter. Equal to about &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;22&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;7&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;22/7&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;7&quot;))))), &quot; or &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;3.14&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;3.14&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.64444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;3&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;4&quot;))))))), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Radius&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;r&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;r&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.43056em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.02778em&quot;
    }
  }, &quot;r&quot;)))))), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;The distance from the center to a point on the edge of a circle&quot;)))), mdx(&quot;h2&quot;, null, &quot;Formulas to Find Properties of Circles&quot;), mdx(&quot;h3&quot;, null, &quot;Area of a Circle&quot;), mdx(&quot;p&quot;, null, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;a&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u03C0&quot;), mdx(&quot;msup&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;r&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;2&quot;))), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;a = \\pi r^2&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.43056em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;a&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.03588em&quot;
    }
  }, &quot;\u03C0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.02778em&quot;
    }
  }, &quot;r&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.063em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;2&quot;))))))))))))), mdx(&quot;p&quot;, null, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;a&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u03C0&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;stretchy&quot;: &quot;false&quot;
  }, &quot;(&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;d&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;2&quot;), mdx(&quot;msup&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mo&quot;, {
    parentName: &quot;msup&quot;,
    &quot;stretchy&quot;: &quot;false&quot;
  }, &quot;)&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;2&quot;))), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;a = \\pi (d/2)^2&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.43056em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;a&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1.064108em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.03588em&quot;
    }
  }, &quot;\u03C0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mopen&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;d&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mclose&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mclose&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.063em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;2&quot;))))))))))))), mdx(&quot;h3&quot;, null, &quot;Circumference of a Circle&quot;), mdx(&quot;p&quot;, null, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;c&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;2&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u03C0&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;r&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;c = 2 \\pi r&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.43056em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;c&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.64444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.03588em&quot;
    }
  }, &quot;\u03C0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.02778em&quot;
    }
  }, &quot;r&quot;)))))), mdx(&quot;p&quot;, null, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;c&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;d&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u03C0&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;c = d \\pi&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.43056em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;c&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.69444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;d&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.03588em&quot;
    }
  }, &quot;\u03C0&quot;)))))), mdx(&quot;h3&quot;, null, &quot;Diameter of a Circle&quot;), mdx(&quot;p&quot;, null, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;d&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;2&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;r&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;d = 2r&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.69444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;d&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.64444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.02778em&quot;
    }
  }, &quot;r&quot;)))))), mdx(&quot;p&quot;, null, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;d&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;c&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u03C0&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;d = c/\\pi&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.69444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;d&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;c&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.03588em&quot;
    }
  }, &quot;\u03C0&quot;)))))), mdx(&quot;h3&quot;, null, &quot;Radius of a Circle&quot;), mdx(&quot;p&quot;, null, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;r&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;d&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;2&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;r = d / 2&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.43056em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.02778em&quot;
    }
  }, &quot;r&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;d&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;2&quot;)))))), mdx(&quot;p&quot;, null, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;r&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;c&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;2&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u03C0&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;r = c/2\\pi&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.43056em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.02778em&quot;
    }
  }, &quot;r&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;c&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.03588em&quot;
    }
  }, &quot;\u03C0&quot;)))))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Radian]]></title><description><![CDATA[The angle which subtends an arc equal to the length of the radius of a circle]]></description><link>https://www.jamestharpe.com/radians/</link><guid isPermaLink="false">https://www.jamestharpe.com/radians/</guid><pubDate>Sat, 09 Jan 2021 17:19:24 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-01-09T17:19:24.000Z&quot;,
  &quot;description&quot;: &quot;The angle which subtends an arc equal to the length of the radius of a circle&quot;,
  &quot;tags&quot;: [&quot;math&quot;, &quot;circles&quot;],
  &quot;title&quot;: &quot;Radian&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Radian&quot;), mdx(&quot;p&quot;, null, &quot;A radian (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;r&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;a&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;d&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;rad&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.69444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.02778em&quot;
    }
  }, &quot;r&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;a&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;d&quot;))))), &quot;) is the angle (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u03B8&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;\\theta&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.69444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.02778em&quot;
    }
  }, &quot;\u03B8&quot;))))), &quot;) which subtends an arc equal to the length of the radius of a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../circles/&quot;
  }, &quot;circle&quot;), &quot; and the SI unit of angles. The angle of a circle is &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;2&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u03C0&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;2\\pi&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.64444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.03588em&quot;
    }
  }, &quot;\u03C0&quot;))))), &quot; radians.&quot;), mdx(&quot;h2&quot;, null, &quot;Convert Between Radians and Degrees&quot;), mdx(&quot;p&quot;, null, &quot;Given there are &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;360&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;\xB0&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;360\\degree&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.69444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;3&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;6&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;\xB0&quot;))))), &quot; in a circle and &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;2&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u03C0&quot;), mdx(&quot;mtext&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\xA0&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;r&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;a&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;d&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;2\\pi\\ rad&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.69444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.03588em&quot;
    }
  }, &quot;\u03C0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;
  }, &quot;\xA0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.02778em&quot;
    }
  }, &quot;r&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;a&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;d&quot;))))), &quot; in a circle, we can say &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;360&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;\xB0&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;2&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u03C0&quot;), mdx(&quot;mtext&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\xA0&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;r&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;a&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;d&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;360\\degree = 2\\pi\\ rad&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.69444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;3&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;6&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;\xB0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.69444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.03588em&quot;
    }
  }, &quot;\u03C0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;
  }, &quot;\xA0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.02778em&quot;
    }
  }, &quot;r&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;a&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;d&quot;))))), &quot;.&quot;), mdx(&quot;p&quot;, null, &quot;You can solve for either side of the equation to determine the formula for conversion.&quot;), mdx(&quot;p&quot;, null, &quot;First, simplify:&quot;), mdx(&quot;p&quot;, null, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;180&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;\xB0&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u03C0&quot;), mdx(&quot;mtext&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\xA0&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;r&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;a&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;d&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;180\\degree = \\pi\\ rad&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.69444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;8&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;\xB0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.69444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.03588em&quot;
    }
  }, &quot;\u03C0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;
  }, &quot;\xA0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.02778em&quot;
    }
  }, &quot;r&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;a&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;d&quot;)))))), mdx(&quot;h2&quot;, null, &quot;Video: Intro to Radians&quot;), mdx(&quot;iframe&quot;, {
    width: &quot;560&quot;,
    height: &quot;315&quot;,
    src: &quot;https://www.youtube.com/embed/EnwWxMZVBeg&quot;,
    frameBorder: &quot;0&quot;,
    allow: &quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot;,
    allowFullScreen: true
  }), mdx(&quot;h2&quot;, null, &quot;Resources to Learn About Radians&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.khanacademy.org/math/algebra2/x2ec2f6f830c9fb89:trig/x2ec2f6f830c9fb89:radians/v/introduction-to-radians&quot;
  }, &quot;Intro to Radians on Khan Academy&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Mechanical Advantage]]></title><description><![CDATA[Learn about mechanical advantage]]></description><link>https://www.jamestharpe.com/mechanical-advantage/</link><guid isPermaLink="false">https://www.jamestharpe.com/mechanical-advantage/</guid><pubDate>Sat, 09 Jan 2021 15:47:28 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-01-09T15:47:28.000Z&quot;,
  &quot;description&quot;: &quot;Learn about mechanical advantage&quot;,
  &quot;tags&quot;: [&quot;physics&quot;],
  &quot;title&quot;: &quot;Mechanical Advantage&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Mechanical Advantage&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Mechanical Advantage&quot;), &quot; (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;M&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;A&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;MA&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.10903em&quot;
    }
  }, &quot;M&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;A&quot;))))), &quot;) is the amplification of force by a mechanical device and expressed as the ratio of output &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../physics/&quot;
  }, &quot;force&quot;), &quot; (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;msub&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;msub&quot;
  }, &quot;F&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;msub&quot;
  }, &quot;o&quot;))), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;F_o&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.83333em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.15em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.13889em&quot;
    }
  }, &quot;F&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t vlist-t2&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.151392em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-2.5500000000000003em&quot;,
      &quot;marginLeft&quot;: &quot;-0.13889em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal mtight&quot;
  }, &quot;o&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-s&quot;
  }, &quot;\u200B&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.15em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;
  })))))))))), &quot;) over input force (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;msub&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;msub&quot;
  }, &quot;F&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;msub&quot;
  }, &quot;i&quot;))), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;F_i&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.83333em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.15em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.13889em&quot;
    }
  }, &quot;F&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t vlist-t2&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.31166399999999994em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-2.5500000000000003em&quot;,
      &quot;marginLeft&quot;: &quot;-0.13889em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal mtight&quot;
  }, &quot;i&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-s&quot;
  }, &quot;\u200B&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.15em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;
  })))))))))), &quot;), or &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;M&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;A&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;msub&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;msub&quot;
  }, &quot;F&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;msub&quot;
  }, &quot;o&quot;)), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;msub&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;msub&quot;
  }, &quot;F&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;msub&quot;
  }, &quot;i&quot;))), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;MA=F_o/F_i&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.10903em&quot;
    }
  }, &quot;M&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;A&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.13889em&quot;
    }
  }, &quot;F&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t vlist-t2&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.151392em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-2.5500000000000003em&quot;,
      &quot;marginLeft&quot;: &quot;-0.13889em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal mtight&quot;
  }, &quot;o&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-s&quot;
  }, &quot;\u200B&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.15em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;
  })))))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.13889em&quot;
    }
  }, &quot;F&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t vlist-t2&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.31166399999999994em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-2.5500000000000003em&quot;,
      &quot;marginLeft&quot;: &quot;-0.13889em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal mtight&quot;
  }, &quot;i&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-s&quot;
  }, &quot;\u200B&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.15em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;
  })))))))))), &quot;. A simple example of mechanical advantage is Archimedes&apos;s famous lever quote: \&quot;Give me a lever long enough and a fulcrum on which to place it, and I shall move the world.\&quot;&quot;), mdx(&quot;p&quot;, null, &quot;A mechanical advantage less than one will increase the output speed, whereas a mechanical advantage greater than one will increase the force.&quot;), mdx(&quot;h2&quot;, null, &quot;Resources to Learn About Mechanical Advantage&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.khanacademy.org/science/physics/work-and-energy/mechanical-advantage/v/introduction-to-mechanical-advantage&quot;
  }, &quot;Khan Academy: Introduction to Mechanical Advantage&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Gears]]></title><description><![CDATA[Learn about gears and cogs]]></description><link>https://www.jamestharpe.com/gears/</link><guid isPermaLink="false">https://www.jamestharpe.com/gears/</guid><pubDate>Sat, 09 Jan 2021 14:51:28 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-01-09T14:51:28.000Z&quot;,
  &quot;description&quot;: &quot;Learn about gears and cogs&quot;,
  &quot;tags&quot;: [&quot;mechanical-engineering&quot;, &quot;torque&quot;, &quot;mechanical-advantage&quot;, &quot;angular-motion&quot;],
  &quot;title&quot;: &quot;Gears&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Gears&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Gears&quot;), &quot; are toothed wheels that, when combined in different configurations, can change the speed, direction, and/or &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../torque/&quot;
  }, &quot;torque&quot;), &quot; of a power source.&quot;), mdx(&quot;p&quot;, null, &quot;Gear sizes are typically expressed by number of teeth, circumference, diameter, or radius. Gears can be used to create &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../mechanical-advantage/&quot;
  }, &quot;mechanical advantage&quot;), &quot; equal to the ratio of the driver gear over the driven gear; this ratio is also referred to as the &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;gear ratio&quot;), &quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;Gear Terminology&quot;), mdx(&quot;table&quot;, null, mdx(&quot;thead&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;thead&quot;
  }, mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Part&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Definition&quot;))), mdx(&quot;tbody&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Axis&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Where the shaft passes through&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Cog&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;A tooth on a wheel&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Cylinder&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;The \&quot;wheel\&quot; portion of the gear&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Driver Gear&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;A gear rotated by a power source&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Driven Gear&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;A gear rotated by a driver gear&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Gear ratio&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;The ratio of the sizes of two gears, typically the driver gear over the driven gear&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Gear train&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;The combination of two or more gears&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Pitch Circle&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;The circumference the the gear, measured at the point of force between two meshed gears&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Tooth&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;The lever protruding from the cylinder or cone&quot;)))), mdx(&quot;h2&quot;, null, &quot;Video Introduction to Gears&quot;), mdx(&quot;iframe&quot;, {
    width: &quot;560&quot;,
    height: &quot;315&quot;,
    src: &quot;https://www.youtube.com/embed/D_i3PJIYtuY&quot;,
    frameBorder: &quot;0&quot;,
    allow: &quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot;,
    allowFullScreen: true
  }), mdx(&quot;h2&quot;, null, &quot;Resources for Learning About Gears&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.instructables.com/Basic-Gear-Mechanisms/&quot;
  }, &quot;Basic Gear Mechanisms&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Microsoft Windows]]></title><description><![CDATA[The Microsoft Windows Operating System]]></description><link>https://www.jamestharpe.com/windows/</link><guid isPermaLink="false">https://www.jamestharpe.com/windows/</guid><pubDate>Thu, 07 Jan 2021 16:10:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-01-07T16:10:11.000Z&quot;,
  &quot;description&quot;: &quot;The Microsoft Windows Operating System&quot;,
  &quot;tags&quot;: [&quot;operating-systems&quot;],
  &quot;title&quot;: &quot;Microsoft Windows&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Windows&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[MakerBot Thingiverse]]></title><description><![CDATA[A resource for free 3D printable designs]]></description><link>https://www.jamestharpe.com/thingiverse/</link><guid isPermaLink="false">https://www.jamestharpe.com/thingiverse/</guid><pubDate>Thu, 07 Jan 2021 13:28:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-01-07T13:28:11.000Z&quot;,
  &quot;description&quot;: &quot;A resource for free 3D printable designs&quot;,
  &quot;tags&quot;: [&quot;3d-printing&quot;],
  &quot;title&quot;: &quot;MakerBot Thingiverse&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;MakerBot Thingiverse&quot;), mdx(&quot;p&quot;, null, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://www.thingiverse.com/&quot;
  }, &quot;MakerBot Thingiverse&quot;), &quot; has thousands of freely downloadable (under creative commons) designs.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Windows Subsystem for Linux (WSL)]]></title><description><![CDATA[Tips and tricks for using Windows Subsystem for Linux (WSL)]]></description><link>https://www.jamestharpe.com/wsl/</link><guid isPermaLink="false">https://www.jamestharpe.com/wsl/</guid><pubDate>Thu, 07 Jan 2021 13:28:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-01-07T13:28:11.000Z&quot;,
  &quot;description&quot;: &quot;Tips and tricks for using Windows Subsystem for Linux (WSL)&quot;,
  &quot;tags&quot;: [&quot;linux&quot;, &quot;windows&quot;],
  &quot;title&quot;: &quot;Windows Subsystem for Linux (WSL)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Windows Subsystem for Linux (WSL)&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Mechanical Engineering]]></title><description><![CDATA[Build and deconstruct mechanical devices]]></description><link>https://www.jamestharpe.com/mechanical-engineering/</link><guid isPermaLink="false">https://www.jamestharpe.com/mechanical-engineering/</guid><pubDate>Wed, 06 Jan 2021 02:02:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-01-06T02:02:11.000Z&quot;,
  &quot;description&quot;: &quot;Build and deconstruct mechanical devices&quot;,
  &quot;tags&quot;: [&quot;engineering&quot;, &quot;physics&quot;],
  &quot;title&quot;: &quot;Mechanical Engineering&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Mechanical Engineering&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Mechanical engineering&quot;), &quot; is the practical application of the fundamental forces of &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../physics/&quot;
  }, &quot;physics&quot;), &quot; - motion, energy, force - to create machines. &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Machines&quot;), &quot; are physical structures that use &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../power/&quot;
  }, &quot;power&quot;), &quot; to apply force to control movement to perform an intended action.&quot;), mdx(&quot;h2&quot;, null, &quot;Mechanical Engineering Terminology&quot;), mdx(&quot;table&quot;, null, mdx(&quot;thead&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;thead&quot;
  }, mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Term&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Definition&quot;))), mdx(&quot;tbody&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Mechanism&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;A machine that transforms direction and force&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Stress&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;The amount of reactive force per unit area; a force that works in opposition to another force&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;a&quot;, {
    parentName: &quot;td&quot;,
    &quot;href&quot;: &quot;../torque/&quot;
  }, &quot;Torque&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Force that causes an object to rotate around an axis&quot;)))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[McMaster-Carr]]></title><description><![CDATA[An industrial supply company]]></description><link>https://www.jamestharpe.com/mcmaster-carr/</link><guid isPermaLink="false">https://www.jamestharpe.com/mcmaster-carr/</guid><pubDate>Wed, 06 Jan 2021 02:00:46 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-01-06T02:00:46.000Z&quot;,
  &quot;description&quot;: &quot;An industrial supply company&quot;,
  &quot;tags&quot;: [&quot;mechanical-engineering&quot;],
  &quot;title&quot;: &quot;McMaster-Carr&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;McMaster-Carr&quot;), mdx(&quot;p&quot;, null, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://www.mcmaster.com/&quot;
  }, &quot;McMaster-Carr&quot;), &quot; is an industrial supply company that sells parts commonly used in mechanical engineering.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Pololu]]></title><description><![CDATA[A robotics and electronics online catalog]]></description><link>https://www.jamestharpe.com/pololu/</link><guid isPermaLink="false">https://www.jamestharpe.com/pololu/</guid><pubDate>Wed, 06 Jan 2021 01:56:46 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-01-06T01:56:46.000Z&quot;,
  &quot;description&quot;: &quot;A robotics and electronics online catalog&quot;,
  &quot;tags&quot;: [&quot;electrical-engineering&quot;],
  &quot;title&quot;: &quot;Pololu&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Pololu&quot;), mdx(&quot;p&quot;, null, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://www.pololu.com/&quot;
  }, &quot;Pololu&quot;), &quot; is an online catalog for robotics and electronics parts.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Arduino Programming]]></title><description><![CDATA[Knowledge about programming Arduino boards]]></description><link>https://www.jamestharpe.com/arduino-programming/</link><guid isPermaLink="false">https://www.jamestharpe.com/arduino-programming/</guid><pubDate>Sun, 03 Jan 2021 18:49:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-01-03T18:49:11.000Z&quot;,
  &quot;description&quot;: &quot;Knowledge about programming Arduino boards&quot;,
  &quot;tags&quot;: [&quot;arduino&quot;, &quot;cpp&quot;],
  &quot;title&quot;: &quot;Arduino Programming&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Arduino Programming&quot;), mdx(&quot;p&quot;, null, &quot;Code for Arduino is typically written in &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../cpp/&quot;
  }, &quot;C++&quot;), &quot; in the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://www.arduino.cc/en/software&quot;
  }, &quot;Arduino IDE&quot;), &quot; or &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://create.arduino.cc/editor&quot;
  }, &quot;Arduino Web Editor&quot;), &quot;.&quot;), mdx(&quot;p&quot;, null, &quot;The web editor is preferred over the IDE because it is always current and makes code sharing easier. To enable communication from the browser to a local Arduino device requires &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://create.arduino.cc/getting-started/plugin&quot;
  }, &quot;installation of the Arduino Create Plugin&quot;), &quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;Enable Serial Logging&quot;), mdx(&quot;p&quot;, null, &quot;Serial logging is useful for debugging. To start serial logging, call the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://www.arduino.cc/reference/en/language/functions/communication/serial/begin/&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;a&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;Serial.begin()&quot;), &quot; function&quot;), &quot; in the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;setup&quot;), &quot; function:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;cpp&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-cpp&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-cpp&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;void&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;setup&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n  Serial&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;begin&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;9600&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;)))), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://www.arduino.cc/reference/en/language/functions/communication/serial/println/&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;a&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;Serial.println()&quot;), &quot; function&quot;), &quot; can then print values to the serial monitor.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Arduino tone() Function]]></title><description><![CDATA[Use the Arduino tone() function to play a song]]></description><link>https://www.jamestharpe.com/arduino-tone/</link><guid isPermaLink="false">https://www.jamestharpe.com/arduino-tone/</guid><pubDate>Sun, 03 Jan 2021 18:45:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-01-03T18:45:11.000Z&quot;,
  &quot;description&quot;: &quot;Use the Arduino tone() function to play a song&quot;,
  &quot;tags&quot;: [&quot;arduino-programming&quot;],
  &quot;title&quot;: &quot;Arduino tone() Function&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Arduino &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;h1&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;tone()&quot;), &quot; function&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://www.arduino.cc/reference/en/language/functions/advanced-io/tone/&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;a&quot;
  }, &quot;Arduino &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;strong&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;tone()&quot;), &quot; function&quot;)), &quot; generates a square wave of the specified frequency on a pin, which can be used to emit a tone.&quot;), mdx(&quot;h2&quot;, null, &quot;Use &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;h2&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;tone()&quot;), &quot; to Play a Melody&quot;), mdx(&quot;p&quot;, null, &quot;The following code was adapted from the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://www.arduino.cc/en/Tutorial/BuiltInExamples/toneMelody&quot;
  }, &quot;Play a Melody using the tone() function&quot;), &quot; Built-In Example tutorial.&quot;), mdx(&quot;iframe&quot;, {
    src: &quot;https://create.arduino.cc/editor/jamestharpe/3ef73b15-330f-4a70-ab8f-b24697ef66d5/preview?F=pitches.h?embed&quot;,
    style: {
      &quot;height&quot;: &quot;510px&quot;,
      &quot;width&quot;: &quot;100%&quot;,
      &quot;margin&quot;: &quot;10px 0&quot;
    },
    frameBorder: &quot;0&quot;
  }));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Arduino Uno]]></title><description><![CDATA[The open-source electronics platform for interactive projects and prototypes]]></description><link>https://www.jamestharpe.com/arduino-uno/</link><guid isPermaLink="false">https://www.jamestharpe.com/arduino-uno/</guid><pubDate>Sun, 03 Jan 2021 13:22:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-01-03T13:22:11.000Z&quot;,
  &quot;description&quot;: &quot;The open-source electronics platform for interactive projects and prototypes&quot;,
  &quot;tags&quot;: [&quot;arduino&quot;],
  &quot;title&quot;: &quot;Arduino Uno&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Arduino Uno&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Arduino Uno&quot;), &quot; is the most popular of the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://www.arduino.cc/en/Main/Products&quot;
  }, &quot;Arduino boards&quot;), &quot; available and the easiest to get started with.&quot;), mdx(&quot;h2&quot;, null, &quot;Capabilities Summary&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;USB Type B connector provides data and power in&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;DC Barrel Connector provides power in&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;14 Digital I/O Pins&quot;, mdx(&quot;ul&quot;, {
    parentName: &quot;li&quot;
  }, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Pulse Width Modulation on pins 3, 5, 6, 9, 10, and 11&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Serial Communication on pins 0 and 1&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Serial Peripheral Interface (SPI) communication on pins 10, 11, 12, and 13&quot;))), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;6 Analog Input Pins&quot;, mdx(&quot;ul&quot;, {
    parentName: &quot;li&quot;
  }, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Two Wire Interface (TWI) support on pins A4 and A5&quot;))), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Can be powered by a 9V battery&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;\&quot;Power pins\&quot; can power the board, external devices, and shields&quot;)), mdx(&quot;h3&quot;, null, &quot;Power Requirements&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;From 7 to 12 &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;../electricity/&quot;
  }, &quot;volts&quot;))), mdx(&quot;h2&quot;, null, &quot;Arduino Uno Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://content.arduino.cc/assets/UNO-TH_Rev3e_sch.pdf&quot;
  }, &quot;Arduino Uno Schematics (PDF)&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Electrical Engineering]]></title><description><![CDATA[Build and deconstruct electrically powered devices]]></description><link>https://www.jamestharpe.com/electrical-engineering/</link><guid isPermaLink="false">https://www.jamestharpe.com/electrical-engineering/</guid><pubDate>Sun, 03 Jan 2021 13:19:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2021-01-03T13:19:11.000Z&quot;,
  &quot;description&quot;: &quot;Build and deconstruct electrically powered devices&quot;,
  &quot;tags&quot;: [&quot;electricity&quot;, &quot;engineering&quot;],
  &quot;title&quot;: &quot;Electrical Engineering&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Electrical Engineering and Electronics&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Electrical engineering&quot;), &quot; is the practical application of &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../electricity/&quot;
  }, &quot;electricity&quot;), &quot; to create new tools and devices.&quot;), mdx(&quot;h2&quot;, null, &quot;Terminology&quot;), mdx(&quot;table&quot;, null, mdx(&quot;thead&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;thead&quot;
  }, mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Term&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Definition&quot;))), mdx(&quot;tbody&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Analog-to-Digital Converter (ADC)&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;A converter that changes an analog signal to a digital signal.&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Baud Rate&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;The number of bits per second that can be sent over a serial connection&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;a&quot;, {
    parentName: &quot;td&quot;,
    &quot;href&quot;: &quot;../conductance/&quot;
  }, &quot;Conductor&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;A material that conducts electricity well because it has weak valence bonds such as copper, gold, silver, aluminum, or even saltwater.&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Digital Pin&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;A type of pin that can only be in an \&quot;on\&quot; or \&quot;off\&quot; state.&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Digital to Analog Converter (DAC)&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;A converter that changes a digital signal to an analog signal.&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Electrical Contact&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;An electrical circuit component that consists of a conductive material (typically metal) that, when touched to another contact, can pass an electrical &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;td&quot;,
    &quot;href&quot;: &quot;../electricity/&quot;
  }, &quot;current&quot;), &quot;.&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Electrical Load&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;The portion of a circuit that uses &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;td&quot;,
    &quot;href&quot;: &quot;../watts-law/&quot;
  }, &quot;electrical power&quot;))), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Electrical Signal&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;An variation in &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;td&quot;,
    &quot;href&quot;: &quot;../ohms-law/&quot;
  }, &quot;voltage or current&quot;), &quot; frequency, phase, or duration used to represent information&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Insulator&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;A material that conducts electricity poorly because it has strong valence bonds such as glass, rubber, plastic, and even air&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Pin&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;A type of electrical contact in which the connection is designed to be pressed together (i.e. a plug) to form a reliable, low-&quot;, mdx(&quot;a&quot;, {
    parentName: &quot;td&quot;,
    &quot;href&quot;: &quot;../resistance/&quot;
  }, &quot;resistance&quot;), &quot; connection.&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Power Supply&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Av electrical device that supplies &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;td&quot;,
    &quot;href&quot;: &quot;../watts-law/&quot;
  }, &quot;power&quot;), &quot; to a circuit&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Semiconductor&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;A material that can act like an insulator or conductor, depending on the circumstances such as Silicon&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Serial Port&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;An interface through which an electrical signal is transferred sequentially, one bit at a time&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Two Wire Interface (TWI)&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;A communication protocol consisting of a data line and a clock line.&quot;)))), mdx(&quot;h2&quot;, null, &quot;Conventions&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Red wires are typically used for power and connect to positive terminals&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Black wires are typically used for ground and connect to negative terminals&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Other colors are typically used for electrical signals&quot;)), mdx(&quot;h2&quot;, null, &quot;Electrical Engineering YouTube Channels&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCpOlOeQjj7EsVnDh3zuCgsA&quot;
  }, &quot;Adafruit Industries&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCRs9vVRoVo4BTBceFRaJnpA&quot;
  }, &quot;Brian Brocken&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCp5ShPYJvi2EA4hLUERa86w&quot;
  }, &quot;Core Electronics&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCJ0-OtVpF0wOKEqT2Z1HEtA&quot;
  }, &quot;ElectroBOOM&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UC6mIxFTvXkWQVEHPsEdflzQ&quot;
  }, &quot;GreatScott!&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCqQzKnjSPjkJGMcjPg-Wktw&quot;
  }, &quot;Hackster.io&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCFIjVWFZ__KhtTXHDJ7vgng&quot;
  }, &quot;Raspberry Pi&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCSY6p1ZwMs0lW2XP7Zc7k9g&quot;
  }, &quot;RimstarOrg&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCZDA1kA3y3EIg25BpcHSpwQ&quot;
  }, &quot;Tinkernut&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[State Machines]]></title><description><![CDATA[Abstract representations of system state at a given point in time]]></description><link>https://www.jamestharpe.com/state-machines/</link><guid isPermaLink="false">https://www.jamestharpe.com/state-machines/</guid><pubDate>Wed, 30 Dec 2020 18:07:46 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-12-30T18:07:46.000Z&quot;,
  &quot;description&quot;: &quot;Abstract representations of system state at a given point in time&quot;,
  &quot;tags&quot;: [&quot;computer-science&quot;],
  &quot;title&quot;: &quot;State Machines&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;State Machines&quot;), mdx(&quot;p&quot;, null, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;state machine&quot;), &quot; is an abstract representation of a system&apos;s state at a given point in time. A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;transition&quot;), &quot; is the change from one state to another given a set of inputs.&quot;), mdx(&quot;p&quot;, null, &quot;There are two types of state machines: Finite, and infinite. A finite state machine (FSM) has a finite number of states and actions whereas an infinite state machine has an infinite number of states and/or actions. Generally, the term \&quot;state machine\&quot; refers to a finite state machine.&quot;), mdx(&quot;p&quot;, null, &quot;State machines can be depicted formally in a visual format, which makes them useful for describing complex systems.&quot;), mdx(&quot;h2&quot;, null, &quot;State Machine Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://statecharts.github.io/what-is-a-state-machine.html&quot;
  }, &quot;What is a State Machine?&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Statecharts]]></title><description><![CDATA[A visual formalism for complex systems]]></description><link>https://www.jamestharpe.com/statecharts/</link><guid isPermaLink="false">https://www.jamestharpe.com/statecharts/</guid><pubDate>Wed, 30 Dec 2020 18:07:46 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-12-30T18:07:46.000Z&quot;,
  &quot;description&quot;: &quot;A visual formalism for complex systems&quot;,
  &quot;tags&quot;: [&quot;state-machines&quot;],
  &quot;title&quot;: &quot;Statecharts&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Statecharts&quot;), mdx(&quot;p&quot;, null, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;statechart&quot;), &quot; is a compound form of &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../state-machines/&quot;
  }, &quot;state machines&quot;), &quot;, meaning a statechart is a configuration of multiple state machines. State machines within a statechart can be organized hierarchically, in parallel, or some combination of both.&quot;), mdx(&quot;h2&quot;, null, &quot;Statechart Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://statecharts.github.io/&quot;
  }, &quot;The World of Statecharts&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.sciencedirect.com/science/article/pii/0167642387900359&quot;
  }, &quot;Statecharts: A visual formalism for complex systems&quot;), &quot; (original paper defining statecharts)&quot;)));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[XState (JavaScript Library)]]></title><description><![CDATA[A library to create state machines and state charts written in JavaScript]]></description><link>https://www.jamestharpe.com/xstate/</link><guid isPermaLink="false">https://www.jamestharpe.com/xstate/</guid><pubDate>Wed, 30 Dec 2020 18:03:46 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-12-30T18:03:46.000Z&quot;,
  &quot;description&quot;: &quot;A library to create state machines and state charts written in JavaScript&quot;,
  &quot;tags&quot;: [&quot;javascript&quot;, &quot;state-machines&quot;, &quot;statecharts&quot;, &quot;actor-model&quot;],
  &quot;title&quot;: &quot;XState (JavaScript Library)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;XState&quot;), mdx(&quot;p&quot;, null, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://xstate.js.org/&quot;
  }, &quot;XState&quot;), &quot; is a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../javascript/&quot;
  }, &quot;JavaScript&quot;), &quot; framework by &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://stately.ai/&quot;
  }, &quot;Stately&quot;), &quot; for managing &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../state-machines/&quot;
  }, &quot;state machines&quot;), &quot; and &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../statecharts/&quot;
  }, &quot;statecharts&quot;), &quot; and includes the ability to treat them as &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../actor-model/&quot;
  }, &quot;actors&quot;), &quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;Example XState Project: Gas Pump&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://codesandbox.io/s/fervent-noyce-yhnrc&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;a&quot;
  }, &quot;gas pump example project&quot;)), &quot; uses XState to implement a basic gas pump as if it were an integration of three separate applications, each using a statechart unknown to the other applications, but potentially dependent on them. This was important to prove conceptually for potential use in a multi-team enterprise setting.&quot;), mdx(&quot;p&quot;, null, &quot;This was accomplished by using two separate registries:&quot;), mdx(&quot;ol&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;A Statechart Registry for each application&apos;s statecharts&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;A UI Component Registry to map UI Components (plain HTML &amp; JS - no framework) to available actions&quot;)), mdx(&quot;p&quot;, null, &quot;The Statechart Registry is used to assemble a \&quot;Super Statechart\&quot; to manage shared context and cross-statechart communication. This was easily achieved by virtue of each application&apos;s statechart being subjugated to the Super Statechart, which gave each app&apos;s statechart a shared context and enabled communication via the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://xstate.js.org/docs/guides/actions.html#send-action&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;a&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;send&quot;), &quot; action&quot;), &quot;.&quot;), mdx(&quot;p&quot;, null, &quot;It was also necessary to merge the configuration options, which also provided a rudimentary opportunity to detect conflicts. For example, if two independent statecharts defined a &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;hasCredit&quot;), &quot; &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://xstate.js.org/docs/guides/guards.html#guarded-transitions&quot;
  }, &quot;guard&quot;), &quot;, the conflict needed to be detected to fail the formation of the Super Statechart.&quot;), mdx(&quot;h2&quot;, null, &quot;XState Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://xstate.js.org/docs/&quot;
  }, &quot;XState Documentation&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://xstate.js.org/viz/&quot;
  }, &quot;XState Visualizer&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://statecharts.io/&quot;
  }, &quot;XState Statecharts Tools&quot;))), mdx(&quot;h3&quot;, null, &quot;XState Tutorials and Presentations&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://medium.com/angular-athens/working-with-state-machines-in-angular-2817441e26bf&quot;
  }, &quot;Working with State Machines in Angular&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/watch?v=hiT4Q1ntvzg&amp;list=WL&amp;index=8&quot;
  }, &quot;Formal Forms with State Machines by David Khourshid | React Next 2019&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[C++]]></title><description><![CDATA[C++ is a general-purpose extension of the C language]]></description><link>https://www.jamestharpe.com/cpp/</link><guid isPermaLink="false">https://www.jamestharpe.com/cpp/</guid><pubDate>Sun, 27 Dec 2020 19:42:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-12-27T19:42:11.000Z&quot;,
  &quot;description&quot;: &quot;C++ is a general-purpose extension of the C language&quot;,
  &quot;tags&quot;: [&quot;computer-languages&quot;],
  &quot;title&quot;: &quot;C++&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;C++&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;C++&quot;), &quot; is a general-purpose, object-oriented, and strongly typed &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../computer-languages/&quot;
  }, &quot;programming language&quot;), &quot; that emphasizes power and performance. C++ is defined by the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;http://www.open-std.org/jtc1/sc22/wg21/&quot;
  }, &quot;JTC1/SC22/WG21 committee&quot;), &quot; (or simply WG21) and &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://en.cppreference.com/w/cpp/compiler_support&quot;
  }, &quot;implemented by multiple companies&quot;), &quot;, most of which have membership WG21.&quot;), mdx(&quot;h2&quot;, null, &quot;Hello World in C++&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;cpp&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-cpp&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-cpp&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token macro property&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token directive-hash&quot;
  }, &quot;#&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token directive keyword&quot;
  }, &quot;include&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&lt;iostream&gt;&quot;)), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;int&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;main&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n    std&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token double-colon punctuation&quot;
  }, &quot;::&quot;), &quot;cout &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;&lt;&lt;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;Hello World!\&quot;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;&lt;&lt;&quot;), &quot; std&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token double-colon punctuation&quot;
  }, &quot;::&quot;), &quot;endl&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;)))), mdx(&quot;h2&quot;, null, &quot;C++ Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://isocpp.org/tour&quot;
  }, &quot;A Tour of C++&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://en.cppreference.com/w/&quot;
  }, &quot;C++ Reference&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://code.visualstudio.com/docs/languages/cpp&quot;
  }, &quot;VS Code C++ Setup Instructions&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Physics]]></title><description><![CDATA[The fundamental nature and properties of matter, energy, and motion]]></description><link>https://www.jamestharpe.com/physics/</link><guid isPermaLink="false">https://www.jamestharpe.com/physics/</guid><pubDate>Sat, 26 Dec 2020 23:26:46 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-12-26T23:26:46.000Z&quot;,
  &quot;description&quot;: &quot;The fundamental nature and properties of matter, energy, and motion&quot;,
  &quot;tags&quot;: [&quot;science&quot;],
  &quot;title&quot;: &quot;Physics&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Fundamental Terms of Physics&quot;), mdx(&quot;h2&quot;, null, &quot;Energy, Work, and Displacement&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Energy&quot;), &quot; is the ability to do work. &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Work&quot;), &quot; is the energy transferred to an object (force) that causes a displacement. A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;displacement&quot;), &quot; is the measure of the distance moved in a specific direction, or the shortest distance from an initial to a final position. A simple way to think of work is as the amount of energy given to or taken away from an object.&quot;), mdx(&quot;p&quot;, null, mdx(&quot;img&quot;, {
    parentName: &quot;p&quot;,
    &quot;src&quot;: &quot;../img/distance-vs-displacement.svg&quot;,
    &quot;alt&quot;: &quot;Distance vs. Displacement&quot;
  })), mdx(&quot;h2&quot;, null, &quot;Joules, Force, and Newtons&quot;), mdx(&quot;p&quot;, null, &quot;Energy and work are most commonly measured in joules (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;J&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;J&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.09618em&quot;
    }
  }, &quot;J&quot;))))), &quot;). One &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;joule&quot;), &quot; is equal to the energy required for one newton (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;N&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;N&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.10903em&quot;
    }
  }, &quot;N&quot;))))), &quot;) of force to perform a displacement of one meter (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;m&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;m&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.43056em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;m&quot;))))), &quot;), or &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;J&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;N&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;m&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;J=Nm&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.09618em&quot;
    }
  }, &quot;J&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.10903em&quot;
    }
  }, &quot;N&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;m&quot;))))), &quot;.&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Force&quot;), &quot; is energy transferred to an object (a \&quot;push\&quot; or a \&quot;pull\&quot;) that will change the motion of an object, if unopposed by another force. Force is measured in Newtons. One &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;newton&quot;), &quot; is the force required to accelerate one kilogram (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;k&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;g&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;kg&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8888799999999999em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.19444em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.03148em&quot;
    }
  }, &quot;k&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.03588em&quot;
    }
  }, &quot;g&quot;))))), &quot;) one meter per second squared, or &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;1&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;N&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mfrac&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;mfrac&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;1&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;k&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;g&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u2217&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;1&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;m&quot;)), mdx(&quot;mrow&quot;, {
    parentName: &quot;mfrac&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;1&quot;), mdx(&quot;msup&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;s&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;2&quot;))))), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;1N = \\frac{1kg*1m}{1s^2}&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.10903em&quot;
    }
  }, &quot;N&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1.277216em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.345em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mopen nulldelimiter&quot;
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mfrac&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t vlist-t2&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.9322159999999999em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-2.6550000000000002em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;3em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal mtight&quot;
  }, &quot;s&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.7463142857142857em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-2.786em&quot;,
      &quot;marginRight&quot;: &quot;0.07142857142857144em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.5em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size3 size1 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;2&quot;))))))))))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.23em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;3em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;frac-line&quot;,
    &quot;style&quot;: {
      &quot;borderBottomWidth&quot;: &quot;0.04em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.446108em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;3em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal mtight&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.03148em&quot;
    }
  }, &quot;k&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal mtight&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.03588em&quot;
    }
  }, &quot;g&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mbin mtight&quot;
  }, &quot;\u2217&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal mtight&quot;
  }, &quot;m&quot;))))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-s&quot;
  }, &quot;\u200B&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.345em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;
  }))))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mclose nulldelimiter&quot;
  })))))), &quot;. The equation for force can also be written as the product of mass (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;M&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;M&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.10903em&quot;
    }
  }, &quot;M&quot;))))), &quot;) and acceleration (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;A&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;A&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;A&quot;))))), &quot;), or &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;F&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;M&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;A&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;F=MA&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.13889em&quot;
    }
  }, &quot;F&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.10903em&quot;
    }
  }, &quot;M&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;A&quot;))))), &quot;.&quot;), mdx(&quot;h3&quot;, null, &quot;Video: How Much Energy is One Joule?&quot;), mdx(&quot;iframe&quot;, {
    width: &quot;560&quot;,
    height: &quot;315&quot;,
    src: &quot;https://www.youtube.com/embed/_qEBElHoYUA&quot;,
    frameBorder: &quot;0&quot;,
    allow: &quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot;,
    allowFullScreen: true
  }), mdx(&quot;h2&quot;, null, &quot;Mass, Velocity, and Acceleration&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Mass&quot;), &quot; is the amount of matter that makes up an object. Mass is measured in kilograms (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;k&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;g&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;kg&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8888799999999999em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.19444em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.03148em&quot;
    }
  }, &quot;k&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.03588em&quot;
    }
  }, &quot;g&quot;))))), &quot;). A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;kilogram&quot;), &quot; was originally defined to equal to the mass of one litre of water, or 1,000 cubic centimeters of water (thus &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;1&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;g&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;1g&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8388800000000001em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.19444em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.03588em&quot;
    }
  }, &quot;g&quot;))))), &quot; is the mass of &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;1&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;c&quot;), mdx(&quot;msup&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;m&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;3&quot;))), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;1cm^3&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;c&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;m&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.063em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;3&quot;)))))))))))), &quot; of water). It&apos;s still useful to think of kilogram as defined this way; however the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://www.bipm.org/en/si-base-units/kilogram&quot;
  }, &quot;formal definition&quot;), &quot; of kilogram is more complicated.&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Velocity&quot;), &quot; is the distance (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;d&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;d&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.69444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;d&quot;))))), &quot;) traveled in a given direction over time (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;t&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;t&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.61508em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;t&quot;))))), &quot;), or &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;V&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;d&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;t&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;V=d/t&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.22222em&quot;
    }
  }, &quot;V&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;d&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;t&quot;))))), &quot; and is often expressed as meters per second (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;m&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;s&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;m/s&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;m&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;s&quot;))))), &quot;).&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Acceleration&quot;), &quot; is the rate of change in velocity (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;V&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;V&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.22222em&quot;
    }
  }, &quot;V&quot;))))), &quot;) over time (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;T&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;T&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.13889em&quot;
    }
  }, &quot;T&quot;))))), &quot;), or &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;A&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;\u0394&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;V&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;\u0394&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;T&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;A=\\Delta{V}/\\Delta{T}&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;A&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;\u0394&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.22222em&quot;
    }
  }, &quot;V&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;\u0394&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.13889em&quot;
    }
  }, &quot;T&quot;)))))), &quot;, in other words acceleration is how much an object is speeding up, slowing down, or changing direction.&quot;), mdx(&quot;h3&quot;, null, &quot;Video: Acceleration, One-Dimensional Motion&quot;), mdx(&quot;iframe&quot;, {
    width: &quot;560&quot;,
    height: &quot;315&quot;,
    src: &quot;https://www.youtube.com/embed/FOkQszg1-j8&quot;,
    frameBorder: &quot;0&quot;,
    allow: &quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot;,
    allowFullScreen: true
  }), mdx(&quot;h2&quot;, null, &quot;Kinetic and Potential Energy&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Kinetic energy&quot;), &quot; is the energy an object possesses by being in motion (moving)&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Potential energy&quot;), &quot; is the energy an object has by being at rest (not moving)&quot;)), mdx(&quot;h3&quot;, null, &quot;Gravitational Potential Energy&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Gravitational Potential Energy&quot;), &quot; is the energy an object has by being at some height and would be converted to kinetic energy when the object is dropped. The force of Gravity on Earth (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;G&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;G&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;G&quot;))))), &quot;) is constant at &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;9.8&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;m&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;msup&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;s&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;2&quot;))), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;9.8m/s^2&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1.064108em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;9&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;8&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;m&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;s&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.063em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;2&quot;)))))))))))), &quot;, therefore to calculate the gravitational energy of an object, we can use &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;G&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;G&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;G&quot;))))), &quot; as the value for force, the object&apos;s height (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;H&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;H&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.08125em&quot;
    }
  }, &quot;H&quot;))))), &quot;) as the distance, and the objects mass (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;M&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;M&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.10903em&quot;
    }
  }, &quot;M&quot;))))), &quot;) for the mass, or: &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;J&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;M&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;G&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;H&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;J=MGH&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.09618em&quot;
    }
  }, &quot;J&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.10903em&quot;
    }
  }, &quot;M&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;G&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.08125em&quot;
    }
  }, &quot;H&quot;))))), &quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;Physics Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UC78CNYDm55nw-rI7ZsZpIzw&quot;
  }, &quot;Badzilla&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCUHW94eEFW7hkUMVaZz4eDg&quot;
  }, &quot;Minute Physics&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://physics.info/&quot;
  }, &quot;The Physics Hypertextbook&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.khanacademy.org/science/physics&quot;
  }, &quot;Physics Course on Khan Academy&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UC7DdEm33SyaTDtWYGO2CwdA&quot;
  }, &quot;Physics Girl YouTube Channel&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Power (Physics)]]></title><description><![CDATA[Energy that results from charged particles]]></description><link>https://www.jamestharpe.com/power/</link><guid isPermaLink="false">https://www.jamestharpe.com/power/</guid><pubDate>Sat, 26 Dec 2020 18:40:46 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-12-26T18:40:46.000Z&quot;,
  &quot;description&quot;: &quot;Energy that results from charged particles&quot;,
  &quot;tags&quot;: [&quot;physics&quot;],
  &quot;title&quot;: &quot;Power (Physics)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Power (Physics)&quot;), mdx(&quot;p&quot;, null, &quot;In &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../physics/&quot;
  }, &quot;physics&quot;), &quot;, &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Power&quot;), &quot; (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;P&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;P&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.13889em&quot;
    }
  }, &quot;P&quot;))))), &quot;) is the rate at which work is done (or energy is transferred) over time (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;t&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;t&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.61508em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;t&quot;))))), &quot;). Recall that work is a change in energy, therefore Power is the change in energy (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;E&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;E&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.05764em&quot;
    }
  }, &quot;E&quot;))))), &quot;) over the change in time, or &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;P&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;\u0394&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;E&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;\u0394&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;t&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;P=\\Delta{E}/\\Delta{t}&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.13889em&quot;
    }
  }, &quot;P&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;\u0394&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.05764em&quot;
    }
  }, &quot;E&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;\u0394&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;t&quot;)))))), &quot;.&quot;), mdx(&quot;p&quot;, null, &quot;Power can be expressed as as the product of force (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;F&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;F&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.13889em&quot;
    }
  }, &quot;F&quot;))))), &quot;) and velocity (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;V&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;V&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.22222em&quot;
    }
  }, &quot;V&quot;))))), &quot;), or &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;P&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;F&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;V&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;P=FV&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.13889em&quot;
    }
  }, &quot;P&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.13889em&quot;
    }
  }, &quot;F&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.22222em&quot;
    }
  }, &quot;V&quot;))))), &quot;, because force is energy transferred to an object (a change in energy) and velocity is the change in position over time (a change in time).&quot;), mdx(&quot;p&quot;, null, &quot;Power is measured in &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../watts-law/&quot;
  }, &quot;watts&quot;), &quot;. One &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;watt&quot;), &quot; is equal to 1 joule per second, or &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;W&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;J&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;s&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;W=J/s&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.13889em&quot;
    }
  }, &quot;W&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.09618em&quot;
    }
  }, &quot;J&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;s&quot;))))), &quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;Video: Power - Physics 101 / AP Physics Review&quot;), mdx(&quot;iframe&quot;, {
    width: &quot;560&quot;,
    height: &quot;315&quot;,
    src: &quot;https://www.youtube.com/embed/TQxmptAXkeo&quot;,
    frameBorder: &quot;0&quot;,
    allow: &quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot;,
    allowFullScreen: true
  }));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Timeboxing]]></title><description><![CDATA[How timeboxes work]]></description><link>https://www.jamestharpe.com/timeboxing/</link><guid isPermaLink="false">https://www.jamestharpe.com/timeboxing/</guid><pubDate>Sat, 26 Dec 2020 16:30:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-12-26T16:30:11.000Z&quot;,
  &quot;description&quot;: &quot;How timeboxes work&quot;,
  &quot;tags&quot;: [&quot;project-management&quot;],
  &quot;title&quot;: &quot;Timeboxing&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Timeboxing&quot;), mdx(&quot;p&quot;, null, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;timebox&quot;), &quot; is a fixed amount of time dedicated exclusively to a particular goal. At the end of that time, the work is evaluated even if it&apos;s incomplete. The idea is to create focus on the goal by eliminating other goals from focus that may be important, but can also create distraction. The timebox ends with a \&quot;hard stop\&quot; to provide an opportunity to assess the progress and decide what to do next.&quot;), mdx(&quot;p&quot;, null, &quot;At the end of a timebox, the options generally are:&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Keep working on the goal&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Keep working on the goal, but change how the work is done&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Do something else&quot;)), mdx(&quot;p&quot;, null, &quot;The basic structure of a timebox is to:&quot;), mdx(&quot;ol&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;Decide on the goal and set aside a fixed amount of time&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;Work toward the goal for the fixed amount of time&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;Stop work and evaluate what to do next&quot;)));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Email Productivity]]></title><description><![CDATA[Tips, tricks, and hacks to improve email management]]></description><link>https://www.jamestharpe.com/email-productivity/</link><guid isPermaLink="false">https://www.jamestharpe.com/email-productivity/</guid><pubDate>Sat, 26 Dec 2020 15:29:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-12-26T15:29:11.000Z&quot;,
  &quot;description&quot;: &quot;Tips, tricks, and hacks to improve email management&quot;,
  &quot;tags&quot;: [&quot;personal-productivity&quot;, &quot;4d-time-management&quot;],
  &quot;title&quot;: &quot;Email Productivity&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Email Productivity Tips &amp; Tricks&quot;), mdx(&quot;p&quot;, null, &quot;Here are some quick \&quot;hacks\&quot; that help manage email.&quot;), mdx(&quot;h2&quot;, null, &quot;Reduce Distractions from Email&quot;), mdx(&quot;p&quot;, null, &quot;Email notifications can take you out of your \&quot;flow\&quot;. Even when you&apos;re intentionally checking email, new emails coming in can distract you from the email you&apos;re currently reading or responding to. Yet it&apos;s often impractical to close your inbox even when you&apos;re not checking email, because &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;something important might happen&quot;), &quot; or your email is integrated with your calendar and you rely on the meeting reminders.&quot;), mdx(&quot;p&quot;, null, &quot;What you &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;can&quot;), &quot; do is &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;customize your notifications&quot;), &quot;. For example:&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Only allow email notifications when the email is from your boss or a client&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Automatically schedule times for \&quot;do not disturb\&quot; mode&quot;)), mdx(&quot;p&quot;, null, &quot;If you want to try disabling notifications, but are worried you&apos;ll miss something: Setup an auto-responder with an alternative contact method. For example:&quot;), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;I&apos;m working on a big project right now and not checking email. If this is urgent, please call ...&quot;)), mdx(&quot;h2&quot;, null, &quot;Raise Important Emails to the Top&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Filter out \&quot;FYI\&quot; emails&quot;), &quot; with a rule to put emails where you&apos;re not on the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;To:&quot;), &quot; line into a separate folder. Your inbox will instantly be more focused on emails that require action.&quot;), mdx(&quot;p&quot;, null, &quot;Other rules might also be useful to raise the visibility of important emails, for example:&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Mark emails from specific people as high/low priority&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Move mailing lists and newsletters to a lower-priority folder&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Ignore specific threads where the use of \&quot;Reply All\&quot; has gotten out of hand&quot;)), mdx(&quot;h2&quot;, null, &quot;Schedule Email Timeboxes&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Limit time spent in email&quot;), &quot; to one or two &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../timeboxing/&quot;
  }, &quot;timeboxes&quot;), &quot; per &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../daily-routine/&quot;
  }, &quot;day&quot;), &quot;. Prefer scheduling this time for the second half of the day so that responses to your email don&apos;t trigger disruptions throughout the day. If you &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;must&quot;), &quot; check email at the beginning of your day, consider the \&quot;send later\&quot; feature as another means of preventing disruptions.&quot;), mdx(&quot;p&quot;, null, &quot;During each timebox, focus on getting through as many emails as possible using the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../4d-time-management/&quot;
  }, &quot;4D time management technique&quot;), &quot;: For each email that require action:&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Do it.&quot;), &quot; Respond right away if it will take less than five minutes.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Delegate it.&quot;), &quot; Respond right away and make it clear who&apos;s responsible.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Defer it.&quot;), &quot; Schedule a time to respond to that email specifically.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Delete everything else.&quot;))), mdx(&quot;h2&quot;, null, &quot;Replace Emails with Links&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Don&apos;t write emails, email links.&quot;), &quot; Rather than responding to emails with more email, write your response in any sharable location. A blog post, a shared document, a wiki, a knowledge base, whatever. Then respond with a link to that location. If that link is shared only once, it saved you from responding to another email.&quot;), mdx(&quot;h2&quot;, null, &quot;Declare Email Bankruptcy&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Delete all unread emails&quot;), &quot; older than six months (or one year, if that&apos;s too scary). You were never going to respond anyway.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Productive Daily Routines]]></title><description><![CDATA[A step-by-step process to build a productive daily routine]]></description><link>https://www.jamestharpe.com/daily-routine/</link><guid isPermaLink="false">https://www.jamestharpe.com/daily-routine/</guid><pubDate>Fri, 25 Dec 2020 00:01:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-12-25T00:01:11.000Z&quot;,
  &quot;description&quot;: &quot;A step-by-step process to build a productive daily routine&quot;,
  &quot;tags&quot;: [&quot;personal-productivity&quot;],
  &quot;title&quot;: &quot;Productive Daily Routines&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;How to Build a Productive Daily Routine&quot;), mdx(&quot;p&quot;, null, &quot;An effective daily routine is the cornerstone of &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../personal-productivity/&quot;
  }, &quot;personal productivity&quot;), &quot; that allows us to stay focused on achieving our larger goals. How do we get from our current daily routine to a more effective one?&quot;), mdx(&quot;p&quot;, null, &quot;Changes in routine are best done in small increments. We start where we are, make small adjustments, then once those adjustments become routine we can make more adjustments.&quot;), mdx(&quot;h2&quot;, null, &quot;1. Design and \&quot;Ideal\&quot; Daily Routine&quot;), mdx(&quot;p&quot;, null, &quot;Start by designing an ideal daily routine, but don&apos;t worry about sticking to it yet. Just make sure it has all the elements that will help meet your goals. Start with self-care (sleep well, eat well, exercise, be mindful) and build from there.&quot;), mdx(&quot;h3&quot;, null, &quot;Example \&quot;Ideal\&quot; Day&quot;), mdx(&quot;p&quot;, null, &quot;I want more time to be creative, plus I need to exercise more, so here&apos;s my ideal day which incorporates both:&quot;), mdx(&quot;table&quot;, null, mdx(&quot;thead&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;thead&quot;
  }, mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Time&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Activity&quot;))), mdx(&quot;tbody&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;06:00AM&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Exercise&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;06:30AM&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Get ready for the day (shower, shave, etc)&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;07:00AM&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Healthy breakfast&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;07:30AM&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Uninterrupted creative time&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;09:30AM&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Work / be productive, move during short breaks&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;12:30PM&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Healthy lunch&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;01:00PM&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Work / be productive, move during short breaks&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;04:00PM&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Follow-ups: Email, missed chats, meeting notes&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;05:30PM&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Personal enrichment - learning, hobbies, etc&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;06:30PM&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Dinner with the family&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;07:30PM&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Cleanup, housework, chores, etc.&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;08:30PM&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Relax, watch TV, browse social media, whatever&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;09:30PM&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Screens off, get ready for bed, read&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;10:00PM&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Lights out, sleep&quot;)))), mdx(&quot;h2&quot;, null, &quot;2. Track Deviations&quot;), mdx(&quot;p&quot;, null, &quot;Once your routine is designed, go about your usual routine but the ideal in mind. Stick to the ideal routine where you can, but don&apos;t make a big effort. Your goal isn&apos;t to stick to the routine, it&apos;s to understand why you won&apos;t be able to stick with it long-term. Keep a log of for one full week of how and &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../five-whys/&quot;
  }, &quot;why&quot;), &quot; you deviated from the routine.&quot;), mdx(&quot;p&quot;, null, &quot;At the end of the week, compare your idea daily routine with your typical daily routine side-by-side.&quot;), mdx(&quot;h2&quot;, null, &quot;3. Make &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;h2&quot;
  }, &quot;One&quot;), &quot; Small Change at a Time&quot;), mdx(&quot;p&quot;, null, &quot;Pick one item from the ideal routine where just having the intention isn&apos;t enough to stick to it. Brainstorm ways you can make it easier. Can you make it smaller? Easier? More convenient? More fun or rewarding?&quot;), mdx(&quot;p&quot;, null, &quot;For example, if your intention is to exercise for 30 minutes each morning but you haven&apos;t been able to do it consistently, then make your intention to exercise for 5 minutes each morning.&quot;), mdx(&quot;p&quot;, null, &quot;Once you&apos;ve decided on a small adjustment to your daily routine, set a reminder with your phone&apos;s alarm or calendar app to remind you to focus on this part of your routine each day.&quot;), mdx(&quot;h2&quot;, null, &quot;4. Repeat&quot;), mdx(&quot;p&quot;, null, &quot;Once you&apos;re able to stick with a small change consistently for a month, go back to step three and make another change. If you&apos;re feeling motivated and a monthly pace seems too slow, go with it! Make more small changes, or a few bigger ones. When your motivation wanes, cut back, reset, and start again at step 1.&quot;), mdx(&quot;h2&quot;, null, &quot;5. Revisit&quot;), mdx(&quot;p&quot;, null, &quot;Every 3 - 6 months, or at least once per year, re-visit your \&quot;ideal\&quot; day. Even if you&apos;ve only made a few changes, noting the progress will help supply motivation for a few more moths. Now may be the time to map out a new \&quot;ideal day\&quot; based new insights and goals. Change it as needed, and keep going through the steps. Slow and steady wins the race.&quot;), mdx(&quot;h2&quot;, null, &quot;Additional Tips for Building a Daily Routine&quot;), mdx(&quot;p&quot;, null, &quot;Not every waking moment must be dedicated to some maniacal vision of success as we often see in \&quot;productivity porn\&quot; and \&quot;hustle culture\&quot;. It&apos;s okay to take breaks and it&apos;s okay to recharge. Willpower is a reservoir that has to be replenished. When your routine is disrupted or you fall back into old routines that don&apos;t serve you well, go back to step one and take things one day at a time.&quot;), mdx(&quot;h2&quot;, null, &quot;Example Deviations: Problems and Solutions&quot;), mdx(&quot;table&quot;, null, mdx(&quot;thead&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;thead&quot;
  }, mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Deviation&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Solution(s)&quot;))), mdx(&quot;tbody&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Sitting at my desk for too long throughout the day&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Try the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;td&quot;,
    &quot;href&quot;: &quot;../pomodoro/&quot;
  }, &quot;pomodoro technique&quot;), &quot;, get a standing or walking desk&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Meals aren&apos;t very healthy&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Batch-cook meals ahead of time&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Checking social media too much&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Turn on Airplane or do-not-disturb mode&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Meetings keep me pinned to my desk&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Get a nice headset and go for walks during meetings&quot;)))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Existential Links]]></title><description><![CDATA[Links to websites that help you ponder your mortality]]></description><link>https://www.jamestharpe.com/existential-links/</link><guid isPermaLink="false">https://www.jamestharpe.com/existential-links/</guid><pubDate>Thu, 24 Dec 2020 17:10:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-12-24T17:10:11.000Z&quot;,
  &quot;description&quot;: &quot;Links to websites that help you ponder your mortality&quot;,
  &quot;tags&quot;: [],
  &quot;title&quot;: &quot;Existential Links&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h2&quot;, null, &quot;Existential Links&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;strong&quot;,
    &quot;href&quot;: &quot;https://www.death-clock.org/&quot;
  }, &quot;The Death Clock&quot;)), &quot; estimates how long you have to live and provides a count-down&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;strong&quot;,
    &quot;href&quot;: &quot;https://www.keysleft.com/&quot;
  }, &quot;How many keys do you have left?&quot;)), &quot; approximates how many more words you have time to type in your remaining lifetime, then equates that to the number of books, tweets, letters, and other texts you could write.&quot;)));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Stephen Covey's Time Management Matrix]]></title><description><![CDATA[Learn Covey's four-quadrant system for prioritizing time]]></description><link>https://www.jamestharpe.com/covey-time-management-matrix/</link><guid isPermaLink="false">https://www.jamestharpe.com/covey-time-management-matrix/</guid><pubDate>Thu, 24 Dec 2020 16:23:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-12-24T16:23:11.000Z&quot;,
  &quot;description&quot;: &quot;Learn Covey&apos;s four-quadrant system for prioritizing time&quot;,
  &quot;tags&quot;: [&quot;personal-productivity&quot;],
  &quot;redirect_from&quot;: [&quot;/stephen-covey/&quot;],
  &quot;title&quot;: &quot;Stephen Covey&apos;s Time Management Matrix&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;The Time Management Matrix&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Time Management Matrix&quot;), &quot; from \&quot;Habit 3, Put First Things First\&quot;, in Stephen Covey&apos;s book The Seven Habits of Highly Effective People is a model to understand and prioritize how time is spent.&quot;), mdx(&quot;table&quot;, null, mdx(&quot;thead&quot;, null, mdx(&quot;td&quot;, null, mdx(&quot;h3&quot;, null, &quot;Urgency \u27A1&quot;, mdx(&quot;br&quot;, null), &quot;Importance \u2B07&quot;)), mdx(&quot;th&quot;, null, mdx(&quot;h4&quot;, null, &quot;Urgent&quot;)), mdx(&quot;th&quot;, null, mdx(&quot;h4&quot;, null, &quot;Not Urgent&quot;))), mdx(&quot;tbody&quot;, null, mdx(&quot;tr&quot;, null, mdx(&quot;th&quot;, null, mdx(&quot;h4&quot;, null, &quot;Important&quot;)), mdx(&quot;td&quot;, null, mdx(&quot;h5&quot;, null, &quot;Q1: Urgent and Important&quot;), mdx(&quot;em&quot;, null, &quot;Do it now!&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, null, &quot;Crises&quot;), mdx(&quot;li&quot;, null, &quot;Pressing Problems&quot;), mdx(&quot;li&quot;, null, &quot;Looming Deadlines&quot;))), mdx(&quot;td&quot;, null, mdx(&quot;h5&quot;, null, &quot;Q2:Important, Not Urgent&quot;), mdx(&quot;em&quot;, null, &quot;Decide when to do it&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, null, &quot;Crises Prevention&quot;), mdx(&quot;li&quot;, null, &quot;Relationship Building&quot;), mdx(&quot;li&quot;, null, &quot;Recognizing new Opportunities&quot;), mdx(&quot;li&quot;, null, &quot;Planning&quot;), mdx(&quot;li&quot;, null, &quot;Self-care&quot;)))), mdx(&quot;tr&quot;, null, mdx(&quot;th&quot;, null, mdx(&quot;h4&quot;, null, &quot;Not Important&quot;)), mdx(&quot;td&quot;, null, mdx(&quot;h5&quot;, null, &quot;Q3: Urgent and Not Important&quot;), mdx(&quot;em&quot;, null, &quot;Delegate it&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, null, &quot;Interruptions&quot;), mdx(&quot;li&quot;, null, &quot;Junk mail, spam, etc.&quot;), mdx(&quot;li&quot;, null, &quot;Useless Meetings&quot;), mdx(&quot;li&quot;, null, &quot;Many phone notifications&quot;))), mdx(&quot;td&quot;, null, mdx(&quot;h5&quot;, null, &quot;Q4:Not Important, Not Urgent&quot;), mdx(&quot;em&quot;, null, &quot;Drop it!&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, null, &quot;Busy work&quot;), mdx(&quot;li&quot;, null, &quot;Most social media&quot;), mdx(&quot;li&quot;, null, &quot;Passive entertainment (TV, movies, etc)&quot;)))))), mdx(&quot;p&quot;, null, &quot;The basic idea is that one should try to maximize time spent on activities that fall in Quadrant 2 and minimize time spent on activities in Quadrants 3 and 4.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[4D Time Management]]></title><description><![CDATA[A triage scheme for new tasks: Delegate, Do, Defer, Drop]]></description><link>https://www.jamestharpe.com/4d-time-management/</link><guid isPermaLink="false">https://www.jamestharpe.com/4d-time-management/</guid><pubDate>Thu, 24 Dec 2020 16:04:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-12-24T16:04:11.000Z&quot;,
  &quot;description&quot;: &quot;A triage scheme for new tasks: Delegate, Do, Defer, Drop&quot;,
  &quot;tags&quot;: [&quot;personal-productivity&quot;],
  &quot;title&quot;: &quot;4D Time Management&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Delegate, Do, Defer, Drop&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;4D Time Management&quot;), &quot; is a decision framework to triage incoming tasks from \&quot;Getting Things Done: The Art of Stress-Free Productivity\&quot; by David Allen. Tasks might come from email, chat, phone calls, and other places. Handling the task quickly can help keep focus on priorities and help reduce distractions. They key to effectively handling tasks as they come in is to do, delegate, defer, or drop them.&quot;), mdx(&quot;h2&quot;, null, &quot;Do&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Do&quot;), &quot; the task right away, then and there, so you no longer have to worry about it. Knocking a task out completely helps minimize cognitive burden.&quot;), mdx(&quot;h2&quot;, null, &quot;Delegate&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Delegate&quot;), &quot; tasks that are best left to someone else. If you&apos;re worried about the task getting done, you can also &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;defer&quot;), &quot; a task to follow-up later. When delegating, I find it best to delegate urgent tasks synchronously (for example, via a meeting or phone call) and non-urgent tasks asynchronously (for example, via email).&quot;), mdx(&quot;h2&quot;, null, &quot;Defer&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Defer&quot;), &quot; tasks that you need to do, but can wait. If they&apos;re time sensitive, schedule them. If they&apos;re not time sensitive, then keep them in a running task list. I like to use a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../bullet-journaling/&quot;
  }, &quot;bullet journal&quot;), &quot; for this since it handles both.&quot;), mdx(&quot;h2&quot;, null, &quot;Drop&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Drop&quot;), &quot; everything else. This is easier said than done. Dropping tasks often comes with the anxiety of not having enough time, or working on the wrong things. Remember that important tasks tend to  persist until they&apos;ve found their way to you; and when you have too much to do, all  you can do is less.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Personal Productivity]]></title><description><![CDATA[Tips and resources to improve personal productivity]]></description><link>https://www.jamestharpe.com/personal-productivity/</link><guid isPermaLink="false">https://www.jamestharpe.com/personal-productivity/</guid><pubDate>Thu, 24 Dec 2020 14:46:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-12-24T14:46:11.000Z&quot;,
  &quot;description&quot;: &quot;Tips and resources to improve personal productivity&quot;,
  &quot;tags&quot;: [],
  &quot;redirect_from&quot;: [&quot;/7-habits/&quot;],
  &quot;title&quot;: &quot;Personal Productivity&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Personal Productivity&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Personal productivity&quot;), &quot; is the practice of doing the right things and doing things right. Identifying the right things and knowing how to do things right requires motivation; when motivation fails, it requires discipline; when discipline fails, it require forgiveness.&quot;), mdx(&quot;h2&quot;, null, &quot;Start with the Person&quot;), mdx(&quot;p&quot;, null, &quot;Personal productivity starts with the person. To be productive: Eat well, sleep well, be mindful, and and exercise. Maintain these fundamentals in your everyday routine.&quot;), mdx(&quot;p&quot;, null, &quot;Each person has goals and aspirations. These are your starting point, write them down.&quot;), mdx(&quot;h2&quot;, null, &quot;Have a Collection Point&quot;), mdx(&quot;p&quot;, null, &quot;Tasks collect in many places - email, notepads, to-do apps, and so on. Settle on a single collection point to collect all tasks. The collection point can be an app, a spreadsheet, a notepad, whatever. For me, it&apos;s my &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../bullet-journaling/&quot;
  }, &quot;bullet journal&quot;), &quot;.&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;mermaid&quot;
  }, &quot;graph TD\n\tBujo[\\Collection Point/]\n\tGoals[(\&quot;Goals &amp;&quot;, mdx(&quot;br&quot;, {
    parentName: &quot;div&quot;
  }), &quot;Aspirations\&quot;)] --&gt; Bujo\n\tEmail[(\&quot;Email\&quot;)] --&gt; Bujo\n\tIssues[(\&quot;Work\&quot;)] --&gt; Bujo\n\tChores[(\&quot;Chores\&quot;)] --&gt; Bujo&quot;), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;\&quot;Progress is made by lazy men looking for easier ways to do things.\&quot;&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;-- Robert A. Heinlein&quot;)), mdx(&quot;h2&quot;, null, &quot;Triage at the Point of Collection&quot;), mdx(&quot;p&quot;, null, &quot;Use &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../4d-time-management/&quot;
  }, &quot;4D Time Management&quot;), &quot; to triage incoming tasks:&quot;), mdx(&quot;ol&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Do it&quot;), &quot; right away, if you can&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Delegate it&quot;), &quot; if it&apos;s not important that &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;li&quot;
  }, &quot;you&quot;), &quot; do it&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Defer it&quot;), &quot; to a later date if you don&apos;t need to do it now&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Drop it&quot;), &quot; if it&apos;s unimportant&quot;)), mdx(&quot;p&quot;, null, &quot;It can sometimes be hard to drop a task, even though it&apos;s not important. It sometimes helps to remember the advice, \&quot;don&apos;t put energy into things you don&apos;t want more of.\&quot;&quot;), mdx(&quot;h2&quot;, null, &quot;Have a Daily Routine&quot;), mdx(&quot;p&quot;, null, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../daily-routine/&quot;
  }, &quot;Design a daily routine&quot;), &quot; to be the engine of progress toward your goals. Changes in routine are best done in small increments. Not every waking moment must be dedicated to some maniacal vision of success as we often see in \&quot;productivity porn\&quot; and \&quot;hustle culture\&quot;. Build in self-care: It&apos;s okay to take breaks and recharge. Willpower is a reservoir that has to be replenished.&quot;), mdx(&quot;h2&quot;, null, &quot;Have a Planning &amp; Prioritization Cycle&quot;), mdx(&quot;p&quot;, null, &quot;Use daily, weekly, monthly, and annual cycles to make small, medium, and large adjustments to your plans and priorities. In each cycle, eliminate non-critical work and break-down large tasks into smaller ones. Not much gets done while you&apos;re sleeping, so generally try break large tasks down into tasks that can be done in less than one day.&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;On a &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;daily&quot;), &quot; basis, take 5-10 minutes to list the few most important tasks you&apos;d like to accomplish that day. At the end of the day, do a 5-10 minute review to cross-off anything that&apos;s been completed or has become irrelevant.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;On a &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;weekly&quot;), &quot; or &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;monthly&quot;), &quot; basis, take an hour or two to set some medium-sized goals that will get you \&quot;one step closer\&quot; to your long-term aspirations. Break the bigger tasks into smaller tasks, or schedule time to plan them out more thoroughly. &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;../4d-time-management/&quot;
  }, &quot;Triage&quot;), &quot; left-over tasks from the previous week or month.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;On an &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;annual&quot;), &quot; basis, take a few days to a week to reflect on progress from the last year and to set expectations for the next. Drop those big ideas you won&apos;t realistically get around to so you can free-up the mental space to tackle everything else.&quot;)), mdx(&quot;p&quot;, null, &quot;A popular planning and prioritization cycle is the &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;rule of three&quot;), &quot; from from &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Getting Results the Agile Way&quot;), &quot; by J.D. Meier: Write down three outcomes for each day, each week, and each year.&quot;), mdx(&quot;p&quot;, null, &quot;Another common cycle is \&quot;Monday vision, Friday reflection\&quot; where you set out a list of intentions for the week on Monday, then reflect on what got done (or not) each Friday.&quot;), mdx(&quot;h2&quot;, null, &quot;Seek Satisfaction, Avoid Guilt&quot;), mdx(&quot;p&quot;, null, &quot;Satisfaction comes from progress and recognition, so measure what you can and share your journey. Keep a journal, a blog, a spreadsheet - whatever will help you see that your system is working.&quot;), mdx(&quot;p&quot;, null, &quot;It&apos;s natural to feel guilty when you fail to meet a commitment, fall short of a goal, or resume a habit you were trying to break. Yet you can own your failures without guilt. Define your mistake, forgive yourself for it, and adjust your plans to reality.&quot;), mdx(&quot;p&quot;, null, &quot;Ways to avoid guilt:&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Don&apos;t set self-defeating goals. For example, don&apos;t expect yourself to go from \&quot;I haven&apos;t exercised in years\&quot; to \&quot;I&apos;m going to exercise every day!\&quot; over night&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Indulge with intention. Build self-care into your routine - you won&apos;t feel bad if you zone out in front of the TV because you planned to take a necessary mental break&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Say no. When there&apos;s more to do than you can handle, all you can do is less. Saying \&quot;no\&quot; reduces mental burden.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Be deliberate. Being overtly busy is usually the result of non-deliberate action.&quot;)), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;\&quot;Being busy is a form of laziness - lazy thinking and indiscriminate action.\&quot;&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;-- Tim Ferriss&quot;)), mdx(&quot;h2&quot;, null, &quot;Disrupt Overwhelm&quot;), mdx(&quot;p&quot;, null, &quot;When feeling overwhelmed we often regress toward our most unproductive but emotionally satisfying habits. This is doubly disappointing: not only do these habits take time away from the overwhelming amount of work we need to accomplish, they often reverse progress we&apos;ve made.&quot;), mdx(&quot;p&quot;, null, &quot;It can help to have a plan of action to free up time and focus where we need to focus most. Here&apos;s a plan I got from &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/watch?v=RpH6IPhyh7I&amp;list=WL&amp;index=3&quot;
  }, &quot;Scott Hanselman&apos;s Talk on Personal Productivity&quot;), &quot;:&quot;), mdx(&quot;ol&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;Identify streams of data and write them down (be specific. e.g. write \&quot;Facebook\&quot;, not \&quot;Social Media\&quot;)&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;Sort them by signal vs. noise&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;Draw a line and drop everything below the line until no longer overwhelmed&quot;)), mdx(&quot;p&quot;, null, &quot;\&quot;Drop\&quot; can mean anything from \&quot;just ignore it\&quot; to \&quot;have my friend change my password and only give me the new one after a month\&quot; or even \&quot;delete my account\&quot;.&quot;), mdx(&quot;h3&quot;, null, &quot;Tips for Reducing Overwhelm&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Everything important will persist until it has found its way to you. Don&apos;t worry if you miss it.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Where applicable, automate the response. For example, set up an auto-response in email that you won&apos;t be answering for a while.&quot;)), mdx(&quot;h3&quot;, null, &quot;Example List of Data Streams&quot;), mdx(&quot;p&quot;, null, &quot;Here&apos;s my list of data streams, with the best signal-to-noise ratio at the top:&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Work email&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Calendar notifications&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Slack&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Text messages&quot;)), mdx(&quot;p&quot;, null, &quot;--- Way too much on my plate, drop everything below this line ---&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Feedly&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Google Hangouts&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Twitter&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Phone Calls&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Personal Email&quot;)), mdx(&quot;p&quot;, null, &quot;--- Starting to get stressed, drop everything below this line ---&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;TikTok&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Reddit&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Facebook&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Postal Mail&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Voicemail&quot;)), mdx(&quot;h2&quot;, null, &quot;Additional Productivity Tips and Tricks&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Combine TV, audio books, podcasts, and other passive forms of entertainment with working out&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Turn on your phone&apos;s \&quot;Do not Disturb\&quot; or airplane mode during Focus Time&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Turn off phone notifications on an app-by-app and person-by-person basis (set non-favorites to not ring the phone - Google it!)&quot;)), mdx(&quot;h2&quot;, null, &quot;Personal Productivity Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/watch?v=RpH6IPhyh7I&amp;list=WL&amp;index=3&quot;
  }, &quot;Scott Hanselman - Personal Productivity&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://officedynamics.com/43-folders-method-paper-system/&quot;
  }, &quot;43 Folders System&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;http://www.43folders.com/2004/09/03/introducing-the-hipster-pda&quot;
  }, &quot;Hipster PDA&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;http://amnesta.net/mba/thecommondenominatorofsuccess-albertengray.pdf&quot;
  }, &quot;The Common Denominator of Success by Albert Gray&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Git Internals]]></title><description><![CDATA[How Git works internally]]></description><link>https://www.jamestharpe.com/git-internals/</link><guid isPermaLink="false">https://www.jamestharpe.com/git-internals/</guid><pubDate>Thu, 24 Dec 2020 14:41:30 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-12-24T14:41:30.000Z&quot;,
  &quot;description&quot;: &quot;How Git works internally&quot;,
  &quot;tags&quot;: [&quot;git&quot;],
  &quot;title&quot;: &quot;Git Internals&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Git Internals&quot;), mdx(&quot;p&quot;, null, &quot;Notes from \&quot;Git from the Ground Up\&quot; by &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://safia.rocks/&quot;
  }, &quot;Safia Abdalla&quot;), &quot;.&quot;), mdx(&quot;iframe&quot;, {
    width: &quot;560&quot;,
    height: &quot;315&quot;,
    src: &quot;https://www.youtube.com/embed/afe0RpwaxY8&quot;,
    frameBorder: &quot;0&quot;,
    allow: &quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot;,
    allowFullScreen: true
  }), mdx(&quot;h2&quot;, null, &quot;Summary&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Git represents key information as objects stored on the files system&quot;, mdx(&quot;ul&quot;, {
    parentName: &quot;li&quot;
  }, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://git-scm.com/docs/git-cat-file&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;a&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;git cat-file&quot;)), &quot; is useful for exploring these objects&quot;))), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Git compresses loose objects into &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://git-scm.com/book/en/v2/Git-Internals-Packfiles&quot;
  }, &quot;packfiles&quot;), &quot; to increase space efficiency (see also: &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://docs.google.com/presentation/d/1fitppu3XFqSq2Q5saXAy8QtUAm6vdQmKjuSsCz6HXRU/edit#slide=id.p&quot;
  }, &quot;Packfiles: How Git Repositories Stay so Small&quot;), &quot;)&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Rebases and merges differ in whether they give preference to maintaining a linear history or explicit  branches&quot;)), mdx(&quot;h2&quot;, null, &quot;Types of Objects stored in &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;h2&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;.git/&quot;)), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Blobs&quot;), &quot; represent file data.&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Trees&quot;), &quot; reference multiple blobs and other trees, similar to a directory structure.&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Commits&quot;), &quot; reference specific trees plus metadata, such as when the commit was made, the committer, and the commit message.&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Tags&quot;), &quot; are named commits.&quot;), mdx(&quot;p&quot;, null, &quot;Git objects have a type, size, and content.&quot;), mdx(&quot;h2&quot;, null, &quot;The &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;h2&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;./git/HEAD&quot;), &quot; File&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;.git/HEAD&quot;), &quot; file contains a reference to a tag or SHA, which identifies a specific commit. The commit points to a Tree which contains one or more parents, plus&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;mermaid&quot;
  }, &quot;graph TD\n  HEAD[\&quot;.git/HEAD\&quot;] --&gt; Ref[\&quot;Ref (.git/&lt;tag or SHA&gt;)\&quot;]\n  Ref --&gt; Commit[\&quot;&lt;Commit SHA&gt;\&quot;]\n  Commit --&gt; Tree\n\tCommit --&gt; Author\n  Commit --&gt; Comment[\&quot;Commit Comment\&quot;]\n  Tree --&gt; Parent[\&quot;&lt;Parent Commit SHA(s)&gt;\&quot;]\n\tTree --&gt; Blob[\&quot;Blob(s)\&quot;]&quot;), mdx(&quot;h2&quot;, null, &quot;Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://git-scm.com/book/en/v2/Git-Internals-Plumbing-and-Porcelain&quot;
  }, &quot;Git Internals&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Software Engineering]]></title><description><![CDATA[Engineering approaches to software development]]></description><link>https://www.jamestharpe.com/software-engineering/</link><guid isPermaLink="false">https://www.jamestharpe.com/software-engineering/</guid><pubDate>Thu, 24 Dec 2020 12:39:30 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-12-24T12:39:30.000Z&quot;,
  &quot;description&quot;: &quot;Engineering approaches to software development&quot;,
  &quot;tags&quot;: [&quot;engineering&quot;, &quot;information-technology&quot;],
  &quot;title&quot;: &quot;Software Engineering&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Software Engineering&quot;), mdx(&quot;p&quot;, null, &quot;Software engineering is the application of &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../engineering/&quot;
  }, &quot;engineering&quot;), &quot; principles and practices to the development of software system. Though there are useful, fine-grained semantic differences between \&quot;software development\&quot; and \&quot;software engineering\&quot;, I generally use the two terms interchangeably.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[The Cathedral and the Bazaar]]></title><description><![CDATA[An essay and a book on software engineering based on experience with Linux kernel development]]></description><link>https://www.jamestharpe.com/cathedral-and-the-bazaar/</link><guid isPermaLink="false">https://www.jamestharpe.com/cathedral-and-the-bazaar/</guid><pubDate>Thu, 24 Dec 2020 12:37:30 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-12-24T12:37:30.000Z&quot;,
  &quot;description&quot;: &quot;An essay and a book on software engineering based on experience with Linux kernel development&quot;,
  &quot;tags&quot;: [&quot;software-engineering&quot;],
  &quot;title&quot;: &quot;The Cathedral and the Bazaar&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;The Cathedral and the Bazaar&quot;), mdx(&quot;h2&quot;, null, &quot;Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://cse.unl.edu/~cbourke/ComputerScienceII/docs/CathedralAndBazaar.pdf&quot;
  }, &quot;Cathedral and the Bazaar PDF&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Linus's Law]]></title><description><![CDATA[Given enough eyeballs, all bugs are shallow]]></description><link>https://www.jamestharpe.com/linuss-law/</link><guid isPermaLink="false">https://www.jamestharpe.com/linuss-law/</guid><pubDate>Thu, 24 Dec 2020 12:29:30 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-12-24T12:29:30.000Z&quot;,
  &quot;description&quot;: &quot;Given enough eyeballs, all bugs are shallow&quot;,
  &quot;tags&quot;: [&quot;software-engineering&quot;],
  &quot;title&quot;: &quot;Linus&apos;s Law&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Linus&apos;s Law&quot;), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;Given a large enough beta-tester and co-developer base, almost every problem will be characterized quickly and the fix obvious to someone.&quot;)), mdx(&quot;p&quot;, null, &quot;This law was coined by Eric Raymond in &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://cse.unl.edu/~cbourke/ComputerScienceII/docs/CathedralAndBazaar.pdf&quot;
  }, &quot;The Cathedral and The Bazaar&quot;), &quot; and named in honor of Linus Torvalds.&quot;), mdx(&quot;p&quot;, null, &quot;It is more succinctly and less formally stated as:&quot;), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;Given enough eyeballs, all bugs are shallow&quot;)));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[React (JavaScript Library)]]></title><description><![CDATA[Learn React]]></description><link>https://www.jamestharpe.com/react/</link><guid isPermaLink="false">https://www.jamestharpe.com/react/</guid><pubDate>Sun, 20 Dec 2020 19:30:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-12-20T19:30:11.000Z&quot;,
  &quot;description&quot;: &quot;Learn React&quot;,
  &quot;tags&quot;: [&quot;javascript&quot;, &quot;web-dev&quot;],
  &quot;title&quot;: &quot;React (JavaScript Library)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;React (JavaScript Library)&quot;), mdx(&quot;p&quot;, null, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://reactjs.org/&quot;
  }, &quot;React&quot;), &quot; is a declarative, component-based &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../javascript/&quot;
  }, &quot;JavaScript&quot;), &quot; library for building user interfaces, particularly &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../web-dev/&quot;
  }, &quot;web applications&quot;), &quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;React Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://reactjs.org/&quot;
  }, &quot;React Official Website&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://create-react-app.dev/&quot;
  }, &quot;Create React App&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[React Recipe: Use vis.js in a React Application]]></title><description><![CDATA[A step-by-step recipe to use vis.js in a React application]]></description><link>https://www.jamestharpe.com/react-visjs/</link><guid isPermaLink="false">https://www.jamestharpe.com/react-visjs/</guid><pubDate>Sun, 20 Dec 2020 19:22:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-12-20T19:22:11.000Z&quot;,
  &quot;description&quot;: &quot;A step-by-step recipe to use vis.js in a React application&quot;,
  &quot;tags&quot;: [&quot;visjs&quot;, &quot;react-recipes&quot;],
  &quot;title&quot;: &quot;React Recipe: Use vis.js in a React Application&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Use &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;h1&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;vis.js&quot;), &quot; in a React App&quot;), mdx(&quot;p&quot;, null, &quot;Vis visualizations can be added to React applications without any React-specific 3rd-party packages. For this recipe we&apos;ll use &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;vis-network&quot;), &quot;, though any &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;vis.js&quot;), &quot; package should easily substitute. These instructions assume you are starting with an existing React application. To get started from scratch, check out the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://reactjs.org/tutorial/tutorial.html&quot;
  }, &quot;Intro to React Tutorial&quot;), &quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;Ingredients&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://github.com/visjs/vis-network&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;a&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;vis-network&quot;)), &quot; or any &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;vis.js&quot;), &quot; package of your choosing&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://github.com/visjs/vis-data&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;a&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;vis-data&quot;))), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://reactjs.org/docs/hooks-effect.html&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;a&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;useEffect&quot;))), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://reactjs.org/docs/hooks-reference.html#useref&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;a&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;useRef&quot;)))), mdx(&quot;h2&quot;, null, &quot;Steps&quot;), mdx(&quot;h3&quot;, null, &quot;1. Install dependencies into your React app&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;vis-network&quot;), &quot; package requires the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;vis-data&quot;), &quot; package to function, so install both:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;npm&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;install&quot;), &quot; --save vis-data vis-network&quot;))), mdx(&quot;h3&quot;, null, &quot;2. Hook into the DOM&quot;), mdx(&quot;p&quot;, null, &quot;Visualizations drawn by Vis libraries require direct access to the DOM. We can set that up in React with a combination of &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;useRef&quot;), &quot; and &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;useEffect&quot;), &quot;:&quot;), mdx(&quot;p&quot;, null, &quot;JavaScript (JSX) Example:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;jsx&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-jsx&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-jsx&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;import&quot;), &quot; React&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot; useEffect&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; useRef &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;from&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;react\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;import&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot; Network &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;from&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;vis-network\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;const&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function-variable function&quot;
  }, &quot;VisNetwork&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&gt;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Create a ref to provide DOM access&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;const&quot;), &quot; visJsRef &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;useRef&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;null&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;useEffect&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&gt;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Once the ref is created, we&apos;ll be able to use vis&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;[&quot;), &quot;visJsRef&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;]&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), &quot;div&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token attr-name&quot;
  }, &quot;ref&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token script language-javascript&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token script-punctuation punctuation&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;visJsRef&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;)), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;/&gt;&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;export&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;default&quot;), &quot; VisNetwork&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;)))), mdx(&quot;p&quot;, null, &quot;TypeScript (TSX) Example:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;tsx&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-tsx&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-tsx&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;const&quot;), &quot; VisNetwork&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; React&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function-variable function&quot;
  }, &quot;FC&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&gt;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Create a ref to provide DOM access&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;const&quot;), &quot; visJsRef &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token generic-function&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;useRef&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token generic class-name&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;&lt;&quot;), &quot;HTMLDivElement&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;&gt;&quot;))), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;null&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;useEffect&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&gt;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Once the ref is created, we&apos;ll be able to use vis&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;[&quot;), &quot;visJsRef&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;]&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), &quot;div&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token attr-name&quot;
  }, &quot;ref&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token script language-javascript&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token script-punctuation punctuation&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;visJsRef&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;)), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;/&gt;&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;export&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;default&quot;), &quot; VisNetwork&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;)))), mdx(&quot;h3&quot;, null, &quot;3. Use Vis!&quot;), mdx(&quot;p&quot;, null, &quot;Vis can now be used within the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;useEffect&quot;), &quot; callback.&quot;), mdx(&quot;p&quot;, null, &quot;JavaScript (JSX) example:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;jsx&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-jsx&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-jsx&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;const&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function-variable function&quot;
  }, &quot;VisNetwork&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&gt;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;const&quot;), &quot; nodes &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;[&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token literal-property property&quot;
  }, &quot;id&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token literal-property property&quot;
  }, &quot;label&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;Node 1\&quot;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token literal-property property&quot;
  }, &quot;id&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token literal-property property&quot;
  }, &quot;label&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;Node 2\&quot;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token literal-property property&quot;
  }, &quot;id&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;3&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token literal-property property&quot;
  }, &quot;label&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;Node 3\&quot;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token literal-property property&quot;
  }, &quot;id&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;4&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token literal-property property&quot;
  }, &quot;label&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;Node 4\&quot;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token literal-property property&quot;
  }, &quot;id&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;5&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token literal-property property&quot;
  }, &quot;label&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;Node 5\&quot;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;]&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;const&quot;), &quot; edges &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;[&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token literal-property property&quot;
  }, &quot;from&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token literal-property property&quot;
  }, &quot;to&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;3&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token literal-property property&quot;
  }, &quot;from&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token literal-property property&quot;
  }, &quot;to&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;2&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token literal-property property&quot;
  }, &quot;from&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token literal-property property&quot;
  }, &quot;to&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;4&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token literal-property property&quot;
  }, &quot;from&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token literal-property property&quot;
  }, &quot;to&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;5&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token literal-property property&quot;
  }, &quot;from&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;3&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token literal-property property&quot;
  }, &quot;to&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;3&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;]&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;const&quot;), &quot; visJsRef &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;useRef&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;null&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;useEffect&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&gt;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;const&quot;), &quot; network &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot;\n\t\t\tvisJsRef&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;current &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;&amp;&amp;&quot;), &quot;\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;new&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Network&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;visJsRef&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;current&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot; nodes&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; edges &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Use `network` here to configure events, etc&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;[&quot;), &quot;visJsRef&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; nodes&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; edges&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;]&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), &quot;div&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token attr-name&quot;
  }, &quot;ref&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token script language-javascript&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token script-punctuation punctuation&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;visJsRef&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;)), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;/&gt;&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;export&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;default&quot;), &quot; VisNetwork&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;)))), mdx(&quot;p&quot;, null, &quot;TypeScript (TSX) example:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;tsx&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-tsx&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-tsx&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;const&quot;), &quot; VisNetwork&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; React&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function-variable function&quot;
  }, &quot;FC&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&gt;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;const&quot;), &quot; nodes &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;[&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot; id&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; label&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;Node 1\&quot;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot; id&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; label&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;Node 2\&quot;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot; id&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;3&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; label&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;Node 3\&quot;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot; id&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;4&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; label&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;Node 4\&quot;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot; id&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;5&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; label&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;Node 5\&quot;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;]&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;const&quot;), &quot; edges &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;[&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot; from&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; to&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;3&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot; from&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; to&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;2&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot; from&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; to&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;4&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot; from&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; to&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;5&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot; from&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;3&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; to&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;3&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;]&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;const&quot;), &quot; visJsRef &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token generic-function&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;useRef&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token generic class-name&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;&lt;&quot;), &quot;HTMLDivElement&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;&gt;&quot;))), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;null&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;useEffect&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&gt;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;const&quot;), &quot; network &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot;\n\t\t\tvisJsRef&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;current &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;&amp;&amp;&quot;), &quot;\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;new&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Network&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;visJsRef&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;current&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot; nodes&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; edges &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Use `network` here to configure events, etc&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;[&quot;), &quot;visJsRef&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; nodes&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; edges&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;]&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token tag&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), &quot;div&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token attr-name&quot;
  }, &quot;ref&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token script language-javascript&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token script-punctuation punctuation&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;visJsRef&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;)), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;/&gt;&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;export&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;default&quot;), &quot; VisNetwork&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;)))), mdx(&quot;h2&quot;, null, &quot;Full Example&quot;), mdx(&quot;p&quot;, null, &quot;A full example can be found on my website&apos;s &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://github.com/jamestharpe/jamestharpe.com/blob/main/src/components/related-network.tsx&quot;
  }, &quot;source code for the Related Network Graph&quot;), &quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;Additional Resources for &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;h2&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;vis.js&quot;), &quot; in React&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://reactjs.org/docs/refs-and-the-dom.html&quot;
  }, &quot;React Refs and the DOM&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[JavaScript]]></title><description><![CDATA[The language of the web until WASM takes over]]></description><link>https://www.jamestharpe.com/javascript/</link><guid isPermaLink="false">https://www.jamestharpe.com/javascript/</guid><pubDate>Sun, 20 Dec 2020 19:19:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-12-20T19:19:11.000Z&quot;,
  &quot;description&quot;: &quot;The language of the web until WASM takes over&quot;,
  &quot;tags&quot;: [&quot;computer-languages&quot;],
  &quot;title&quot;: &quot;JavaScript&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;JavaScript&quot;), mdx(&quot;p&quot;, null, &quot;JavaScript is a general purpose, mixed-paradigm &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../computer-languages/&quot;
  }, &quot;programming language&quot;), &quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;JavaScript resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCO1cgjhGzsSYb1rsB4bFe4Q&quot;
  }, &quot;Fun Fun Function YouTube Channel&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCzoVCacndDCfGDf41P-z0iA&quot;
  }, &quot;JSConf&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://developer.mozilla.org/en-US/docs/Web/javascript&quot;
  }, &quot;Mozilla Developer Network JavaScript Documentation&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[vis.js (JavaScript Library)]]></title><description><![CDATA[A data-visualization library written in JavaScript]]></description><link>https://www.jamestharpe.com/visjs/</link><guid isPermaLink="false">https://www.jamestharpe.com/visjs/</guid><pubDate>Sun, 20 Dec 2020 19:16:46 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-12-20T19:16:46.000Z&quot;,
  &quot;description&quot;: &quot;A data-visualization library written in JavaScript&quot;,
  &quot;tags&quot;: [&quot;javascript&quot;],
  &quot;title&quot;: &quot;vis.js (JavaScript Library)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, mdx(&quot;code&quot;, {
    parentName: &quot;h1&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;vis.js&quot;)), mdx(&quot;p&quot;, null, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;vis.js&quot;), &quot; is a set of data-visualization libraries for &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../javascript/&quot;
  }, &quot;JavaScript&quot;), &quot;.&quot;), mdx(&quot;h2&quot;, null, mdx(&quot;code&quot;, {
    parentName: &quot;h2&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;vis.js&quot;), &quot; Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://visjs.org/&quot;
  }, &quot;Official Website&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://github.com/visjs&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;a&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;vis.js&quot;), &quot; code on GitHub&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[GitLab CI/CD Tips]]></title><description><![CDATA[An end-to-end DevOps tool chain centered on Git]]></description><link>https://www.jamestharpe.com/gitlab-ci-cd-tips/</link><guid isPermaLink="false">https://www.jamestharpe.com/gitlab-ci-cd-tips/</guid><pubDate>Sun, 20 Dec 2020 15:19:46 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-12-20T15:19:46.000Z&quot;,
  &quot;description&quot;: &quot;An end-to-end DevOps tool chain centered on Git&quot;,
  &quot;tags&quot;: [&quot;gitlab-ci-cd&quot;],
  &quot;title&quot;: &quot;GitLab CI/CD Tips&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;GitLab CI/CD&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;GitLab CI&quot;), &quot; is the part of &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../gitlab/&quot;
  }, &quot;GitLab&quot;), &quot; that enables automation for &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../ci-cd/&quot;
  }, &quot;CI/CD&quot;), &quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;Leave out &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;h2&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;ref&quot;), &quot; on &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;h2&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;include&quot;), &quot; &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;h2&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;project&quot;), &quot; configurations&quot;), mdx(&quot;p&quot;, null, &quot;The typical include in a &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;gitlab-ci.yml&quot;), &quot; file might look something like this:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;yaml&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-yaml&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-yaml&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;include&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;-&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;project&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&apos;my-org/templates&apos;&quot;), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;ref&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; main\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;file&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&apos;/common-functions.yml&apos;&quot;)))), mdx(&quot;p&quot;, null, &quot;However, if you leave out &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;ref&quot;), &quot; then the default branch (typically &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;main&quot;), &quot; or &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;master&quot;), &quot;).&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[GitLab CI/CD]]></title><description><![CDATA[Tips for working in GitLab CI/CD]]></description><link>https://www.jamestharpe.com/gitlab-ci-cd/</link><guid isPermaLink="false">https://www.jamestharpe.com/gitlab-ci-cd/</guid><pubDate>Sun, 20 Dec 2020 15:19:46 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-12-20T15:19:46.000Z&quot;,
  &quot;description&quot;: &quot;Tips for working in GitLab CI/CD&quot;,
  &quot;tags&quot;: [&quot;gitlab&quot;, &quot;ci-cd&quot;],
  &quot;title&quot;: &quot;GitLab CI/CD&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;GitLab CI/CD&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;GitLab CI/CD&quot;), &quot; is the part of &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../gitlab/&quot;
  }, &quot;GitLab&quot;), &quot; that enables automation for &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../ci-cd/&quot;
  }, &quot;CI/CD&quot;), &quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;GitLab CI/CD Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://docs.gitlab.com/ee/ci/&quot;
  }, &quot;GitLab CI/CD Overview&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://docs.gitlab.com/ee/ci/yaml/README.html&quot;
  }, &quot;GitLab CI/CD &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;a&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;.gitlab-ci.yml&quot;), &quot; reference&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Software Pipelines (CI/CD)]]></title><description><![CDATA[Continuous Integration and Continuous Deployment (CI/CD)]]></description><link>https://www.jamestharpe.com/ci-cd/</link><guid isPermaLink="false">https://www.jamestharpe.com/ci-cd/</guid><pubDate>Mon, 14 Dec 2020 18:20:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-12-14T18:20:11.000Z&quot;,
  &quot;description&quot;: &quot;Continuous Integration and Continuous Deployment (CI/CD)&quot;,
  &quot;tags&quot;: [&quot;software-engineering&quot;],
  &quot;title&quot;: &quot;Software Pipelines (CI/CD)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Continuous Integration, Deployment, and Delivery (CI/CD)&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;CI/CD&quot;), &quot; is the combined set of Continuous Integration, Continuous Deployment, and Continuous Delivery practices. In a nutshell, these practices are designed to keep code ready for deployment at all times.&quot;), mdx(&quot;h2&quot;, null, &quot;What is Continuous Integration?&quot;), mdx(&quot;p&quot;, null, &quot;Continuous Integration is a set of processes and practices designed to improve development time and quality by continuously merging all developer work into a shared main line of development and ensuring these changes all work together as intended through automation.&quot;), mdx(&quot;h2&quot;, null, &quot;What is Continuous Delivery and Deployment&quot;), mdx(&quot;p&quot;, null, &quot;Continuous Delivery is the practice of improving time-to-value by continuously deploying to non-production environments for testing. Continuous Deployment extends Continuous Delivery all the way through to production. The two terms are often used interchangeably because Continuous Deployment is an extension of Continuous Delivery, though it frequently does have special considerations.&quot;), mdx(&quot;h2&quot;, null, &quot;CI/CD resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://martinfowler.com/articles/continuousIntegration.html&quot;
  }, &quot;Continuous Integration by Martin Fowler&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Quotes from Demon-Haunted World by Carl Sagan]]></title><description><![CDATA[A book by Carl Sagan, Demon-Haunted World argues for the importance of scientific literacy]]></description><link>https://www.jamestharpe.com/demon-haunted-world/</link><guid isPermaLink="false">https://www.jamestharpe.com/demon-haunted-world/</guid><pubDate>Sun, 13 Dec 2020 21:22:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-12-13T21:22:11.000Z&quot;,
  &quot;description&quot;: &quot;A book by Carl Sagan, Demon-Haunted World argues for the importance of scientific literacy&quot;,
  &quot;tags&quot;: [&quot;books&quot;, &quot;carl-sagan&quot;, &quot;science&quot;],
  &quot;title&quot;: &quot;Quotes from Demon-Haunted World by Carl Sagan&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Quotes from Demon-Haunted World&quot;), mdx(&quot;p&quot;, null, &quot;Highlights and discussion available &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://www.goodreads.com/notes/12513560-the-demon-haunted-world/3019794-james-tharpe?ref=bsop&quot;
  }, &quot;on Goodreads&quot;), &quot;.&quot;), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;\&quot;Every question is a cry to understand the world\&quot;&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;--Carl Sagan&quot;)), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;\&quot;One of the oldest short essays in human history... laments that the young are disastrously more ignorant than the generation immediately preceding.\&quot;&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;--Carl Sagan&quot;)), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;\&quot;We can pray over the cholera victim, or we can give her 500 milligrams of tetracycline every 12 hours.\&quot;&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;--Carl Sagan&quot;)), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;\&quot;Advances in medicine and agriculture have saved vastly more lives than have been lost in all the wars in history.\&quot;&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;--Carl Sagan&quot;)), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;\&quot;For me, it is far better to grasp the Universe as it really is than to persist in delusion, however satisfying and reassuring.\&quot;&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;--Carl Sagan&quot;)), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;\&quot;If we resolutely refuse to acknowledge where we are liable to fall into error, then we can confidently expect that error - even serious error, profound mistakes - will be our companion forever. But if we are capable of a little courageous self assessment, whatever rueful reflections they may engender, our chances improve enormously.\&quot;&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;--Carl Sagan&quot;)), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;\&quot;I have a foreboding of an America in my children&apos;s or grandchildren&apos;s time - when the United States is a service and information economy; when nearly all the key manufacturing industries have slipped away to other countries when awesome technological powers are in the hands of a very few, and no one representing the public interest can even grasp the issues; when the people have lost the ability to set their own agendas or knowledgeably question those in authority when, clutching our crystals and nervously consulting our horoscopes, our critical faculties in decline, unable to distinguish between what feels good and what&apos;s true, we slide, almost without noticing, back into superstition and darkness.\&quot;&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;--Carl Sagan&quot;)), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;\&quot;Science is far from a perfect instrument of knowledge. It&apos;s just the best we have.\&quot;&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;--Carl Sagan&quot;)), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;\&quot;...has there ever been a religion with the prophetic accuracy and reliability of science?\&quot;&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;--Carl Sagan&quot;)), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;\&quot;Compare as many doctrines as you can think of, note what predictions they make of the future, which ones are vague, which ones are precise, and which doctrines - every one of them subject to human fallibility - have error-correcting mechanisms built in.\&quot;&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;--Carl Sagan&quot;)), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;\&quot;Which leaders of the major faiths acknowledge that their beliefs might be incomplete or erroneous and establish institutes to uncover possible doctrinal deficiencies?\&quot;&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;--Carl Sagan&quot;)), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;\&quot;The difference between physics and metaphysics... is that the metaphysicist has no laboratory.\&quot;&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;--Carl Sagan&quot;)), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;\&quot;Science is a way to call the bluff of those who only pretend to knowledge.\&quot;&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;--Carl Sagan&quot;)), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;\&quot;Every age has its peculiar folly; some scheme, project, or phantasy into which it plunges, spurred on either by the love of gain, the necessity of excitement, or the mere force of imitation. Failing in these, it has some madness, to which it is goaded by political or religious causes, or both combined.\&quot;&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;--Charles Mackay, Extraordinary Popular Delusions and the Madness of Crowds&quot;)), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;\&quot;Fear of things invisible is the natural seed of that which every one in himself calleth religion.\&quot;&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;--Thomas Hobbes, Leviathan (1651)&quot;)), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;\&quot;... &apos;demon&apos; means &apos;knowledge&apos; in Greek - especially about the material world.\&quot;  &quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;--Carl Sagan&quot;)), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;\&quot;Claims that cannot be tested, assertions immune to disproof are veridically worthless, whatever value they may have in inspiring us or in exciting our sense of wonder.\&quot;&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;--Carl Sagan&quot;)), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;\&quot;Who cares which breakfast cereal has more vitamines when we can take a vitamin pill with breakfast?\&quot;&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;--Carl Sagan&quot;)), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;\&quot;Inuring us to lies lays the groundwork for many other evils.\&quot;  &quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;--Carl Sagan, with attribution to Thomas Paine&quot;)), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;\&quot;Of course many religions - devoted to reverence, awe, ethics, ritual, community, family, charity, and political and economic justice - are in no way challenged, but rather uplifted, by the findings of science.\&quot;&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;--Carl Sagan&quot;)), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;\&quot;In the way that skepticism is sometimes applied to issues of public concern, there &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;is&quot;), &quot; a tendency to belittle, to condescend, to ignore the fact that, deluded or not, supports of superstition and pseudoscience are human beings with real feelings, who, like the skeptics, are trying to figure out how the world works and what our role in it might be. Their motives are in many cases consonant with science. If their culture as not given them all the tools they need to pursue this great quest, let us temper our criticism with kindness, None ofd us comes fully equipped.\&quot;  &quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;--Carl Sagan&quot;)), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;\&quot;One of my favorite cartoons shows a fortune-teller scrutinizing the mark&apos;s palm and gravely concluding, &apos;You are very gullible.&apos;\&quot;  &quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;--Carl Sagan&quot;)), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;\&quot;Many pseudoscientific and New Age belief systems emerge out of dissatisfaction with conventional values and perspectives - and are therefore themselves a kind of skepticism.\&quot;  &quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;--Carl Sagan&quot;)), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;\&quot;The world of the paranormal may appear less as a silly turn toward irrationalism and more as an idiom through which the segments of society express their conflicts, dilemmas, and identities...\&quot;&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;--Carl Sagan&quot;)), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;\&quot;We must not believe the many, who say that only free people ought to be educated, but we should rather believe the philosophers who say that only the educated are free.\&quot;&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;--Epictetus, Discourses&quot;)), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;\&quot;Why should we subsidize intellectual curiosity?\&quot;&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;--Ronald Reagan, 1980&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;...&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;\&quot;There is nothing which can better deserve our patronage than the promotion of science and literature. Knowledge is in every country the surest basis of public happiness.\&quot;&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;--George Washington, 1790&quot;)), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;\&quot;Where there is doubt, there is freedom.\&quot;\nLatin Proverb&quot;)), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;Trends working at least marginally towards the implantation of a very narrow range of attitudes, memories, and opinions include control ov major television networks and newspapers by a small number of similarly motivated powerful corporations and individuals, the disappearance of competitive daily newspapers in many cities, the replacement of substantive debate by sleaze in political campaigns, and episodic erosion of the principle of the separation of powers. It is estimated (by the American media expert Ben Bagdikian) that fewer than two dozen corporations control more than half &apos;of the global business in daily newspapers, magazines, televisions, books and movies.&apos; The proliferation of cable television channels, heap long-distance telephone calls, fax machines, computer bulletin boards and networks, inexpensive computer self-publishing, and surviving instances of the traditional liberal arts university curriculum are trends tha might owk in the opposite direction.\&quot;&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;--Carl Sagan&quot;)), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;\&quot;It is not the function of our government to keep the citizen from falling into error; it is the function of the citizen to keep the government from falling into error.\&quot;&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;--Robert H. Jackson, US Supreme Court Justice, 1950&quot;)), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;\&quot;Nevertheless, to a certain and often useful degree, policy ideas can be tested. The great waste would be to ignore the results of social experiments because they seem to be ideologically unpalatable.\&quot;&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;--Carl Sagan&quot;)), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;[Thomas Jefferson]&quot;, &quot; argued that the cost of education is trivial compared to the cost of ignorance...\&quot;&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;--Carl Sagan&quot;)), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;\&quot;I ... wish that the Pledge of Allegiance were directed at the Constitution and the Bill of Rights, as it is when the President takes his oath of office, rather than to the flag and the nation.\&quot;&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;--Carl Sagan&quot;)), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;... the cure for a fallacious argument is a better argument, not the suppression of ideas.&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;--Carl Sagan&quot;)), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;\&quot;Stuart Mill argued that silencing an opinion is &apos;a peculiar evil.&apos; If the opinion is right, we are robbed of the &apos;opportunity of exchanging error for truth&apos;; and if it&apos;s wrong, we are deprived of a deeper understanding of the truth in &apos;its collision with error.&apos;\&quot;&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;--Carl Sagan&quot;)), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;\&quot;... a union of government and religion tends to destroy government and degrade religion.\&quot;&quot;), mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;-- Justice Black, Supreme Court, &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://www.uscourts.gov/educational-resources/educational-activities/facts-and-case-summary-engel-v-vitale&quot;
  }, &quot;Engel v. Vitale&quot;), &quot;, 1962&quot;)));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Gresham's Law]]></title><description><![CDATA[A fancy term for hoarding]]></description><link>https://www.jamestharpe.com/greshams-law/</link><guid isPermaLink="false">https://www.jamestharpe.com/greshams-law/</guid><pubDate>Sun, 13 Dec 2020 11:46:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-12-13T11:46:11.000Z&quot;,
  &quot;description&quot;: &quot;A fancy term for hoarding&quot;,
  &quot;tags&quot;: [&quot;economics&quot;],
  &quot;title&quot;: &quot;Gresham&apos;s Law&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Gresham&apos;s Law&quot;), mdx(&quot;p&quot;, null, &quot;A monetary principle that states \&quot;bad money drives out good money\&quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;Video: Gresham&apos;s Law and Thier&apos;s law in One Minute&quot;), mdx(&quot;iframe&quot;, {
    width: &quot;560&quot;,
    height: &quot;315&quot;,
    src: &quot;https://www.youtube.com/embed/H8w6pcRVrb8&quot;,
    frameBorder: &quot;0&quot;,
    allow: &quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot;,
    allowFullScreen: true
  }));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Markdown: Detect Broken links]]></title><description><![CDATA[Use markdown-link-check and Bash to detect broken links]]></description><link>https://www.jamestharpe.com/markdown-link-check/</link><guid isPermaLink="false">https://www.jamestharpe.com/markdown-link-check/</guid><pubDate>Wed, 09 Dec 2020 19:29:03 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-12-09T19:29:03.000Z&quot;,
  &quot;description&quot;: &quot;Use markdown-link-check and Bash to detect broken links&quot;,
  &quot;tags&quot;: [&quot;markdown&quot;, &quot;cli&quot;, &quot;bash&quot;],
  &quot;title&quot;: &quot;Markdown: Detect Broken links&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;How to Detect Broken Links in Markdown&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://www.npmjs.com/package/markdown-link-check&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;a&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;markdown-link-check&quot;), &quot; NPM package&quot;), &quot; makes it easy to scan a markdown file for broken links, but what about a whole website?&quot;), mdx(&quot;p&quot;, null, &quot;This simple Bash script will scan all markdown links:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token shebang important&quot;
  }, &quot;#!/usr/bin/env bash&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;for&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token for-or-select variable&quot;
  }, &quot;file&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;in&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;find&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;.&quot;), &quot; -name &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\\&quot;), &quot;\&quot;*.md&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\\&quot;), &quot;\&quot;&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;)&quot;)), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;do&quot;), &quot;\n\tmarkdown-link-check --verbose --config .markdown-link-check.config.json &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\\&quot;), &quot;\&quot;&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$file&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\\&quot;), &quot;\&quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;||&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;exit&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;done&quot;)))), mdx(&quot;h2&quot;, null, &quot;Static Site Generator Example with Gatsby&quot;), mdx(&quot;p&quot;, null, &quot;Though these instructions are written for Gatsby, they can be easily adapted to any static site generator.&quot;), mdx(&quot;h3&quot;, null, &quot;1. Install &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;h3&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;markdown-link-check&quot;), &quot; locally&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;npm&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;install&quot;), &quot; --save-dev markdown-link-check&quot;))), mdx(&quot;h3&quot;, null, &quot;2. Configure Crawling Options&quot;), mdx(&quot;p&quot;, null, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://www.gatsbyjs.com/&quot;
  }, &quot;Gatsby&quot;), &quot; stores static files in the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;static/&quot;), &quot; folder, so we have to map references to these files to prefix them with &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/static/&quot;), &quot;.&quot;), mdx(&quot;p&quot;, null, &quot;Create a file called &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;.markdown-link-check.config.json&quot;), &quot; in your project root to configure the mapping:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;json&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-json&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-json&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token property&quot;
  }, &quot;\&quot;replacementPatterns\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;[&quot;), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n      &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token property&quot;
  }, &quot;\&quot;pattern\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;^\\/img\\/\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n      &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token property&quot;
  }, &quot;\&quot;replacement\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;../static/img/\&quot;&quot;), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;]&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;)))), mdx(&quot;h3&quot;, null, &quot;3. Add a &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;h3&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;test:links&quot;), &quot; script to &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;h3&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;package.json&quot;)), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;markdown-link-check&quot;), &quot; CLI only checks one file at a time, we need to loop through all markdown files and ignore the contents of the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;node_modules&quot;), &quot; folder in our script:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;json&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-json&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-json&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t...\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token property&quot;
  }, &quot;\&quot;scripts\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\t...\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token property&quot;
  }, &quot;\&quot;test:links\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;for file in $(find . -path ./node_modules -prune -false -o -name \\\&quot;*.md\\\&quot;); do markdown-link-check --verbose --config .markdown-link-check.config.json \\\&quot;$file\\\&quot; || exit 1; done;\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\t\t...\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n\t...\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;)))), mdx(&quot;p&quot;, null, &quot;You can now integrate &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;npm run test:links&quot;), &quot; into your CI/CD process.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Predictions for the Future]]></title><description><![CDATA[Track predictions, see if they come true!]]></description><link>https://www.jamestharpe.com/predictions/</link><guid isPermaLink="false">https://www.jamestharpe.com/predictions/</guid><pubDate>Tue, 08 Dec 2020 13:40:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-12-08T13:40:11.000Z&quot;,
  &quot;description&quot;: &quot;Track predictions, see if they come true!&quot;,
  &quot;tags&quot;: [],
  &quot;title&quot;: &quot;Predictions for the Future&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Predictions of the Future&quot;), mdx(&quot;table&quot;, null, mdx(&quot;thead&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;thead&quot;
  }, mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Date Made&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Who Predicted it?&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Summary&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Date(s) Predicted&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Link(s)&quot;))), mdx(&quot;tbody&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;2020-12-04&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;a&quot;, {
    parentName: &quot;td&quot;,
    &quot;href&quot;: &quot;https://twitter.com/chris_herd&quot;
  }, &quot;@chris_herd&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Spurred by the COVID-19 pandemic, a sharp increase in remote work will result in: Workers will move cheaper/rural areas, a surge of startups focused on enabling asynchronous work, a surge in hobbies that creates local communities and reduces societal loneliness\xA0and\xA0isolation, companies rising/falling based on being early/late adopters of remote work, a shift away from time-based to performance-based jobs, general health and wellbeing improvements, more individual-use robots and automation, surges in RV sales, and a rise in short-term rentable office space / business parks to support digital nomads&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;\&quot;Before 2030\&quot;&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;a&quot;, {
    parentName: &quot;td&quot;,
    &quot;href&quot;: &quot;https://twitter.com/chris_herd/status/1334842553561198593?s=19&quot;
  }, &quot;Chris Herd Twitter Thread on the Future of Remote Work&quot;))))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Free Software Foundation (FSF)]]></title><description><![CDATA[Overview of the Free Software Foundation (FSF)]]></description><link>https://www.jamestharpe.com/free-software-foundation/</link><guid isPermaLink="false">https://www.jamestharpe.com/free-software-foundation/</guid><pubDate>Tue, 08 Dec 2020 13:06:30 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-12-08T13:06:30.000Z&quot;,
  &quot;description&quot;: &quot;Overview of the Free Software Foundation (FSF)&quot;,
  &quot;tags&quot;: [&quot;open-source-orgs&quot;, &quot;nonprofits&quot;],
  &quot;title&quot;: &quot;Free Software Foundation (FSF)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Free Software Foundation (FSF)&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://www.fsf.org/&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;a&quot;
  }, &quot;Free Software Foundation (FSF)&quot;)), &quot; is a nonprofit activist &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../open-source-orgs/&quot;
  }, &quot;organization for open-source&quot;), &quot; that &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://www.fsf.org/campaigns&quot;
  }, &quot;campaigns&quot;), &quot; for the development and use of free software and documentation, particularly &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://www.gnu.org/&quot;
  }, &quot;GNU&quot;), &quot;, and against practices that limit software freedom.&quot;), mdx(&quot;h2&quot;, null, &quot;Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://twitter.com/fsf&quot;
  }, &quot;FSF on Twitter&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;http://www.gnu.org/philosophy/free-sw.html&quot;
  }, &quot;Free Software Definition&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Open Source Initiative (OSI)]]></title><description><![CDATA[Overview of the Open Source Initiative (OSI)]]></description><link>https://www.jamestharpe.com/open-source-initiative/</link><guid isPermaLink="false">https://www.jamestharpe.com/open-source-initiative/</guid><pubDate>Tue, 08 Dec 2020 12:59:30 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-12-08T12:59:30.000Z&quot;,
  &quot;description&quot;: &quot;Overview of the Open Source Initiative (OSI)&quot;,
  &quot;tags&quot;: [&quot;open-source-orgs&quot;, &quot;nonprofits&quot;],
  &quot;title&quot;: &quot;Open Source Initiative (OSI)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Open Source Initiative (OSI)&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Open Source Initiative (OSI)&quot;), &quot; is a nonprofit corporation that helps promote, guide, and protect &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../open-source/&quot;
  }, &quot;open-source&quot;), &quot; projects.&quot;), mdx(&quot;h2&quot;, null, &quot;Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://twitter.com/OpenSourceOrg&quot;
  }, &quot;Open Source Initiative on Twitter&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://opensource.org/licenses&quot;
  }, &quot;OSI supported Licenses&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://opensource.org/faq&quot;
  }, &quot;Frequently Asked Questions&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://opensource.org/osd&quot;
  }, &quot;Open-source definition&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Open-Source Hardware]]></title><description><![CDATA[Useful open source software projects]]></description><link>https://www.jamestharpe.com/open-source-hardware/</link><guid isPermaLink="false">https://www.jamestharpe.com/open-source-hardware/</guid><pubDate>Tue, 08 Dec 2020 12:49:30 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-12-08T12:49:30.000Z&quot;,
  &quot;description&quot;: &quot;Useful open source software projects&quot;,
  &quot;tags&quot;: [&quot;open-source&quot;],
  &quot;title&quot;: &quot;Open-Source Hardware&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Open-source hardware&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Open-Source Programming Languages]]></title><description><![CDATA[A list of open-source programming languages I've learned (at least a little bit)]]></description><link>https://www.jamestharpe.com/open-source-languages/</link><guid isPermaLink="false">https://www.jamestharpe.com/open-source-languages/</guid><pubDate>Tue, 08 Dec 2020 12:49:30 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-12-08T12:49:30.000Z&quot;,
  &quot;description&quot;: &quot;A list of open-source programming languages I&apos;ve learned (at least a little bit)&quot;,
  &quot;tags&quot;: [&quot;open-source-software&quot;, &quot;computer-languages&quot;],
  &quot;title&quot;: &quot;Open-Source Programming Languages&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Open-source programming languages&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Open-Source Organizations]]></title><description><![CDATA[Organizations dedicated to open-source]]></description><link>https://www.jamestharpe.com/open-source-orgs/</link><guid isPermaLink="false">https://www.jamestharpe.com/open-source-orgs/</guid><pubDate>Tue, 08 Dec 2020 12:49:30 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-12-08T12:49:30.000Z&quot;,
  &quot;description&quot;: &quot;Organizations dedicated to open-source&quot;,
  &quot;tags&quot;: [&quot;open-source&quot;],
  &quot;title&quot;: &quot;Open-Source Organizations&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Open-source organizations&quot;), mdx(&quot;table&quot;, null, mdx(&quot;thead&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;thead&quot;
  }, mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Trait&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Apache Software Foundation&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Open Source Initiative&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Free Software Foundation&quot;))), mdx(&quot;tbody&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;td&quot;
  }, &quot;Focus&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Project-centered, meritocratic communities&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Education and promotion&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Individuals&apos; rights to software&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;td&quot;
  }, &quot;Free/Open Source Definition&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;a&quot;, {
    parentName: &quot;td&quot;,
    &quot;href&quot;: &quot;http://apache.org/licenses/LICENSE-2.0&quot;
  }, &quot;Apache License 2.0&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;a&quot;, {
    parentName: &quot;td&quot;,
    &quot;href&quot;: &quot;https://opensource.org/osd&quot;
  }, &quot;Open Source Definition&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;a&quot;, {
    parentName: &quot;td&quot;,
    &quot;href&quot;: &quot;http://www.gnu.org/philosophy/free-sw.html&quot;
  }, &quot;Free Software Definition&quot;))), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;td&quot;
  }, &quot;Supported Licenses&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;a&quot;, {
    parentName: &quot;td&quot;,
    &quot;href&quot;: &quot;http://apache.org/licenses/&quot;
  }, &quot;Apache Licenses&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;a&quot;, {
    parentName: &quot;td&quot;,
    &quot;href&quot;: &quot;https://opensource.org/licenses&quot;
  }, &quot;OSI supported Licenses&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;a&quot;, {
    parentName: &quot;td&quot;,
    &quot;href&quot;: &quot;https://www.fsf.org/licensing/&quot;
  }, &quot;FSF Licensing Guide&quot;))))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Open-Source Software]]></title><description><![CDATA[Useful open source software projects]]></description><link>https://www.jamestharpe.com/open-source-software/</link><guid isPermaLink="false">https://www.jamestharpe.com/open-source-software/</guid><pubDate>Tue, 08 Dec 2020 12:49:30 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-12-08T12:49:30.000Z&quot;,
  &quot;description&quot;: &quot;Useful open source software projects&quot;,
  &quot;tags&quot;: [&quot;open-source&quot;],
  &quot;title&quot;: &quot;Open-Source Software&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Open-source software&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Open-Source]]></title><description><![CDATA[Information and resources about open-source]]></description><link>https://www.jamestharpe.com/open-source/</link><guid isPermaLink="false">https://www.jamestharpe.com/open-source/</guid><pubDate>Tue, 08 Dec 2020 12:49:30 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-12-08T12:49:30.000Z&quot;,
  &quot;description&quot;: &quot;Information and resources about open-source&quot;,
  &quot;tags&quot;: [],
  &quot;title&quot;: &quot;Open-Source&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Open-source resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://opensource.guide/&quot;
  }, &quot;Open Source Guides&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.researchgate.net/publication/327447342_How_Do_Developers_Promote_Open_Source_Projects&quot;
  }, &quot;Study: How Do Developers Promote Open Source&quot;), &quot; &quot;)));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Apache Software Foundation (ASF)]]></title><description><![CDATA[Overview of the Apache Software Foundation (ASF)]]></description><link>https://www.jamestharpe.com/apache/</link><guid isPermaLink="false">https://www.jamestharpe.com/apache/</guid><pubDate>Tue, 08 Dec 2020 12:44:30 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-12-08T12:44:30.000Z&quot;,
  &quot;description&quot;: &quot;Overview of the Apache Software Foundation (ASF)&quot;,
  &quot;tags&quot;: [&quot;open-source-orgs&quot;, &quot;nonprofits&quot;],
  &quot;title&quot;: &quot;Apache Software Foundation (ASF)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Apache Software Foundation (ASF)&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://www.apache.org/&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;a&quot;
  }, &quot;Apache Software Foundation&quot;)), &quot; is a nonprofit corporation that fosters a set of &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../open-source/&quot;
  }, &quot;open-source&quot;), &quot; projects under an &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;http://apache.org/licenses/&quot;
  }, &quot;Apache License&quot;), &quot; through a merit-based process known as The Apache Way.&quot;), mdx(&quot;h2&quot;, null, &quot;Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://community.apache.org/&quot;
  }, &quot;Apache Community&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;http://apache.org/licenses/LICENSE-2.0&quot;
  }, &quot;Apache License 2.0&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;http://www.apache.org/theapacheway/&quot;
  }, &quot;The Apache Way&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Median]]></title><description><![CDATA[How to calculate the median of a collection of numbers]]></description><link>https://www.jamestharpe.com/median/</link><guid isPermaLink="false">https://www.jamestharpe.com/median/</guid><pubDate>Fri, 04 Dec 2020 13:25:46 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-12-04T13:25:46.000Z&quot;,
  &quot;description&quot;: &quot;How to calculate the median of a collection of numbers&quot;,
  &quot;tags&quot;: [&quot;statistics&quot;, &quot;arithmetic-mean&quot;],
  &quot;title&quot;: &quot;Median&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Median&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;median&quot;), &quot; of a collection of numbers is the middle number when that collection is sorted. If there are two middle numbers (i.e. if the collection has an even number of numbers), then the median is the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../arithmetic-mean/&quot;
  }, &quot;mean&quot;), &quot; of those two numbers.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Arithmetic Mean]]></title><description><![CDATA[How to calculate the arithmetic mean of a number collection]]></description><link>https://www.jamestharpe.com/arithmetic-mean/</link><guid isPermaLink="false">https://www.jamestharpe.com/arithmetic-mean/</guid><pubDate>Fri, 04 Dec 2020 13:17:46 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-12-04T13:17:46.000Z&quot;,
  &quot;description&quot;: &quot;How to calculate the arithmetic mean of a number collection&quot;,
  &quot;tags&quot;: [&quot;statistics&quot;],
  &quot;title&quot;: &quot;Arithmetic Mean&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Arithmetic Mean&quot;), mdx(&quot;p&quot;, null, &quot;The arithmetic mean, or simply mean, is sum of all numbers in a collection divided by the number of numbers in that collection.&quot;), mdx(&quot;p&quot;, null, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;A&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mfrac&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mn&quot;, {
    parentName: &quot;mfrac&quot;
  }, &quot;1&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mfrac&quot;
  }, &quot;n&quot;)), mdx(&quot;msubsup&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mo&quot;, {
    parentName: &quot;msubsup&quot;
  }, &quot;\u2211&quot;), mdx(&quot;mrow&quot;, {
    parentName: &quot;msubsup&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;i&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;1&quot;)), mdx(&quot;mi&quot;, {
    parentName: &quot;msubsup&quot;
  }, &quot;n&quot;)), mdx(&quot;msub&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;msub&quot;
  }, &quot;a&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;msub&quot;
  }, &quot;i&quot;)), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mfrac&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;mfrac&quot;
  }, mdx(&quot;msub&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;msub&quot;
  }, &quot;a&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;msub&quot;
  }, &quot;1&quot;)), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;+&quot;), mdx(&quot;msub&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;msub&quot;
  }, &quot;a&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;msub&quot;
  }, &quot;2&quot;)), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;+&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u22EF&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;+&quot;), mdx(&quot;msub&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;msub&quot;
  }, &quot;a&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;msub&quot;
  }, &quot;n&quot;))), mdx(&quot;mi&quot;, {
    parentName: &quot;mfrac&quot;
  }, &quot;n&quot;))), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;A={\\frac {1}{n}}\\sum _{i=1}^{n}a_{i}={\\frac {a_{1}+a_{2}+\\cdots +a_{n}}{n}}&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;A&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1.190108em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.345em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mopen nulldelimiter&quot;
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mfrac&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t vlist-t2&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.845108em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-2.6550000000000002em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;3em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal mtight&quot;
  }, &quot;n&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.23em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;3em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;frac-line&quot;,
    &quot;style&quot;: {
      &quot;borderBottomWidth&quot;: &quot;0.04em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.394em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;3em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;1&quot;))))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-s&quot;
  }, &quot;\u200B&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.345em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;
  }))))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mclose nulldelimiter&quot;
  }))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.16666666666666666em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mop&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mop op-symbol small-op&quot;,
    &quot;style&quot;: {
      &quot;position&quot;: &quot;relative&quot;,
      &quot;top&quot;: &quot;-0.0000050000000000050004em&quot;
    }
  }, &quot;\u2211&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t vlist-t2&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.804292em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-2.40029em&quot;,
      &quot;marginLeft&quot;: &quot;0em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal mtight&quot;
  }, &quot;i&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel mtight&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;1&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.2029em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal mtight&quot;
  }, &quot;n&quot;))))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-s&quot;
  }, &quot;\u200B&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.29971000000000003em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;
  })))))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.16666666666666666em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;a&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t vlist-t2&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.31166399999999994em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-2.5500000000000003em&quot;,
      &quot;marginLeft&quot;: &quot;0em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal mtight&quot;
  }, &quot;i&quot;))))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-s&quot;
  }, &quot;\u200B&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.15em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;
  })))))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1.1634309999999999em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.345em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mopen nulldelimiter&quot;
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mfrac&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t vlist-t2&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8184309999999999em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-2.6550000000000002em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;3em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal mtight&quot;
  }, &quot;n&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.23em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;3em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;frac-line&quot;,
    &quot;style&quot;: {
      &quot;borderBottomWidth&quot;: &quot;0.04em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.4101em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;3em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal mtight&quot;
  }, &quot;a&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t vlist-t2&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.31731428571428577em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-2.357em&quot;,
      &quot;marginLeft&quot;: &quot;0em&quot;,
      &quot;marginRight&quot;: &quot;0.07142857142857144em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.5em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size3 size1 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;1&quot;))))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-s&quot;
  }, &quot;\u200B&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.143em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;
  })))))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mbin mtight&quot;
  }, &quot;+&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal mtight&quot;
  }, &quot;a&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t vlist-t2&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.31731428571428577em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-2.357em&quot;,
      &quot;marginLeft&quot;: &quot;0em&quot;,
      &quot;marginRight&quot;: &quot;0.07142857142857144em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.5em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size3 size1 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;2&quot;))))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-s&quot;
  }, &quot;\u200B&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.143em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;
  })))))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mbin mtight&quot;
  }, &quot;+&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;minner mtight&quot;
  }, &quot;\u22EF&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mbin mtight&quot;
  }, &quot;+&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal mtight&quot;
  }, &quot;a&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t vlist-t2&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.16454285714285719em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-2.357em&quot;,
      &quot;marginLeft&quot;: &quot;0em&quot;,
      &quot;marginRight&quot;: &quot;0.07142857142857144em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.5em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size3 size1 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal mtight&quot;
  }, &quot;n&quot;))))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-s&quot;
  }, &quot;\u200B&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.143em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;
  })))))))))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-s&quot;
  }, &quot;\u200B&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.345em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;
  }))))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mclose nulldelimiter&quot;
  })))))))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Interquartile Range (IQR)]]></title><description><![CDATA[How to find the interquartile range (IQR) of a number collection]]></description><link>https://www.jamestharpe.com/interquartile-range/</link><guid isPermaLink="false">https://www.jamestharpe.com/interquartile-range/</guid><pubDate>Fri, 04 Dec 2020 13:14:46 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-12-04T13:14:46.000Z&quot;,
  &quot;description&quot;: &quot;How to find the interquartile range (IQR) of a number collection&quot;,
  &quot;tags&quot;: [&quot;statistics&quot;, &quot;median&quot;],
  &quot;title&quot;: &quot;Interquartile Range (IQR)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Interquartile Range (IQR)&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Interquartile range (IQR)&quot;), &quot; is the middle half of a collection of numbers that are ordered from lowest to highest.&quot;), mdx(&quot;p&quot;, null, &quot;To find the interquartile range of a collection:&quot;), mdx(&quot;ol&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;Find the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;../median/&quot;
  }, &quot;median&quot;), &quot; of the collection&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;Find the median of lower and upper half of the collection, leaving out the median number(s)&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;Subtract the lower half&apos;s median from the upper half&apos;s median. The difference is the &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;I&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;Q&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;R&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;IQR&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8777699999999999em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.19444em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.07847em&quot;
    }
  }, &quot;I&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;Q&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.00773em&quot;
    }
  }, &quot;R&quot;))))))), mdx(&quot;h2&quot;, null, &quot;Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.khanacademy.org/math/cc-sixth-grade-math/cc-6th-data-statistics/cc-6th/v/calculating-interquartile-range-iqr&quot;
  }, &quot;Interquartile Range (IQR) on Khan Academy&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Machine Learning (ML)]]></title><description><![CDATA[Machine learning terms, processes, and methods]]></description><link>https://www.jamestharpe.com/machine-learning/</link><guid isPermaLink="false">https://www.jamestharpe.com/machine-learning/</guid><pubDate>Thu, 03 Dec 2020 13:18:46 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-12-03T13:18:46.000Z&quot;,
  &quot;description&quot;: &quot;Machine learning terms, processes, and methods&quot;,
  &quot;tags&quot;: [&quot;data-science&quot;],
  &quot;title&quot;: &quot;Machine Learning (ML)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Machine Learning (ML)&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Machine Learning (ML)&quot;), &quot; is the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../data-science/&quot;
  }, &quot;science&quot;), &quot; of developing and applying algorithms that improve their output through experience; in other words, algorithms that can \&quot;learn\&quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;Machine Learning Terminology&quot;), mdx(&quot;table&quot;, null, mdx(&quot;thead&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;thead&quot;
  }, mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Word&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Definition&quot;))), mdx(&quot;tbody&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Data sampling&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Systematic creation of smaller representative samples of larger data sets&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Feature&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;A variable with high relevancy to the outcome variable&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Feature selection&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Automatic detection of variables most relevant to the outcome variable&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Imputation&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Correction of corrupt and missing values through inference&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Integer encoding&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Assignment of an integer value to a categorical value, e.g. values \&quot;red\&quot;, \&quot;green\&quot;, and \&quot;blue\&quot; could be assigned integer values of 1, 2, and 3 respectively&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;One-hot encoding&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Assignment of a bit-mapped binary value to a set of categorical values, e.g. a \&quot;color\&quot; category with potential values of \&quot;red\&quot;, \&quot;green\&quot;, and \&quot;blue\&quot; could be mapped to three bits of 100, 010, and 001, respectively&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Outcome variable&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;The value to be predicted by a Machine Learning Model&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Outlier&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;A observation significantly different from other observations of the same data&quot;)))), mdx(&quot;h2&quot;, null, &quot;The Machine Learning Process&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;mermaid&quot;
  }, &quot;graph TD\n    subgraph 1. Source the Data\n      DB1[(Data)] --&gt; Gather\n      DB2[(Data)] --&gt; Gather\n      DB3[(Data)] --&gt;\n      Gather --&gt; Raw[(Raw Data)]\n    end\n\t\tsubgraph 2. Wrangle the Data\n      Raw --&gt; Understand\n      Understand --&gt;|Work with SMEs| Summarize\n      Understand --&gt; Visualize\n\t\t\tSummarize --&gt; Cleanse\n      Visualize --&gt;\n      Cleanse --&gt;|Imputation, Outlier Detection...| Cleansed[(Cleansed Data)]\n      Cleansed --&gt;\n      Select -.-&gt;|Gather identified missing data| Gather\n      Select --&gt; Sample[Data Sampling]\n      Select --&gt; Features[Feature Selection]\n      Sample --&gt; Prepare\n      Features --&gt; Prepare\n      Prepare --&gt; Encode[Encode Categorical Data]\n      Prepare --&gt; Normalize\n      Encode --&gt; Data[(Prepared Data)]\n      Normalize --&gt; Data\n\t\tend\n    subgraph 3. Model the Data\n      Data --&gt; Model\n    end\n    subgraph 4. Use the Model\n      Model --&gt; Use[Use the Model]\n    end&quot;), mdx(&quot;h3&quot;, null, &quot;1. Source the Data&quot;), mdx(&quot;p&quot;, null, &quot;Work with Subject Matter Experts (SMEs) to identify and gather the relevant data sources.&quot;), mdx(&quot;h3&quot;, null, &quot;2. Wrangle the Data&quot;), mdx(&quot;ol&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Understand:&quot;), &quot; Defining the meaning and relationships for each field. Summary statistics, data visualizations, and guidance from SMEs are used to scrutinize the data.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Cleanse:&quot;), &quot; Detect and address corrupt and missing data. Outlier detection and imputation are used to cleanse the data.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Select:&quot;), &quot; Remove unneeded data from the data set, and gather missing data that cannot be reliably inferred. Data sampling is used to systematically create smaller representative samples of larger datasets and feature selection is used to automatically identify the variables most relevant to the outcome variable.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Prepare:&quot;), &quot; Standardize and normalize the data into a consistent structure and format. Integer encoding and one-hot encoding are used to convert categorical data to numerical data to make it easier for a machine learning model to process.&quot;)), mdx(&quot;h4&quot;, null, &quot;Outlier Detection&quot;), mdx(&quot;p&quot;, null, &quot;The most common approaches to outlier detection are to use &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../standard-deviation/&quot;
  }, &quot;standard deviation (STD)&quot;), &quot; or &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../interquartile-range/&quot;
  }, &quot;interquartile range (IQR)&quot;), &quot;.&quot;), mdx(&quot;p&quot;, null, &quot;The following steps are a simple example using standard deviation, but interquartile-range could be used just as easily:&quot;), mdx(&quot;ol&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;Calculate the mean and standard deviation (alternatively, interquartile range) of the data collection&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;Set a cutoff (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;c&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;c&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.43056em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;c&quot;))))), &quot;) of three standard deviations (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u03C3&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;\\sigma&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.43056em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.03588em&quot;
    }
  }, &quot;\u03C3&quot;))))), &quot;), or &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;c&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;3&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u03C3&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;c = 3\\sigma&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.43056em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;c&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.64444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;3&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.03588em&quot;
    }
  }, &quot;\u03C3&quot;)))))), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;Set a lower-bound (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;l&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;l&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.69444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.01968em&quot;
    }
  }, &quot;l&quot;))))), &quot;) of the mean minus the cutoff (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;l&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mover&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;accent&quot;: &quot;true&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mover&quot;
  }, &quot;x&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mover&quot;,
    &quot;stretchy&quot;: &quot;true&quot;
  }, &quot;\u203E&quot;)), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u2212&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;c&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;l = \\overline{x} - c&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.69444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.01968em&quot;
    }
  }, &quot;l&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.71389em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.08333em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord overline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.63056em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;3em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;x&quot;))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.55056em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;3em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;overline-line&quot;,
    &quot;style&quot;: {
      &quot;borderBottomWidth&quot;: &quot;0.04em&quot;
    }
  })))))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2222222222222222em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mbin&quot;
  }, &quot;\u2212&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2222222222222222em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.43056em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;c&quot;))))), &quot;) and an upper-bound (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;u&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;u&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.43056em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;u&quot;))))), &quot;) of the mean plus the cutoff (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;u&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mover&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;accent&quot;: &quot;true&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mover&quot;
  }, &quot;x&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mover&quot;,
    &quot;stretchy&quot;: &quot;true&quot;
  }, &quot;\u203E&quot;)), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;+&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;c&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;u = \\overline{x} + c&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.43056em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;u&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.71389em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.08333em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord overline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.63056em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;3em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;x&quot;))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.55056em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;3em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;overline-line&quot;,
    &quot;style&quot;: {
      &quot;borderBottomWidth&quot;: &quot;0.04em&quot;
    }
  })))))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2222222222222222em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mbin&quot;
  }, &quot;+&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2222222222222222em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.43056em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;c&quot;))))), &quot;)&quot;)), mdx(&quot;p&quot;, null, &quot;All data points less than the lower-bound or greater than the upper-bound can be considered outliers.&quot;), mdx(&quot;h4&quot;, null, &quot;Imputation Options&quot;), mdx(&quot;p&quot;, null, &quot;The basic options for imputation are to do nothing, remove records with missing/corrupt values, or replace the missing/corrupt values (usually with the mean or mode value), or some combination of these options. It&apos;s generally best to test each option and compare the outcomes to determine the best approach.&quot;), mdx(&quot;h3&quot;, null, &quot;3. Model the Data&quot;), mdx(&quot;p&quot;, null, &quot;I&apos;m still learning! This section will be updated as I learn. If you have a good resource to suggestion, please &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://github.com/jamestharpe/jamestharpe.com/issues/new&quot;
  }, &quot;tell me about it&quot;), &quot;.&quot;), mdx(&quot;h3&quot;, null, &quot;4. Use the Model&quot;), mdx(&quot;p&quot;, null, &quot;I&apos;m still learning! This section will be updated as I learn. If you have a good resource to suggestion, please &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://github.com/jamestharpe/jamestharpe.com/issues/new&quot;
  }, &quot;tell me about it&quot;), &quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;Tools for Machine Learning&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://azure.microsoft.com/en-us/services/machine-learning/&quot;
  }, &quot;Azure Machine Learning&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://pandas.pydata.org/&quot;
  }, &quot;Pandas&quot;))), mdx(&quot;h2&quot;, null, &quot;Machine learning resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://proceedings.neurips.cc/paper/2015/file/86df7dcfd896fcaf2674f757a2463eba-Paper.pdf&quot;
  }, &quot;Hidden Technical Debt in Machine Learning Systems&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Standard Deviation]]></title><description><![CDATA[How to define, find, and use the standard deviation]]></description><link>https://www.jamestharpe.com/standard-deviation/</link><guid isPermaLink="false">https://www.jamestharpe.com/standard-deviation/</guid><pubDate>Wed, 02 Dec 2020 21:02:46 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-12-02T21:02:46.000Z&quot;,
  &quot;description&quot;: &quot;How to define, find, and use the standard deviation&quot;,
  &quot;tags&quot;: [&quot;statistics&quot;],
  &quot;title&quot;: &quot;Standard Deviation&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Standard Deviation&quot;), mdx(&quot;p&quot;, null, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u03C3&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;msqrt&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;msub&quot;, {
    parentName: &quot;msqrt&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;msub&quot;
  }, &quot;\u03BC&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;msub&quot;
  }, &quot;2&quot;)))), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;\\sigma = \\sqrt {\\mu _2 }&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.43056em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.03588em&quot;
    }
  }, &quot;\u03C3&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1.04em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.33693999999999996em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord sqrt&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t vlist-t2&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.70306em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;svg-align&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;3em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;,
    &quot;style&quot;: {
      &quot;paddingLeft&quot;: &quot;0.833em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;\u03BC&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t vlist-t2&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.30110799999999993em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-2.5500000000000003em&quot;,
      &quot;marginLeft&quot;: &quot;0em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;2&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-s&quot;
  }, &quot;\u200B&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.15em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;
  })))))))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-2.66306em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;3em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;hide-tail&quot;,
    &quot;style&quot;: {
      &quot;minWidth&quot;: &quot;0.853em&quot;,
      &quot;height&quot;: &quot;1.08em&quot;
    }
  }, mdx(&quot;svg&quot;, {
    parentName: &quot;span&quot;,
    &quot;width&quot;: &quot;400em&quot;,
    &quot;height&quot;: &quot;1.08em&quot;,
    &quot;viewBox&quot;: &quot;0 0 400000 1080&quot;,
    &quot;preserveAspectRatio&quot;: &quot;xMinYMin slice&quot;
  }, mdx(&quot;path&quot;, {
    parentName: &quot;svg&quot;,
    &quot;d&quot;: &quot;M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z&quot;
  }))))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-s&quot;
  }, &quot;\u200B&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.33693999999999996em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;
  })))))))))), mdx(&quot;p&quot;, null, &quot;Standard deviation (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u03C3&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;\\sigma&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.43056em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.03588em&quot;
    }
  }, &quot;\u03C3&quot;))))), &quot; or &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;S&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;T&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;D&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;STD&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.05764em&quot;
    }
  }, &quot;S&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.13889em&quot;
    }
  }, &quot;T&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.02778em&quot;
    }
  }, &quot;D&quot;))))), &quot;) measures the variation of a set of values. If a standard deviation is low, the values tend to be close to the mean. If the standard deviation is high, the values tend to be spread out.&quot;), mdx(&quot;h2&quot;, null, &quot;Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.scribbr.com/statistics/standard-deviation/&quot;
  }, &quot;Understanding and calculating standard deviation&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://byjus.com/standard-deviation-formula/&quot;
  }, &quot;Standard Deviation Formula&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Math]]></title><description><![CDATA[Fun with numbers]]></description><link>https://www.jamestharpe.com/math/</link><guid isPermaLink="false">https://www.jamestharpe.com/math/</guid><pubDate>Wed, 02 Dec 2020 20:55:46 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-12-02T20:55:46.000Z&quot;,
  &quot;description&quot;: &quot;Fun with numbers&quot;,
  &quot;tags&quot;: [],
  &quot;title&quot;: &quot;Math&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Math&quot;), mdx(&quot;h2&quot;, null, &quot;Math News and Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCYO_jab_esuFRV4b17AJtAw&quot;
  }, &quot;3Blue1Brown&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.khanacademy.org/math/&quot;
  }, &quot;Math on Khan Academy&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UC1_uAIS3r8Vu6JjXWvastJg&quot;
  }, &quot;Mathologer YouTube Channel&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCoxcjq-8xIDTYp3uz647V5A&quot;
  }, &quot;Numberphile YouTube Channel&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCOGeU-1Fig3rrDjhm9Zs_wg&quot;
  }, &quot;Vihart YouTube Channel&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Product Management]]></title><description><![CDATA[Resources for Product Management]]></description><link>https://www.jamestharpe.com/product-management/</link><guid isPermaLink="false">https://www.jamestharpe.com/product-management/</guid><pubDate>Tue, 01 Dec 2020 17:05:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-12-01T17:05:11.000Z&quot;,
  &quot;description&quot;: &quot;Resources for Product Management&quot;,
  &quot;tags&quot;: [&quot;marketing&quot;],
  &quot;title&quot;: &quot;Product Management&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Product Management Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://docs.google.com/document/d/1DELwxJzR7NLVE8gNXBloGMEfZvJwaaWUn6mIoUDKA2o/edit#&quot;
  }, &quot;UC Berkeley, Lean/Agile Product Management, 2020 Syllabus and Lectures&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Negotiation]]></title><description><![CDATA[The art and science of reaching agreements]]></description><link>https://www.jamestharpe.com/negotiation/</link><guid isPermaLink="false">https://www.jamestharpe.com/negotiation/</guid><pubDate>Thu, 26 Nov 2020 17:10:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-26T17:10:11.000Z&quot;,
  &quot;description&quot;: &quot;The art and science of reaching agreements&quot;,
  &quot;tags&quot;: [],
  &quot;title&quot;: &quot;Negotiation&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Negotiation&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Chris Voss]]></title><description><![CDATA[Chris Voss Official profile]]></description><link>https://www.jamestharpe.com/chris-voss/</link><guid isPermaLink="false">https://www.jamestharpe.com/chris-voss/</guid><pubDate>Thu, 26 Nov 2020 17:09:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-26T17:09:11.000Z&quot;,
  &quot;tags&quot;: [],
  &quot;title&quot;: &quot;Chris Voss&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Chris Voss&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.blackswanltd.com/our-team/chris-voss&quot;
  }, &quot;Official profile&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[GitLab]]></title><description><![CDATA[An end-to-end DevOps tool chain centered on Git]]></description><link>https://www.jamestharpe.com/gitlab/</link><guid isPermaLink="false">https://www.jamestharpe.com/gitlab/</guid><pubDate>Tue, 24 Nov 2020 16:39:46 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-24T16:39:46.000Z&quot;,
  &quot;description&quot;: &quot;An end-to-end DevOps tool chain centered on Git&quot;,
  &quot;tags&quot;: [&quot;git&quot;, &quot;open-source-software&quot;],
  &quot;title&quot;: &quot;GitLab&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;GitLab&quot;), mdx(&quot;h2&quot;, null, &quot;Why GitLab isn&apos;t as Popular as GitHub for Open-Source&quot;), mdx(&quot;p&quot;, null, &quot;GitLab is open-source, GitHub is closed source. So why does GitHub attract more open-source projects? Obviously, the network effect of GitHub is one reason but I think there&apos;s another: On GitHub I can contribute to multiple organizations &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;with a single identity&quot;), &quot;, on GitLab I need separate identities to contribute to multiple organizations.&quot;), mdx(&quot;p&quot;, null, &quot;On a day-to-day basis, the impact is that GitLab is more convenient than GitHub. Contributors that belong to multiple organizations do not need to log out and back in on GitHub as they do on GitLab. There&apos;s just one \&quot;to-do list\&quot; for everything, rather than for each individual account.&quot;), mdx(&quot;p&quot;, null, &quot;However, there&apos;s also a more human reason: Having a single identity makes coding social. On GitHub, you get all the \&quot;credit\&quot; for your contribution. It&apos;s rewarding to see the contribution graph get darker and darker green on GitHub, but on GitLab those contributions can get split across accounts.&quot;), mdx(&quot;p&quot;, null, &quot;If GitLab wants to get serious about attracting open-source to its platform, they need to allow their users to have a single identity on that platform.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Watt's Law (Power Law)]]></title><description><![CDATA[A formula to define the relationship between power, voltage, and current (P=IV)]]></description><link>https://www.jamestharpe.com/watts-law/</link><guid isPermaLink="false">https://www.jamestharpe.com/watts-law/</guid><pubDate>Tue, 24 Nov 2020 16:39:46 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-24T16:39:46.000Z&quot;,
  &quot;description&quot;: &quot;A formula to define the relationship between power, voltage, and current (P=IV)&quot;,
  &quot;tags&quot;: [&quot;electricity&quot;, &quot;power&quot;, &quot;voltage&quot;, &quot;current&quot;, &quot;si-units&quot;],
  &quot;title&quot;: &quot;Watt&apos;s Law (Power Law)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Watt&apos;s Law&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Watt&apos;s Law&quot;), &quot;, sometimes called the &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Power Law&quot;), &quot;, describes the relationship between &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../power/&quot;
  }, &quot;power&quot;), &quot; (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;P&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;P&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.13889em&quot;
    }
  }, &quot;P&quot;))))), &quot;), &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../current/&quot;
  }, &quot;current&quot;), &quot; (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;I&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;I&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.07847em&quot;
    }
  }, &quot;I&quot;))))), &quot;), and &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../voltage/&quot;
  }, &quot;voltage&quot;), &quot; (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;V&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;V&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.22222em&quot;
    }
  }, &quot;V&quot;))))), &quot;), so that power is defined as:&quot;), mdx(&quot;p&quot;, null, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;P&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;I&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;V&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;P=IV&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.13889em&quot;
    }
  }, &quot;P&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.07847em&quot;
    }
  }, &quot;I&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.22222em&quot;
    }
  }, &quot;V&quot;)))))), mdx(&quot;p&quot;, null, &quot;Given tha values for any two variables, we solve for the third so that &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;voltage&quot;), &quot;, electrical potential energy, is defined as:&quot;), mdx(&quot;p&quot;, null, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;V&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;P&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;I&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;V=P/I&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.22222em&quot;
    }
  }, &quot;V&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.13889em&quot;
    }
  }, &quot;P&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.07847em&quot;
    }
  }, &quot;I&quot;)))))), mdx(&quot;p&quot;, null, &quot;And current, which is the flow of &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../electricity/&quot;
  }, &quot;electricity&quot;), &quot;, is defined as:&quot;), mdx(&quot;p&quot;, null, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;I&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;P&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;V&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;I=P/V&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.07847em&quot;
    }
  }, &quot;I&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.13889em&quot;
    }
  }, &quot;P&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.22222em&quot;
    }
  }, &quot;V&quot;)))))), mdx(&quot;h2&quot;, null, &quot;Power and Watts&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Power&quot;), &quot; is measured in watts. One &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;watt&quot;), &quot; (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;W&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;W&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.13889em&quot;
    }
  }, &quot;W&quot;))))), &quot;) is equal to one &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../physics/&quot;
  }, &quot;joule&quot;), &quot; (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;J&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;J&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.09618em&quot;
    }
  }, &quot;J&quot;))))), &quot;) per second (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;s&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;s&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.43056em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;s&quot;))))), &quot;), or &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;W&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mfrac&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mfrac&quot;
  }, &quot;J&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mfrac&quot;
  }, &quot;s&quot;))), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;W = \\frac{J}{s}&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.13889em&quot;
    }
  }, &quot;W&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1.217331em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.345em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mopen nulldelimiter&quot;
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mfrac&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t vlist-t2&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.872331em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-2.6550000000000002em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;3em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal mtight&quot;
  }, &quot;s&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.23em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;3em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;frac-line&quot;,
    &quot;style&quot;: {
      &quot;borderBottomWidth&quot;: &quot;0.04em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.394em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;3em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal mtight&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.09618em&quot;
    }
  }, &quot;J&quot;))))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-s&quot;
  }, &quot;\u200B&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.345em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;
  }))))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mclose nulldelimiter&quot;
  })))))), &quot;. Another way to put it is, a watt is the amount of electricity required to accelerate 1kg by 1 meter per second squared (a joule) over 1 second. In other words, a watt is \&quot;how much work can be done per second\&quot;.&quot;), mdx(&quot;h3&quot;, null, &quot;Video: Power, Work, and Energy&quot;), mdx(&quot;iframe&quot;, {
    width: &quot;560&quot;,
    height: &quot;315&quot;,
    src: &quot;https://www.youtube.com/embed/RpbxIG5HTf4&quot;,
    frameBorder: &quot;0&quot;,
    allow: &quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot;,
    allowFullScreen: true
  }), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;Full course on Khan Academy: &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://www.khanacademy.org/science/high-school-physics/work-and-energy-2/power-2/v/power&quot;
  }, &quot;Power&quot;), &quot;)&quot;)), mdx(&quot;h2&quot;, null, &quot;History&quot;), mdx(&quot;p&quot;, null, &quot;The terms watt and Watt&apos;s Law are named after &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://en.wikipedia.org/wiki/James_Watt&quot;
  }, &quot;James Watt&quot;), &quot;, best known for his work to improve the steam engine.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Linux]]></title><description><![CDATA[A free and open-source operating system]]></description><link>https://www.jamestharpe.com/linux/</link><guid isPermaLink="false">https://www.jamestharpe.com/linux/</guid><pubDate>Tue, 24 Nov 2020 15:33:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-24T15:33:11.000Z&quot;,
  &quot;description&quot;: &quot;A free and open-source operating system&quot;,
  &quot;tags&quot;: [&quot;operating-systems&quot;, &quot;open-source-software&quot;],
  &quot;title&quot;: &quot;Linux&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Linux&quot;), mdx(&quot;h2&quot;, null, &quot;Useful Commands&quot;), mdx(&quot;table&quot;, null, mdx(&quot;thead&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;thead&quot;
  }, mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Command&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Description&quot;))), mdx(&quot;tbody&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;a&quot;, {
    parentName: &quot;td&quot;,
    &quot;href&quot;: &quot;https://www.man7.org/linux/man-pages/man8/lsusb.8.html&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;a&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;lsusb&quot;))), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Display information about the available USB ports, including information about what is connected to which port&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;a&quot;, {
    parentName: &quot;td&quot;,
    &quot;href&quot;: &quot;https://man7.org/linux/man-pages/man1/passwd.1.html&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;a&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;passwd&quot;))), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Change the password or password validity period for a user account&quot;)))), mdx(&quot;h2&quot;, null, &quot;Linux Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCvA_wgsX6eFAOXI8Rbg_WiQ&quot;
  }, &quot;tutorialLinux YouTube Channel&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Linux File System]]></title><description><![CDATA[Overview of folders in the root of most Linux distributions]]></description><link>https://www.jamestharpe.com/linux-file-system/</link><guid isPermaLink="false">https://www.jamestharpe.com/linux-file-system/</guid><pubDate>Tue, 24 Nov 2020 15:33:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-24T15:33:11.000Z&quot;,
  &quot;description&quot;: &quot;Overview of folders in the root of most Linux distributions&quot;,
  &quot;tags&quot;: [&quot;linux&quot;],
  &quot;title&quot;: &quot;Linux File System&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;The Linux File System&quot;), mdx(&quot;h2&quot;, null, mdx(&quot;code&quot;, {
    parentName: &quot;h2&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/bin&quot;), &quot; - Binaries&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/bin&quot;), &quot; folder contains the basic set of binaries available to every user. It contains the binaries for basic commands such as &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;ls&quot;), &quot;, &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;cat&quot;), &quot;, &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;chmod&quot;), &quot;, &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;mv&quot;), &quot;, and more.&quot;), mdx(&quot;h2&quot;, null, mdx(&quot;code&quot;, {
    parentName: &quot;h2&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/boot&quot;), &quot; - Bootloaders&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/boot&quot;), &quot; folder contains the files necessary to load the operating system when the computer is turned on.&quot;), mdx(&quot;h2&quot;, null, mdx(&quot;code&quot;, {
    parentName: &quot;h2&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/dev&quot;), &quot; - Devices&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/dev&quot;), &quot; folder contains files that represent devices. In Unix-like systems like Linux, disks and just about everything else are represented as files.&quot;), mdx(&quot;p&quot;, null, &quot;For example: &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;sda&quot;), &quot; is a disk. Originally &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;sd&quot;), &quot; stood for &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;SCSI device&quot;), &quot; but became a catch-all for any &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://en.wikipedia.org/wiki/Block_(data_storage)&quot;
  }, &quot;block storage&quot;), &quot; device. The letter that follows &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;sd&quot;), &quot;, &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;a&quot;), &quot; in this case, represents the order in which the device was found.&quot;), mdx(&quot;h2&quot;, null, mdx(&quot;code&quot;, {
    parentName: &quot;h2&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/etc&quot;), &quot; - Etcetera (and so on)&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/etc&quot;), &quot; folder contains system-wide (as opposed to user-specific) configuration files.&quot;), mdx(&quot;h2&quot;, null, mdx(&quot;code&quot;, {
    parentName: &quot;h2&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/home&quot;), &quot; - Home Folders&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/home&quot;), &quot; directory contains home directories for users other than &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;root&quot;), &quot;.&quot;), mdx(&quot;h2&quot;, null, mdx(&quot;code&quot;, {
    parentName: &quot;h2&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/media&quot;), &quot; - Media&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/media&quot;), &quot; folder is where removable disks (e.g. CDs, thumb drives) are automatically mounted.&quot;), mdx(&quot;h2&quot;, null, mdx(&quot;code&quot;, {
    parentName: &quot;h2&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/mnt&quot;), &quot; - Mount&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/media&quot;), &quot; folder is where removable disks (e.g. CDs, thumb drives) are manually mounted, very similar to the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/media&quot;), &quot; folder.&quot;), mdx(&quot;h2&quot;, null, mdx(&quot;code&quot;, {
    parentName: &quot;h2&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/opt&quot;), &quot; - Optional&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/opt&quot;), &quot; folder is intended to hold manually installed 3rd-party software.&quot;), mdx(&quot;h2&quot;, null, mdx(&quot;code&quot;, {
    parentName: &quot;h2&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/proc&quot;), &quot; - Processes&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/proc&quot;), &quot; folder contains pseudo files that contain information about processes and resources. All running processes have a folder under &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/proc&quot;), &quot;.&quot;), mdx(&quot;h2&quot;, null, mdx(&quot;code&quot;, {
    parentName: &quot;h2&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/root&quot;), &quot; - Root (user) Home&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/root&quot;), &quot; folder is the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;root&quot;), &quot; user&apos;s home directory&quot;), mdx(&quot;h2&quot;, null, mdx(&quot;code&quot;, {
    parentName: &quot;h2&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/run&quot;), &quot; - Run (temporary) Files&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/run&quot;), &quot; directory contains temporary files, all of which actually reside in memory. The contents of this directory are deleted upon reboot (because memory is cleared).&quot;), mdx(&quot;h2&quot;, null, mdx(&quot;code&quot;, {
    parentName: &quot;h2&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/sbin&quot;), &quot; - System (or Super User) Binaries&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/sbin&quot;), &quot; folder contains binaries used for system administration tasks including disk and network management. It contains the binaries for commands such as &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;chkconfig&quot;), &quot;, &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;ifcondfig&quot;), &quot;, and &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;fsck&quot;), &quot;.&quot;), mdx(&quot;h2&quot;, null, mdx(&quot;code&quot;, {
    parentName: &quot;h2&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/srv&quot;), &quot; - Service (or Server) Data&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/srv&quot;), &quot; folder stores service/server data to be accessed by external users, for example via a web server.&quot;), mdx(&quot;h2&quot;, null, mdx(&quot;code&quot;, {
    parentName: &quot;h2&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/sys&quot;), &quot; - System Temporary Files&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/sys&quot;), &quot; folder contains temporary files used by the system, all of which are stored in memory (very similar to the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/run&quot;), &quot; folder). The contents of this directory are deleted upon reboot (because memory is cleared).&quot;), mdx(&quot;h2&quot;, null, mdx(&quot;code&quot;, {
    parentName: &quot;h2&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/tmp&quot;), &quot; - Temporary Files&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/tmp&quot;), &quot; folder contains temporary files. Unlike the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/run&quot;), &quot; folder, files stored in &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/tmp&quot;), &quot; are less restricted and may be accessed by other users. Generally speaking, developers should prever to use &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/run&quot;), &quot; over &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/tmp&quot;), &quot; for security.&quot;), mdx(&quot;h2&quot;, null, mdx(&quot;code&quot;, {
    parentName: &quot;h2&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/usr&quot;), &quot; - Users&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/usr&quot;), &quot; folder contains \&quot;non essential\&quot; apps and files used by users (as opposed to the system).&quot;), mdx(&quot;h2&quot;, null, mdx(&quot;code&quot;, {
    parentName: &quot;h2&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/var&quot;), &quot; - Variable&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/var&quot;), &quot; folder contains files that are expected to grow over time (e.g. logs and caches).&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Ender 3 Pro 3D Printer]]></title><description><![CDATA[A small, reliable 3D printer appropriate for home use]]></description><link>https://www.jamestharpe.com/3d-printer-ender-3-pro/</link><guid isPermaLink="false">https://www.jamestharpe.com/3d-printer-ender-3-pro/</guid><pubDate>Tue, 24 Nov 2020 13:13:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-24T13:13:11.000Z&quot;,
  &quot;description&quot;: &quot;A small, reliable 3D printer appropriate for home use&quot;,
  &quot;tags&quot;: [&quot;3d-printing&quot;],
  &quot;title&quot;: &quot;Ender 3 Pro 3D Printer&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Ender 3 Pro 3D Printer Notes&quot;), mdx(&quot;p&quot;, null, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://www.creality.com/goods-detail/ender-3-pro-3d-printer&quot;
  }, &quot;The Ender 3 Pro 3D Printer&quot;), &quot; is a great first 3D printer.&quot;), mdx(&quot;h2&quot;, null, &quot;Ender 3 Specs&quot;), mdx(&quot;table&quot;, null, mdx(&quot;thead&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;thead&quot;
  }, mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Specification&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Value&quot;))), mdx(&quot;tbody&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Filament size&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;1.75mm&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Max print depth&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;220mm&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Max print height&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;250mm&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Max print width&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;220mm&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Print speed&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;180mm/s&quot;)))), mdx(&quot;h2&quot;, null, &quot;Video: How to Level the Ender 3 Pro Bed&quot;), mdx(&quot;iframe&quot;, {
    width: &quot;560&quot;,
    height: &quot;315&quot;,
    src: &quot;https://www.youtube.com/embed/hKVJKTDp_9k&quot;,
    frameBorder: &quot;0&quot;,
    allow: &quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot;,
    allowFullScreen: true
  }));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Bullet Journaling Tips & Advice]]></title><description><![CDATA[Simple tips and advice from lessons learned through years of bullet journaling]]></description><link>https://www.jamestharpe.com/bullet-journaling-tips/</link><guid isPermaLink="false">https://www.jamestharpe.com/bullet-journaling-tips/</guid><pubDate>Mon, 23 Nov 2020 20:38:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-23T20:38:11.000Z&quot;,
  &quot;description&quot;: &quot;Simple tips and advice from lessons learned through years of bullet journaling&quot;,
  &quot;tags&quot;: [&quot;bullet-journaling&quot;],
  &quot;title&quot;: &quot;Bullet Journaling Tips &amp; Advice&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Bullet Journaling Tips&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Start new custom collections with a mission statement&quot;), &quot; to stay focused on what&apos;s important. &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;../five-whys/&quot;
  }, &quot;Five whys&quot;), &quot; is a great exercise to help get to the root of what &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;li&quot;
  }, &quot;really&quot;), &quot; needs to be accomplished. It also helps avoid \&quot;junk drawer\&quot; collections that ultimately serve no purpose.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Don&apos;t depend on colors or fancy artwork&quot;), &quot; lest your system fall apart when you can&apos;t find the right color pens or left your stencils in the office.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;\&quot;Word wrap\&quot; at two blocks&quot;), &quot; (when using a dot journal) to prevent words running off of the page and to provide a little extra margin for later addendum/correction.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Write-out your schedule each day&quot;), &quot; to see it at-a-glance.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Keep a \&quot;family\&quot; collection&quot;), &quot; with a list of medical conditions (e.g. allergies) for each family member, for use in emergencies.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Create a list of key accomplishments at the end of each month&quot;), &quot; as part of the migration process. This is particularly helpful when preparing for performance reviews at work.&quot;)));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Bullet Journaling]]></title><description><![CDATA[A method of to organize schedules, reminders, task lists, and brainstorming with into a single notebook]]></description><link>https://www.jamestharpe.com/bullet-journaling/</link><guid isPermaLink="false">https://www.jamestharpe.com/bullet-journaling/</guid><pubDate>Mon, 23 Nov 2020 19:00:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-23T19:00:11.000Z&quot;,
  &quot;description&quot;: &quot;A method of to organize schedules, reminders, task lists, and brainstorming with into a single notebook&quot;,
  &quot;tags&quot;: [&quot;personal-productivity&quot;],
  &quot;title&quot;: &quot;Bullet Journaling&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Bullet Journaling&quot;), mdx(&quot;p&quot;, null, &quot;Bullet Journaling is a modular set of practices for personal organization. These practices organize schedules, reminders, task lists, ideas, and other organizational artifacts into a single notebook. Though journals are typically handwritten, digital journals can also benefit from the organizational methods and practices of bullet journaling.&quot;), mdx(&quot;iframe&quot;, {
    width: &quot;560&quot;,
    height: &quot;315&quot;,
    src: &quot;https://www.youtube.com/embed/fm15cmYU0IM&quot;,
    frameBorder: &quot;0&quot;,
    allow: &quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot;,
    allowFullScreen: true
  }), mdx(&quot;h2&quot;, null, &quot;Structure of a Bullet Journal&quot;), mdx(&quot;p&quot;, null, &quot;A bullet journal is made up of collections. A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;collection&quot;), &quot; is a set of closely related information. A bullet journal is made up of four core collections; however, more collections can be added based on the individual journaler&apos;s needs.&quot;), mdx(&quot;h3&quot;, null, &quot;Core Bullet Journal Collections&quot;), mdx(&quot;ol&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Index.&quot;), &quot; A chronologically ordered list of all the collections in the journal, except the daily log collections.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Future Log.&quot;), &quot; A calendar of events and tasks that will occur outside the current month.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Monthly Log.&quot;), &quot; A specialized collection to organize the events and tasks of a particular month. Minimally, it consists of the&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Daily Log.&quot;), &quot; A place to rapid-log tasks, events, and notes as they occur throughout the day.&quot;)), mdx(&quot;h3&quot;, null, &quot;Custom Collections&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Custom collections&quot;), &quot; are created to meet some specific need. For example, to plan a project or to track a fitness routine.&quot;), mdx(&quot;h2&quot;, null, &quot;Core Bullet Journal Practices&quot;), mdx(&quot;p&quot;, null, &quot;The Bullet Journal website contains a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://bulletjournal.com/pages/learn&quot;
  }, &quot;complete introduction to core bullet journaling practices&quot;), &quot;, which I&apos;ve summarized here.&quot;), mdx(&quot;h2&quot;, null, &quot;Rapid Logging&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Rapid logging&quot;), &quot; is the practice of quickly jotting-down notes in a bulleted-list format, typically within the daily log. Specialized bullets and signifiers are used to distinguish between different types of notes. Types of notes are typically tasks, events, or information; however the journaler may choose to invent their own types of notes as well.&quot;), mdx(&quot;h3&quot;, null, &quot;Common Bullets&quot;), mdx(&quot;table&quot;, null, mdx(&quot;thead&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;thead&quot;
  }, mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Bullet&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Term&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Definition&quot;))), mdx(&quot;tbody&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;\u2022&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Task&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Something that needs to be completed&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;o&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Event&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Something that happened or is scheduled to happen&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;\u2014&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Information&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Something worth remembering. Facts, ideas, observations.&quot;)))), mdx(&quot;h3&quot;, null, &quot;Bullet States&quot;), mdx(&quot;table&quot;, null, mdx(&quot;thead&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;thead&quot;
  }, mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Notation&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Term&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Definition&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Applies to&quot;))), mdx(&quot;tbody&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;\u2716&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Done&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Completed task&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Tasks&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;&lt;&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Scheduled&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Scheduled for next month or later&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Tasks&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;&gt;&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Migrated&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Migrated to another collection&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Tasks&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;del&quot;, {
    parentName: &quot;td&quot;
  }, &quot;strike through&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Irrelevant&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;No longer relevant&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;All bullets&quot;)))), mdx(&quot;h3&quot;, null, &quot;Common Signifiers&quot;), mdx(&quot;table&quot;, null, mdx(&quot;thead&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;thead&quot;
  }, mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Signifier&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Term&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Definition&quot;))), mdx(&quot;tbody&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;*&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Important&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Signifies special importance or priority&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;!&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Inspiration&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Signifies inspirational ideas and insights&quot;)))), mdx(&quot;h2&quot;, null, &quot;Bullet Journal Practices&quot;), mdx(&quot;p&quot;, null, &quot;Bullet journal practices are intended to maintain focus on what matters through daily and monthly reviews intended to refine task lists and reflect on what matters.&quot;), mdx(&quot;h3&quot;, null, &quot;Daily Review&quot;), mdx(&quot;p&quot;, null, &quot;Spend about 5 - 15 minutes to review notes from the past day, update with status and signifiers as necessary, and create the &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;daily log&quot;), &quot; for the day ahead. Do this at either the very beginning or very end of each day.&quot;), mdx(&quot;h3&quot;, null, &quot;Monthly Migrations&quot;), mdx(&quot;p&quot;, null, &quot;At the end of each month, create a new &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;monthly log&quot;), &quot; for the month ahead. Start by creating the layout for the next month, then review the previous month to:&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Mark completed tasks with &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;\u2716&quot;), &quot;.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;del&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Cross-out&quot;), &quot; irrelevant tasks, notes, and events.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;For tasks you plan to complete next month, mark them as migrated (&quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;&gt;&quot;), &quot;) and add them to the next month&apos;s task list or to the relevant &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;custom collection&quot;), &quot;.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;For tasks you plan to complete after next month, move them to the future log and mark them as scheduled (&quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;&lt;&quot;), &quot;).&quot;)), mdx(&quot;p&quot;, null, &quot;The goal is that all relevant tasks have been copied to the next month&apos;s task list, the future log, or a custom collection.&quot;), mdx(&quot;h2&quot;, null, &quot;Bullet Journaling Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCt3B6rUXb__X2eMyY7jzgIg&quot;
  }, &quot;Bullet Journal YouTube Channel&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://bulletjournal.com/&quot;
  }, &quot;Official Bullet Journal Website&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Mermaid]]></title><description><![CDATA[A software architecture in which applications are made up of loosely coupled services]]></description><link>https://www.jamestharpe.com/mermaid/</link><guid isPermaLink="false">https://www.jamestharpe.com/mermaid/</guid><pubDate>Mon, 23 Nov 2020 18:01:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-23T18:01:11.000Z&quot;,
  &quot;description&quot;: &quot;A software architecture in which applications are made up of loosely coupled services&quot;,
  &quot;tags&quot;: [&quot;computer-languages&quot;],
  &quot;title&quot;: &quot;Mermaid&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Mermaid Diagrams&quot;), mdx(&quot;p&quot;, null, &quot;Mermaid is a simple &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../computer-languages/&quot;
  }, &quot;computer language&quot;), &quot; for creating diagrams as code.&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://mermaid-js.github.io/&quot;
  }, &quot;Official Website&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://mermaid-js.github.io/mermaid-live-editor/&quot;
  }, &quot;Live Editor&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Five Whys]]></title><description><![CDATA[A method for root-cause analysis and problem solving]]></description><link>https://www.jamestharpe.com/five-whys/</link><guid isPermaLink="false">https://www.jamestharpe.com/five-whys/</guid><pubDate>Mon, 23 Nov 2020 17:33:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-23T17:33:11.000Z&quot;,
  &quot;description&quot;: &quot;A method for root-cause analysis and problem solving&quot;,
  &quot;tags&quot;: [&quot;lean&quot;, &quot;personal-productivity&quot;, &quot;management&quot;],
  &quot;title&quot;: &quot;Five Whys&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Five Whys&quot;), mdx(&quot;p&quot;, null, &quot;Five Whys is a heuristic approach for root-cause analysis. When faced with an opportunity, asking why five times can prove useful to identify underlying causes and motivations. The &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;five&quot;), &quot; in \&quot;five whys\&quot; is anecdotally the number of iterations required to get to the real root cause, however more or fewer may be required in reality.&quot;), mdx(&quot;h2&quot;, null, &quot;Example: Underlying Motivations&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Opportunity:&quot;), &quot; I want a promotion&quot;), mdx(&quot;ol&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Why do you want a promotion?&quot;), &quot; To increase my income and influence.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Why do you want to increase your influence?&quot;), &quot; To build &amp; be part of a culture that I will find fulfilling.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Why build a culture?&quot;), &quot; I&apos;m going to be here for a long time.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Why will you be here for a long time?&quot;), &quot; I&apos;m motivated to influence the culture because believe I can find a balance between my need to take risks and my need for financial security.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Why do you need to balance risk and security?&quot;), &quot; Family makes risk too scary without security, but I get bored without risk and start to fail. To feel successful, I need to take risks that pay off but realistically I need security to take those risks.&quot;)));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Lean]]></title><description><![CDATA[A method for methodically maximizing with progressively fewer resources]]></description><link>https://www.jamestharpe.com/lean/</link><guid isPermaLink="false">https://www.jamestharpe.com/lean/</guid><pubDate>Mon, 23 Nov 2020 17:33:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-23T17:33:11.000Z&quot;,
  &quot;description&quot;: &quot;A method for methodically maximizing with progressively fewer resources&quot;,
  &quot;tags&quot;: [],
  &quot;title&quot;: &quot;Lean&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Reinhold Niebuhr Quotes]]></title><description><![CDATA[A theologian and ethicist, notable for originating the serenity prayer (among other things)]]></description><link>https://www.jamestharpe.com/reinhold-niebuhr/</link><guid isPermaLink="false">https://www.jamestharpe.com/reinhold-niebuhr/</guid><pubDate>Mon, 23 Nov 2020 17:25:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-23T17:25:11.000Z&quot;,
  &quot;description&quot;: &quot;A theologian and ethicist, notable for originating the serenity prayer (among other things)&quot;,
  &quot;tags&quot;: [],
  &quot;title&quot;: &quot;Reinhold Niebuhr Quotes&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Reinhold Niebuhr Quotes&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;\&quot;Father, give us the courage to change what must be altered, serenity to accept what cannot be helped, and insight to know one from another\&quot;&quot;)));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Serenity Prayer]]></title><description><![CDATA[A prayer for wisdom]]></description><link>https://www.jamestharpe.com/serenity-prayer/</link><guid isPermaLink="false">https://www.jamestharpe.com/serenity-prayer/</guid><pubDate>Mon, 23 Nov 2020 17:25:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-23T17:25:11.000Z&quot;,
  &quot;description&quot;: &quot;A prayer for wisdom&quot;,
  &quot;tags&quot;: [&quot;reinhold-niebuhr&quot;],
  &quot;title&quot;: &quot;Serenity Prayer&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Serenity Prayer&quot;), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;God grant me the serenity to accept the things I cannot change, &quot;, mdx(&quot;br&quot;, null), &quot;\nCourage to change the things I can, &quot;, mdx(&quot;br&quot;, null), &quot;\nAnd the wisdom to know the difference.&quot;)));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Carl Sagan]]></title><description><![CDATA[Information about Carl Sagan]]></description><link>https://www.jamestharpe.com/carl-sagan/</link><guid isPermaLink="false">https://www.jamestharpe.com/carl-sagan/</guid><pubDate>Mon, 23 Nov 2020 17:23:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-23T17:23:11.000Z&quot;,
  &quot;description&quot;: &quot;Information about Carl Sagan&quot;,
  &quot;tags&quot;: [&quot;science&quot;],
  &quot;title&quot;: &quot;Carl Sagan&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Carl Sagan&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://carlsagan.com/&quot;
  }, &quot;Official website&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://soundcloud.com/radiolab/radiolab-valentine-carl-sagan&quot;
  }, &quot;Radiolab Valentine: Carl Sagan and Ann Druyan&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[The Bullet Journal Method by Ryder Carroll]]></title><description><![CDATA[A book by Ryder Carroll, the Bullet Journal Method describes an approach to life management through journals]]></description><link>https://www.jamestharpe.com/bullet-journal-method/</link><guid isPermaLink="false">https://www.jamestharpe.com/bullet-journal-method/</guid><pubDate>Mon, 23 Nov 2020 17:13:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-23T17:13:11.000Z&quot;,
  &quot;description&quot;: &quot;A book by Ryder Carroll, the Bullet Journal Method describes an approach to life management through journals&quot;,
  &quot;redirect_from&quot;: [&quot;/book-bullet-journal-method/&quot;],
  &quot;tags&quot;: [&quot;books&quot;, &quot;ryder-carroll&quot;, &quot;bullet-journaling&quot;],
  &quot;title&quot;: &quot;The Bullet Journal Method by Ryder Carroll&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;The Bullet Journal Method&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://bulletjournal.com/pages/book&quot;
  }, &quot;Official Website&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/bulletjournal&quot;
  }, &quot;YouTube Channel&quot;))), mdx(&quot;h2&quot;, null, &quot;Quotes from The Bullet Journal Method&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;\&quot;Perfection is an unnatural and damaging concept\&quot; --Ryder Carroll&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;\&quot;Wisdom comes from making peace w/ our fallible natures\&quot; --Ryder Carroll&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;\&quot;Trying to think our way out of situations beyond our control may feel productive, but it&apos;s nothing more than a powerful distraction.\&quot; --Ryder Carroll&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;\&quot;The process accounts for the majority of the experience.\&quot; --Ryder Carroll&quot;)));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Never Split the Difference by Chris Voss]]></title><description><![CDATA[A book by Chris Voss, Never Split the Difference describes various strategies and tactics for successful negotiation]]></description><link>https://www.jamestharpe.com/never-split-the-difference/</link><guid isPermaLink="false">https://www.jamestharpe.com/never-split-the-difference/</guid><pubDate>Mon, 23 Nov 2020 17:13:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-23T17:13:11.000Z&quot;,
  &quot;description&quot;: &quot;A book by Chris Voss, Never Split the Difference describes various strategies and tactics for successful negotiation&quot;,
  &quot;redirect_from&quot;: [&quot;/book-never-split-the-difference/&quot;],
  &quot;tags&quot;: [&quot;books&quot;, &quot;chris-voss&quot;, &quot;negotiation&quot;],
  &quot;title&quot;: &quot;Never Split the Difference by Chris Voss&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Never Split the Difference&quot;), mdx(&quot;p&quot;, null, &quot;In &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Never Split the Difference&quot;), &quot;, former FBI negotiator &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../chris-voss/&quot;
  }, &quot;Chris Voss&quot;), &quot; breaks down his approach to &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../negotiation/&quot;
  }, &quot;negotiation&quot;), &quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;Key Lessons from Never Split the Difference&quot;), mdx(&quot;h3&quot;, null, &quot;Be a Mirror&quot;), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;\&quot;&quot;, &quot;[Effective negotiation]&quot;, &quot; starts with the universally applicable premise that people want to be understood and accepted. Listening is the cheapest, yet most effective concession we can make to get there. By listening intensely, a negotiator demonstrates empathy and shows a sincere desire to better understand what the other side is experiencing.\&quot;&quot;)), mdx(&quot;p&quot;, null, &quot;Mirroring is one of the most effective ways to build trust, gather information, and make your negotiation opponent feel understood.&quot;), mdx(&quot;p&quot;, null, &quot;Ths basics of mirroring are simple: Repeat the last few critical words of what someone has just said. Mirroring is best done with a calm and confident voice, which Voss refers to as \&quot;the late-night FM DJ voice\&quot; - the negotiator should be focused on &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;verbal communication&quot;), &quot;, not body language. This encourages the person being mirrored to elaborate.&quot;), mdx(&quot;p&quot;, null, &quot;Mirroring can seem awkward at first, and takes practice, but can eventually seem very natural. Voss claims that mirroring is the closest thing to a real world \&quot;Jedi mind trick.\&quot;&quot;), mdx(&quot;h3&quot;, null, &quot;Label Emotions&quot;), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;\&quot;Empathy is not about being nice or agreeing with the other side. It&apos;s about understanding them. Empathy helps us learn the position the enemy is in, why their actions make sense (to them), and what might move them.&quot;)), mdx(&quot;p&quot;, null, &quot;Empathy helps to understand why someone&apos;s actions make sense &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;to them&quot;), &quot;. Labeling is a simple way to show empathy because it acknowledges and validates emotion and shows you know how a person feels. Labeling also helps to build rapport.&quot;), mdx(&quot;p&quot;, null, &quot;Labeling is as simple as listening to someone, then naming the emotion behind it. For example, \&quot;it seems like you were really disappointed.\&quot;&quot;), mdx(&quot;p&quot;, null, &quot;When labeling, avoid the word \&quot;I\&quot; and instead use the word \&quot;it\&quot;: \&quot;It sounds like,\&quot; \&quot;it seems like,\&quot; \&quot;it looks like,\&quot; rather than \&quot;I&apos;m hearing that...\&quot; because \&quot;I\&quot; detracts from the emotions.&quot;), mdx(&quot;p&quot;, null, &quot;Labels are particularly useful when used to reinforce positive perceptions.&quot;), mdx(&quot;h3&quot;, null, &quot;Start with \&quot;No\&quot;&quot;), mdx(&quot;p&quot;, null, &quot;Many who are versed in negotiation try to get the other party to say \&quot;yes\&quot; as much as possible, but Voss suggests starting with \&quot;no\&quot; because \&quot;&apos;no&apos; start&apos;s the negotiation.\&quot; \&quot;Yes\&quot; is often counterfeit, an answer given as a way to end a conversation, whereas \&quot;no\&quot; is most often an attempt to resist change that can be overcome.&quot;), mdx(&quot;p&quot;, null, &quot;\&quot;No\&quot; can also be used to open up new options and ideas to intentionally mislabel someone&apos;s desires, so that they respond with \&quot;no\&quot;. One of the best tactics from this book is the \&quot;email magic\&quot; tactic: If you&apos;re email is being ignored, send one last email asking \&quot;have you given up on this project?\&quot;. This often elicits a \&quot;no\&quot; and can spur the other party to action.&quot;), mdx(&quot;h3&quot;, null, &quot;Use and be Skeptical of Deadlines&quot;), mdx(&quot;p&quot;, null, &quot;Deadlines, even artificial ones, can push the other party to be more forthright and come forward with concessions more quickly. Which is exactly why a deadline posed by an opponent should not \&quot;trick you into believing that doing a deal now is more important than getting a good dea.\&quot;&quot;), mdx(&quot;p&quot;, null, &quot;Very few deadlines are real, so be skeptical when faced with a deadline. Instead, use deadlines to drive the behavior you want from the other party.&quot;), mdx(&quot;h2&quot;, null, &quot;Quotes from Never Split the Difference&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;\&quot;...no matter how we dress up our negotiations in mathematical theories, we are always an animal, always acting and reacting first and foremost from our deeply held but mostly invisible and inchoate fears, needs, perceptions, and desires.\&quot; --Chris Voss&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;\&quot;List the worst things that the other party could say about you and say them before the other person can... to head off negative dynamics before they take root.\&quot; --Chris Voss&quot;)));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Eliyahu Goldratt]]></title><description><![CDATA[Information about Eliyahu Goldratt]]></description><link>https://www.jamestharpe.com/eliyahu-goldratt/</link><guid isPermaLink="false">https://www.jamestharpe.com/eliyahu-goldratt/</guid><pubDate>Mon, 23 Nov 2020 17:09:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-23T17:09:11.000Z&quot;,
  &quot;description&quot;: &quot;Information about Eliyahu Goldratt&quot;,
  &quot;tags&quot;: [],
  &quot;title&quot;: &quot;Eliyahu Goldratt&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Eliyahu Goldratt&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Mark Twain Quotes]]></title><description><![CDATA[Mark Twain Quotes "I've had a lot of worries in my life, most of which never happened."]]></description><link>https://www.jamestharpe.com/mark-twain/</link><guid isPermaLink="false">https://www.jamestharpe.com/mark-twain/</guid><pubDate>Mon, 23 Nov 2020 17:09:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-23T17:09:11.000Z&quot;,
  &quot;tags&quot;: [],
  &quot;title&quot;: &quot;Mark Twain Quotes&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Mark Twain Quotes&quot;), mdx(&quot;p&quot;, null, &quot;\&quot;I&apos;ve had a lot of worries in my life, most of which never happened.\&quot;&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Ryder Carroll]]></title><description><![CDATA[Ryder Carroll Official website Twitter]]></description><link>https://www.jamestharpe.com/ryder-carroll/</link><guid isPermaLink="false">https://www.jamestharpe.com/ryder-carroll/</guid><pubDate>Mon, 23 Nov 2020 17:09:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-23T17:09:11.000Z&quot;,
  &quot;tags&quot;: [],
  &quot;title&quot;: &quot;Ryder Carroll&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Ryder Carroll&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;http://www.rydercarroll.com/&quot;
  }, &quot;Official website&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://twitter.com/rydercarroll&quot;
  }, &quot;Twitter&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Internet of Things (IoT)]]></title><description><![CDATA[Tools and technologies behind Internet of Things (IoT)]]></description><link>https://www.jamestharpe.com/iot/</link><guid isPermaLink="false">https://www.jamestharpe.com/iot/</guid><pubDate>Mon, 23 Nov 2020 16:15:18 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-23T16:15:18.000Z&quot;,
  &quot;description&quot;: &quot;Tools and technologies behind Internet of Things (IoT)&quot;,
  &quot;redirect_from&quot;: [&quot;/techniques/iot/&quot;],
  &quot;tags&quot;: [],
  &quot;title&quot;: &quot;Internet of Things (IoT)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Microservices]]></title><description><![CDATA[A software architecture in which applications are made up of loosely coupled services]]></description><link>https://www.jamestharpe.com/microservices/</link><guid isPermaLink="false">https://www.jamestharpe.com/microservices/</guid><pubDate>Mon, 23 Nov 2020 14:16:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-23T14:16:11.000Z&quot;,
  &quot;description&quot;: &quot;A software architecture in which applications are made up of loosely coupled services&quot;,
  &quot;redirect_from&quot;: [&quot;/techniques/microservices/&quot;],
  &quot;tags&quot;: [&quot;distributed-systems&quot;, &quot;software-architecture&quot;],
  &quot;title&quot;: &quot;Microservices&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Microservices&quot;), mdx(&quot;p&quot;, null, &quot;Microservices is an &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../software-architecture/&quot;
  }, &quot;architectural style&quot;), &quot; for developing and deploying software applications as a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../distributed-systems/&quot;
  }, &quot;distributed system&quot;), &quot;. Services can be separated for various business, such as differing incentives or decision makers across teams (see also: &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../conways-law/&quot;
  }, &quot;Conway&apos;s Law&quot;), &quot;), and/or technical reasons, such as different data stores, release schedules, or traffic patterns.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Book Notes and Reviews]]></title><description><![CDATA[Notes, quotes, reviews, and summaries of books I've read]]></description><link>https://www.jamestharpe.com/books/</link><guid isPermaLink="false">https://www.jamestharpe.com/books/</guid><pubDate>Mon, 23 Nov 2020 14:12:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-23T14:12:11.000Z&quot;,
  &quot;description&quot;: &quot;Notes, quotes, reviews, and summaries of books I&apos;ve read&quot;,
  &quot;redirect_from&quot;: [&quot;/book/&quot;],
  &quot;tags&quot;: [],
  &quot;title&quot;: &quot;Book Notes and Reviews&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Books&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Command-line Interfaces (CLI)]]></title><description><![CDATA[Programs that take commands through terminals and shells]]></description><link>https://www.jamestharpe.com/cli/</link><guid isPermaLink="false">https://www.jamestharpe.com/cli/</guid><pubDate>Mon, 23 Nov 2020 14:12:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-23T14:12:11.000Z&quot;,
  &quot;description&quot;: &quot;Programs that take commands through terminals and shells&quot;,
  &quot;tags&quot;: [&quot;terminal&quot;, &quot;shell&quot;],
  &quot;title&quot;: &quot;Command-line Interfaces (CLI)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Command Line Interfaces (CLI)&quot;), mdx(&quot;p&quot;, null, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;command-line interfaces (CLI)&quot;), &quot; is an application that processes text-based commands, typically entered into a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../terminal/&quot;
  }, &quot;terminal&quot;), &quot; or executed via a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../shell/&quot;
  }, &quot;shell&quot;), &quot; script.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[jq]]></title><description><![CDATA[A portable CLI to slice, filter, and map JSON data]]></description><link>https://www.jamestharpe.com/jq/</link><guid isPermaLink="false">https://www.jamestharpe.com/jq/</guid><pubDate>Mon, 23 Nov 2020 14:03:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-23T14:03:11.000Z&quot;,
  &quot;description&quot;: &quot;A portable CLI to slice, filter, and map JSON data&quot;,
  &quot;tags&quot;: [&quot;cli&quot;],
  &quot;title&quot;: &quot;jq&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;jq&quot;), mdx(&quot;p&quot;, null, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://stedolan.github.io/jq/&quot;
  }, &quot;jq&quot;), &quot; can slice, filter, map, and transform structured &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://www.json.org/&quot;
  }, &quot;JSON&quot;), &quot; data similar to how &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://linux.die.net/man/1/sed&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;a&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;sed&quot;)), &quot;, &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://linux.die.net/man/1/awk&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;a&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;awk&quot;)), &quot;, &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://www.man7.org/linux/man-pages/man1/grep.1.html&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;a&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;grep&quot;)), &quot; is used for plain text.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Exercise Resources]]></title><description><![CDATA[Physical activity meant to improve and maintain physical health]]></description><link>https://www.jamestharpe.com/exercise/</link><guid isPermaLink="false">https://www.jamestharpe.com/exercise/</guid><pubDate>Tue, 17 Nov 2020 12:06:30 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-17T12:06:30.000Z&quot;,
  &quot;description&quot;: &quot;Physical activity meant to improve and maintain physical health&quot;,
  &quot;tags&quot;: [],
  &quot;title&quot;: &quot;Exercise Resources&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Exercise Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.cdc.gov/physicalactivity/basics/&quot;
  }, &quot;CDC Physical Activity Basics&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Git]]></title><description><![CDATA[A distributed version-control system to track changes, typically for software development projects]]></description><link>https://www.jamestharpe.com/git/</link><guid isPermaLink="false">https://www.jamestharpe.com/git/</guid><pubDate>Tue, 17 Nov 2020 11:54:30 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-17T11:54:30.000Z&quot;,
  &quot;description&quot;: &quot;A distributed version-control system to track changes, typically for software development projects&quot;,
  &quot;redirect_from&quot;: [&quot;/tools/git/&quot;, &quot;/linus-torvalds&quot;],
  &quot;tags&quot;: [&quot;cli&quot;, &quot;open-source-software&quot;, &quot;version-control&quot;],
  &quot;title&quot;: &quot;Git&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Git&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Git&quot;), &quot; is a free, &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../open-source-software/&quot;
  }, &quot;open-source&quot;), &quot; &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../distributed-systems/&quot;
  }, &quot;distributed&quot;), &quot; &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../version-control/&quot;
  }, &quot;version control&quot;), &quot; system created by Linus Torvalds in 2005 to replace BitKeeper as the version control system for the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../linux/&quot;
  }, &quot;Linux&quot;), &quot; kernel. Git is licensed under &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://opensource.org/licenses/gpl-2.0.php&quot;
  }, &quot;GPLv2&quot;), &quot; and the code is &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://github.com/git/git&quot;
  }, &quot;downloadable from GitHub&quot;), &quot;.&quot;), mdx(&quot;p&quot;, null, &quot;As with  many distributed systems, nearly all of actions in Git are additive. Even when you delete a file from a project, it still exists in Git&apos;s database - Git \&quot;adds\&quot; the fact that the file was deleted, rather than actually deleting the file, even though the file will be removed from the working directory.&quot;), mdx(&quot;h2&quot;, null, &quot;Git file states: Modified, staged, committed&quot;), mdx(&quot;p&quot;, null, &quot;Generally speaking, files tracked by a Git repository can be in one of three states:&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Modified&quot;), &quot;: The file in the working directory is different than the file in the repository.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Staged&quot;), &quot;: The file is in the staging area, but not yet committed to the repository.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Committed&quot;), &quot;: The file in the working directory matches the file in the repository.&quot;)), mdx(&quot;p&quot;, null, &quot;Files are modified simply by working on them and saving them to disk. Git will detect that the file in the working directory is different from the file in the repository. The &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;git add&quot;), &quot; command is used to copy a file to the staging area. The staging area exists to group related sets of changes together into a single commit. The &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;git commit&quot;), &quot; command copies the file to the Git repository.&quot;), mdx(&quot;h2&quot;, null, &quot;Terms Associated with Git&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Branch&quot;), &quot;: A copy of the code that diverges from the main line of development. Branches are used to do work without interfering with other lines of development. When you \&quot;check out\&quot; a branch, all the code in your \&quot;working directory\&quot; is replaced with the code from the branch. It&apos;s easy to switch back and forth between branches in git, so you don&apos;t have to worry about losing any work.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Check out&quot;), &quot;: When you switch from one branch to another.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Commit&quot;), &quot;: When you record a related set of changes in the repository.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Clone&quot;), &quot;: The creation of a copy of an existing Git repository. When you clone a repository, you don&apos;t just get the latest code - you get a full copy of virtually all of the data that the remote repository has, including every version of every file for the history of the project.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Fork&quot;), &quot;: Similar to a clone, a fork is a copy of a repository used as an upstream. You&apos;ll typically create a fork if you don&apos;t have permission to modify the original repository - instead, you create a \&quot;fork\&quot; of the repository so that you have permission to modify it. The fork can then be used to propose changes to the original repository (this is one of the \&quot;magical\&quot; features of Git that make it so great for open source).&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Origin&quot;), &quot;: An alias on your system for a particular remote repository that makes it easy to refer to. \&quot;Origin\&quot; is the default alias, created when you clone a repository.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Pull&quot;), &quot;: When you download changes from a remote repository to your local repository.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Push&quot;), &quot;: When you upload changes in your local git repository to a remote repository (usually the \&quot;origin\&quot;).&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Repository&quot;), &quot;: A Git database that contains the complete history of your code.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Tag&quot;), &quot;: The same as a branch, but essentially read-only.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Merge&quot;), &quot;: A strategy to integrate changes from one branch to another where two separate histories are \&quot;combined\&quot; via a special type of commit (called a merge commit).&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Rebase&quot;), &quot;: A strategy to integrating changes from one branch to another where the history of the target branch is changed so that it appears to have \&quot;started\&quot; from the most recent commit in the source branch.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Pull request&quot;), &quot; / &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;merge request&quot;), &quot;: Not actually part of Git! This is a feature of most git hosting platforms (GitHub, GitLab, BitBucket) where a merge is proposed and collaborated on.&quot;)), mdx(&quot;h2&quot;, null, &quot;Additional Resources for Git&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.git-scm.com/&quot;
  }, &quot;Official Git Website&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.git-scm.com/docs/gittutorial&quot;
  }, &quot;Git Tutorial&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://git-scm.com/book/en/v2&quot;
  }, &quot;Pro Git (Book)&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Bourne Again Shell (Bash)]]></title><description><![CDATA[A Unix shell]]></description><link>https://www.jamestharpe.com/bash/</link><guid isPermaLink="false">https://www.jamestharpe.com/bash/</guid><pubDate>Mon, 16 Nov 2020 14:15:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;title&quot;: &quot;Bourne Again Shell (Bash)&quot;,
  &quot;date&quot;: &quot;2020-11-16T14:15:11.000Z&quot;,
  &quot;tags&quot;: [&quot;shell&quot;, &quot;terminal&quot;],
  &quot;description&quot;: &quot;A Unix shell&quot;,
  &quot;redirect_from&quot;: [&quot;/languages/bash/&quot;]
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Bash&quot;), mdx(&quot;p&quot;, null, &quot;Bash is a Unix shell&quot;), mdx(&quot;h2&quot;, null, &quot;Bash Command Shortcuts&quot;), mdx(&quot;table&quot;, null, mdx(&quot;thead&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;thead&quot;
  }, mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Command&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Use&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Example&quot;))), mdx(&quot;tbody&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;history&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Show list of previous commands&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;history 5&quot;), &quot; will show last five commands executed&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;!123&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Execute command &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;123&quot;), &quot; from history&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;sudo !123&quot;), &quot; will execute command 123 from history with &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;sudo&quot;))), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;!!&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Execute previous command&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;sudo !!&quot;), &quot; will execute the last command with sudo&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;&amp;&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Run command in background&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;hugo serve &amp;&quot;), &quot; will run &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;hugo serve&quot;), &quot; in the background&quot;)))), mdx(&quot;h2&quot;, null, &quot;Bash Command Chains&quot;), mdx(&quot;table&quot;, null, mdx(&quot;thead&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;thead&quot;
  }, mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Operator&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Use&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Example&quot;))), mdx(&quot;tbody&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;;&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Chain commands, despite failure&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;mkdir a; mkdir b&quot;), &quot; will call &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;mkdir b&quot;), &quot; whether &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;mkdir a&quot;), &quot; succeeds or not&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;&amp;&amp;&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Chain commands, if successful&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;mkdir a &amp;&amp; mkdir b&quot;), &quot; will call &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;mkdir b&quot;), &quot; only if &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;mkdir a&quot;), &quot; succeeds&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, null, &quot;|&quot;, &quot;|&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Chain commands, if failure&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, null, &quot;mkdir a &quot;, &quot;|&quot;, &quot;|&quot;, &quot; mkdir b&quot;), &quot; will call &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;mkdir b&quot;), &quot; only if &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;mkdir a&quot;), &quot; fails&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, null, &quot;|&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Pass command output as input to next command&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, null, &quot;ps -ef &quot;, &quot;|&quot;, &quot; less&quot;), &quot; will use &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;less&quot;), &quot; to scroll through output of &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;pf -es&quot;))))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Shells]]></title><description><![CDATA[Shells process text based commands]]></description><link>https://www.jamestharpe.com/shell/</link><guid isPermaLink="false">https://www.jamestharpe.com/shell/</guid><pubDate>Mon, 16 Nov 2020 14:15:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-16T14:15:11.000Z&quot;,
  &quot;description&quot;: &quot;Shells process text based commands&quot;,
  &quot;redirect_from&quot;: [&quot;/languages/shell/&quot;],
  &quot;tags&quot;: [&quot;terminal&quot;],
  &quot;title&quot;: &quot;Shells&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Shells&quot;), mdx(&quot;p&quot;, null, &quot;Shells are text-based command processing applications, often used via a terminal.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Terminals]]></title><description><![CDATA[Terminals are text-based applications read and write to a shell]]></description><link>https://www.jamestharpe.com/terminal/</link><guid isPermaLink="false">https://www.jamestharpe.com/terminal/</guid><pubDate>Mon, 16 Nov 2020 14:15:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-16T14:15:11.000Z&quot;,
  &quot;description&quot;: &quot;Terminals are text-based applications read and write to a shell&quot;,
  &quot;redirect_from&quot;: [&quot;/terminal-shortcuts/&quot;, &quot;/tools/terminal/&quot;],
  &quot;tags&quot;: [&quot;shell&quot;],
  &quot;title&quot;: &quot;Terminals&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Terminals&quot;), mdx(&quot;p&quot;, null, &quot;Terminals are text-based applications read and write to a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../shell/&quot;
  }, &quot;shell&quot;), &quot;. A \&quot;shell\&quot; and a \&quot;terminal\&quot; may be the same application (such as &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../powershell/&quot;
  }, &quot;PowerShell&quot;), &quot;) or they may be different applications (such as &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://docs.microsoft.com/en-us/windows/terminal/&quot;
  }, &quot;Windows Terminal&quot;), &quot;).&quot;), mdx(&quot;h2&quot;, null, &quot;Common Terminal Shortcuts&quot;), mdx(&quot;table&quot;, null, mdx(&quot;thead&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;thead&quot;
  }, mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Shortcut&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Use&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Notes&quot;))), mdx(&quot;tbody&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;\u2B06&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Scroll up through previous commands&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  })), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;\u2B07&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Scroll down through previous commands&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  })), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;Ctrl&quot;), &quot;+&quot;, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;a&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Jump to beginning of line&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Works in most text editors&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;Ctrl&quot;), &quot;+&quot;, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;e&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Jump to end of line&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Works in most text editors&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;Ctrl&quot;), &quot;+&quot;, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;l&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Clear screen&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Similar to the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;clear&quot;), &quot; command&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;Ctrl&quot;), &quot;+&quot;, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;r&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Search &amp; execute previous command&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  })), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;Ctrl&quot;), &quot;+&quot;, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;u&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Delete everything to the left of the cursor&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Works in VS Code&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;Ctrl&quot;), &quot;+&quot;, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;k&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Delete everything to the right of the cursor&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Works in VS Code&quot;)))), mdx(&quot;h2&quot;, null, &quot;Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://github.com/0nn0/terminal-mac-cheatsheet&quot;
  }, &quot;Terminal Cheat Sheet for Mac&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.hanselman.com/blog/whats-the-difference-between-a-console-a-terminal-and-a-shell&quot;
  }, &quot;Difference Between a Console and a Terminal and a Shell by Scott Hanselman&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://twitter.com/b0rk&quot;
  }, &quot;Julia Evans&apos;s Twitter Feed&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[IntelliJ IDEA]]></title><description><![CDATA[IntelliJ IDEA IntelliJ IDEA  is a  Java  IDE, developed by  JetBrains .]]></description><link>https://www.jamestharpe.com/intellij/</link><guid isPermaLink="false">https://www.jamestharpe.com/intellij/</guid><pubDate>Mon, 16 Nov 2020 12:48:34 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-16T12:48:34.000Z&quot;,
  &quot;tags&quot;: [&quot;java&quot;],
  &quot;title&quot;: &quot;IntelliJ IDEA&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;IntelliJ IDEA&quot;), mdx(&quot;p&quot;, null, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://www.jetbrains.com/idea/&quot;
  }, &quot;IntelliJ IDEA&quot;), &quot; is a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../java/&quot;
  }, &quot;Java&quot;), &quot; IDE, developed by &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://www.jetbrains.com/&quot;
  }, &quot;JetBrains&quot;), &quot;.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Gradle Build Tool]]></title><description><![CDATA[Gradle Build Tool Gradle  is build automation tool that automates common software build steps like compile, test, package, deploy, and…]]></description><link>https://www.jamestharpe.com/gradle/</link><guid isPermaLink="false">https://www.jamestharpe.com/gradle/</guid><pubDate>Mon, 16 Nov 2020 12:45:34 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;tags&quot;: [],
  &quot;title&quot;: &quot;Gradle Build Tool&quot;,
  &quot;date&quot;: &quot;2020-11-16T12:45:34.000Z&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Gradle Build Tool&quot;), mdx(&quot;p&quot;, null, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://gradle.org/&quot;
  }, &quot;Gradle&quot;), &quot; is build automation tool that automates common software build steps like compile, test, package, deploy, and publish.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Test Driven Development (TDD)]]></title><description><![CDATA[Test Driven Development (TDD) TDD - Where did it all go wrong?]]></description><link>https://www.jamestharpe.com/test-driven-development/</link><guid isPermaLink="false">https://www.jamestharpe.com/test-driven-development/</guid><pubDate>Mon, 16 Nov 2020 12:07:45 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-16T12:07:45.000Z&quot;,
  &quot;tags&quot;: [&quot;unit-testing&quot;],
  &quot;title&quot;: &quot;Test Driven Development (TDD)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Test Driven Development (TDD)&quot;), mdx(&quot;h2&quot;, null, &quot;TDD - Where did it all go wrong?&quot;), mdx(&quot;iframe&quot;, {
    width: &quot;560&quot;,
    height: &quot;315&quot;,
    src: &quot;https://www.youtube.com/embed/EZ05e7EMOLM&quot;,
    frameBorder: &quot;0&quot;,
    allow: &quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot;,
    allowFullScreen: true
  }));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Java]]></title><description><![CDATA[A cross-platform, object-oriented programming language]]></description><link>https://www.jamestharpe.com/java/</link><guid isPermaLink="false">https://www.jamestharpe.com/java/</guid><pubDate>Mon, 16 Nov 2020 11:38:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-16T11:38:11.000Z&quot;,
  &quot;description&quot;: &quot;A cross-platform, object-oriented programming language&quot;,
  &quot;redirect_from&quot;: [&quot;/languages/java/&quot;],
  &quot;tags&quot;: [&quot;computer-languages&quot;],
  &quot;title&quot;: &quot;Java&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Java&quot;), mdx(&quot;p&quot;, null, &quot;Java is a general purpose, object-oriented &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../computer-languages/&quot;
  }, &quot;programming language&quot;), &quot;.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Spring Framework]]></title><description><![CDATA[Spring Framework Spring Framework  is an application framework and inversion of control container for  Java .]]></description><link>https://www.jamestharpe.com/spring-framework/</link><guid isPermaLink="false">https://www.jamestharpe.com/spring-framework/</guid><pubDate>Mon, 16 Nov 2020 00:59:18 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;title&quot;: &quot;Spring Framework&quot;,
  &quot;date&quot;: &quot;2020-11-16T00:59:18.000Z&quot;,
  &quot;tags&quot;: [&quot;java&quot;]
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Spring Framework&quot;), mdx(&quot;p&quot;, null, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://spring.io/projects/spring-framework&quot;
  }, &quot;Spring Framework&quot;), &quot; is an application framework and inversion of control container for &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../java/&quot;
  }, &quot;Java&quot;), &quot;.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Spring Boot]]></title><description><![CDATA[Spring Boot Spring Boot is an  open-source software  framework written in  Java  and used to develop REST services based on  Spring…]]></description><link>https://www.jamestharpe.com/spring-boot/</link><guid isPermaLink="false">https://www.jamestharpe.com/spring-boot/</guid><pubDate>Mon, 16 Nov 2020 00:57:18 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-16T00:57:18.000Z&quot;,
  &quot;tags&quot;: [&quot;java&quot;, &quot;spring-framework&quot;, &quot;open-source-software&quot;],
  &quot;title&quot;: &quot;Spring Boot&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Spring Boot&quot;), mdx(&quot;p&quot;, null, &quot;Spring Boot is an &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../open-source-software/&quot;
  }, &quot;open-source software&quot;), &quot; framework written in &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../java/&quot;
  }, &quot;Java&quot;), &quot; and used to develop REST services based on &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../spring-framework/&quot;
  }, &quot;Spring Framework&quot;), &quot;.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[PAL Tracker (Example Java Application)]]></title><description><![CDATA[An example application to demonstrate application deployment and management strategies in Java, Spring Boot, and Cloud Foundry]]></description><link>https://www.jamestharpe.com/pal-tracker/</link><guid isPermaLink="false">https://www.jamestharpe.com/pal-tracker/</guid><pubDate>Mon, 16 Nov 2020 00:53:18 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-16T00:53:18.000Z&quot;,
  &quot;description&quot;: &quot;An example application to demonstrate application deployment and management strategies in Java, Spring Boot, and Cloud Foundry&quot;,
  &quot;redirect_from&quot;: [&quot;/projects/pal-tracker/&quot;],
  &quot;tags&quot;: [&quot;cloud-foundry&quot;, &quot;gradle&quot;, &quot;java&quot;, &quot;spring-boot&quot;],
  &quot;title&quot;: &quot;PAL Tracker (Example Java Application)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;PAL Tracker&quot;), mdx(&quot;p&quot;, null, &quot;PAL Tracker is an example app used to show basic application management and deployment strategies in &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../cloud-foundry/&quot;
  }, &quot;Cloud Foundry&quot;), &quot; with &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../java/&quot;
  }, &quot;Java&quot;), &quot;. &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://github.com/jamestharpe/pal-tracker&quot;
  }, &quot;PAL Tracker code&quot;), &quot; is available on my GitHub.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[AWS Command Line Interface (CLI)]]></title><description><![CDATA[The AWS CLI is a tool to manage AWS services via command line]]></description><link>https://www.jamestharpe.com/aws-cli/</link><guid isPermaLink="false">https://www.jamestharpe.com/aws-cli/</guid><pubDate>Mon, 16 Nov 2020 00:17:30 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-16T00:17:30.000Z&quot;,
  &quot;description&quot;: &quot;The AWS CLI is a tool to manage AWS services via command line&quot;,
  &quot;redirect_from&quot;: [&quot;/tools/aws-cli/&quot;],
  &quot;tags&quot;: [&quot;aws&quot;],
  &quot;title&quot;: &quot;AWS Command Line Interface (CLI)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;AWS Command Line Interface&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[AWS DynamoDB]]></title><description><![CDATA[AWS DynamoDB is a 'NoSQL' key-value and document database]]></description><link>https://www.jamestharpe.com/aws-dynamodb/</link><guid isPermaLink="false">https://www.jamestharpe.com/aws-dynamodb/</guid><pubDate>Mon, 16 Nov 2020 00:14:30 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-16T00:14:30.000Z&quot;,
  &quot;description&quot;: &quot;AWS DynamoDB is a &apos;NoSQL&apos; key-value and document database&quot;,
  &quot;redirect_from&quot;: [&quot;/tools/dynamodb/&quot;],
  &quot;tags&quot;: [&quot;aws&quot;, &quot;databases&quot;],
  &quot;title&quot;: &quot;AWS DynamoDB&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;AWS DynamoDB&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[AWS CloudFormation]]></title><description><![CDATA[AWS CloudFormation is a service to model AWS infrastructure as code]]></description><link>https://www.jamestharpe.com/aws-cloudformation/</link><guid isPermaLink="false">https://www.jamestharpe.com/aws-cloudformation/</guid><pubDate>Mon, 16 Nov 2020 00:13:30 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-16T00:13:30.000Z&quot;,
  &quot;description&quot;: &quot;AWS CloudFormation is a service to model AWS infrastructure as code&quot;,
  &quot;redirect_from&quot;: [&quot;/tools/cloudformation/&quot;],
  &quot;tags&quot;: [&quot;aws&quot;, &quot;infrastructure-as-code&quot;],
  &quot;title&quot;: &quot;AWS CloudFormation&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;AWS CloudFormation&quot;), mdx(&quot;h2&quot;, null, &quot;Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://templates.cloudonaut.io/&quot;
  }, &quot;CloudFormation templates from Cloudonaut&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Git Aliases]]></title><description><![CDATA[Command-line shortcuts for Git]]></description><link>https://www.jamestharpe.com/git-aliases/</link><guid isPermaLink="false">https://www.jamestharpe.com/git-aliases/</guid><pubDate>Mon, 16 Nov 2020 00:04:30 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-16T00:04:30.000Z&quot;,
  &quot;description&quot;: &quot;Command-line shortcuts for Git&quot;,
  &quot;redirect_from&quot;: [&quot;/useful-git-aliases/&quot;],
  &quot;tags&quot;: [&quot;git&quot;, &quot;shell&quot;],
  &quot;title&quot;: &quot;Git Aliases&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Useful Git Aliases for Productivity&quot;), mdx(&quot;p&quot;, null, &quot;A recent addition to my &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../automated-developer-environment/&quot;
  }, &quot;Automatic Development Environment Setup&quot;), &quot; script were several Git aliases that help to speed up development. Here is how and why I set them up.&quot;), mdx(&quot;h2&quot;, null, &quot;Start the Day with &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;h2&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;git pom&quot;)), mdx(&quot;p&quot;, null, &quot;The first step in most developer workflows is to run &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;git pull origin main&quot;), &quot; to ensure your local work is current with the main line of development. Shave a few seconds off this routine step by shortening the command to &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;git pom&quot;), &quot;:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, &quot;$ &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;git&quot;), &quot; config --global alias.pom &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&apos;pull origin main&apos;&quot;), &quot;\n\n$ &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;git&quot;), &quot; pom\nremote: Counting objects: &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;5&quot;), &quot;, done.\nremote: Total &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;5&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;delta &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;, reused &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;2&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;delta &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;, pack-reused &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;3&quot;), &quot;\nUnpacking objects: &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;100&quot;), &quot;% &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;5&quot;), &quot;/5&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;, done.\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;..&quot;), &quot;.&quot;))), mdx(&quot;h2&quot;, null, &quot;Get Caught Up with &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;h2&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;git ls&quot;)), mdx(&quot;p&quot;, null, &quot;Once you&apos;ve pulled the latest from &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;main&quot;), &quot;, it can be helpful to see what&apos;s changed in the repository. Configuring an alias for &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;git ls&quot;), &quot; can simplify common but verbose calls to &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;git log ...&quot;), &quot;:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, &quot;$ &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;git&quot;), &quot; config --global alias.ls &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;log --pretty=format:&apos;%C(yellow)%h %ad%Cred%d %Creset%s%Cblue [%cn]&apos; --decorate --date=short\&quot;&quot;), &quot;\n\n$ &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;git&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;ls&quot;), &quot;\n48f3317 &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;2018&quot;), &quot;-04-28 &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;HEAD -&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;&gt;&quot;), &quot; main&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; Starts useful &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;git&quot;), &quot; aliases article &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;[&quot;), &quot;James Tharpe&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;]&quot;), &quot;\n44b55a0 &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;2018&quot;), &quot;-04-01 &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;origin/main, origin/HEAD&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; Started CLI/TypeScript article &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;[&quot;), &quot;James Tharpe&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;]&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;3748172&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;2017&quot;), &quot;-12-22 Publishes serverless-aws-backend &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;[&quot;), &quot;James Tharpe&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;]&quot;), &quot;\n5d51a2e &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;2017&quot;), &quot;-12-22 Completes serverless-aws-backend.md &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;[&quot;), &quot;James Tharpe&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;]&quot;), &quot;\ncd058e2 &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;2017&quot;), &quot;-12-17 WIP: Form2Email &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;[&quot;), &quot;James Tharpe&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;]&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;..&quot;), &quot;.\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;:&quot;)))), mdx(&quot;p&quot;, null, &quot;(just type &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;q&quot;), &quot; to quit)&quot;), mdx(&quot;h2&quot;, null, &quot;Pick Up Where You Left Off With &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;h2&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;git last&quot;)), mdx(&quot;p&quot;, null, &quot;If you&apos;re absent-minded like I am then an interruption can cause you to forget what you just committed. Rather than using &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;git ls&quot;), &quot; to check the logs, &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;git last&quot;), &quot; can be useful to quickly see only the most recent commit.&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, &quot;$ &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;git&quot;), &quot; config --global alias.last &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&apos;log -1 HEAD&apos;&quot;), &quot;\n\n$ &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;git&quot;), &quot; last\ncommit 48f3317298e16046c4934b6ea6d37fa4bc0ca1c1 &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;HEAD -&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;&gt;&quot;), &quot; main&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;\nAuthor: James Tharpe &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;&lt;&quot;), &quot;jimmy.tharpe@gmail.com&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;&gt;&quot;), &quot;\nDate:   Sat Apr &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;28&quot;), &quot; 08:19:33 &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;2018&quot;), &quot; -0400\n\n    Starts useful &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;git&quot;), &quot; aliases article&quot;))), mdx(&quot;h2&quot;, null, &quot;Prepare for the Daily Standup with &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;h2&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;git standup&quot;)), mdx(&quot;p&quot;, null, &quot;A quick way to remember what you were working on recently for your team&apos;s daily standup is to view the Git log since yesterday. A nice alias for this is &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;git standup&quot;), &quot;:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, &quot;$ &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;git&quot;), &quot; config --global alias.standup &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;log --since yesterday --author &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;git&quot;), &quot; config user.email&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;)&quot;)), &quot; --pretty=short\&quot;&quot;), &quot;\n\n$ &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;git&quot;), &quot; standup\ncommit 0d686aeef569e6762abab8e16cd2118a791be600 &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;HEAD -&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;&gt;&quot;), &quot; main&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;\nAuthor: James Tharpe &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;&lt;&quot;), &quot;jimmy.tharpe@gmail.com&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;&gt;&quot;), &quot;\n\n    Outlines &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;git&quot;), &quot; aliases article\n\ncommit 6ded0e6b249b28984127f1221a713f69b74830e5\nAuthor: James Tharpe &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;&lt;&quot;), &quot;jimmy.tharpe@gmail.com&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;&gt;&quot;), &quot;\n\n    Starts useful &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;git&quot;), &quot; aliases article&quot;))), mdx(&quot;h2&quot;, null, &quot;Get &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;h2&quot;
  }, &quot;Everything&quot;), &quot; with &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;h2&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;git everything&quot;)), mdx(&quot;p&quot;, null, &quot;Working with Git submodules can be prone to error, since submodules don&apos;t update like the rest of your codebase does when you run &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;git pom&quot;), &quot; or similar commands. To avoid forgetting to update or initialize submodules in your repository, configure &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;git everything&quot;), &quot;:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, &quot;$ &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;git&quot;), &quot; config --global alias.everything &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;! git pull &amp;&amp; git submodule update --init --recursive\&quot;&quot;), &quot;\n\n$ &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;git&quot;), &quot; everything\nremote: Counting objects: &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;8&quot;), &quot;, done.\nremote: Compressing objects: &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;100&quot;), &quot;% &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;3&quot;), &quot;/3&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;, done.\nremote: Total &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;8&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;delta &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;5&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;, reused &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;8&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;delta &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;5&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;, pack-reused &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;0&quot;), &quot;\nUnpacking objects: &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;100&quot;), &quot;% &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;8&quot;), &quot;/8&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;, done.\nFrom github.com:jamestharpe/jamestharpe.com\n   44b55a0&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;..&quot;), &quot;0d686ae  main     -&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;&gt;&quot;), &quot; origin/main\nUpdating 44b55a0&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;..&quot;), &quot;0d686ae\nFast-forward\n content/useful-git-aliases.md &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;63&quot;), &quot; +++++++++++++++++++++++++++++++++++++++++++\n themes/minimal                &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot;  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;2&quot;), &quot; +-\n &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;2&quot;), &quot; files changed, &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;64&quot;), &quot; insertions&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;+&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;, &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;1&quot;), &quot; deletion&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;-&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;\n create mode &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;100644&quot;), &quot; content/useful-git-aliases.md\nSubmodule &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&apos;themes/minimal&apos;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;git@github.com:calintat/minimal.git&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; registered &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;for&quot;), &quot; path &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&apos;themes/minimal&apos;&quot;), &quot;\nCloning into &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&apos;C:/Users/james/code/me/temp/jamestharpe.com/themes/minimal&apos;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;..&quot;), &quot;.\nSubmodule path &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&apos;themes/minimal&apos;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;:&quot;), &quot; checked out &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&apos;2ac9acc008de52f61cc79fe2f93e61ba62e17d3b&apos;&quot;)))), mdx(&quot;h2&quot;, null, &quot;Prune Branches Merged with &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;h2&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;main&quot;), &quot; with &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;h2&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;git branch-clean&quot;)), mdx(&quot;p&quot;, null, &quot;Branches help keep track of incomplete or undelivered work, but once the work is complete we sometimes forget to remove the branches we no longer need. To clean up branches that are already merged with main in one swoop, configure &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;git branch-clean&quot;), &quot;:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, &quot;$ &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;git&quot;), &quot; config --global alias.branch-clean &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;! git branch --merged main | grep -v &apos;^[ *]*main$&apos; | xargs git branch -d\&quot;&quot;), &quot;\n\n$ &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;git&quot;), &quot; branch-clean\nDeleted branch article/useful-git-aliases &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;was da41448&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;.\nDeleted branch article/hire-me &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;was 23841b8&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;.&quot;))), mdx(&quot;h2&quot;, null, &quot;Remember Git Aliases with Yet Another Alias&quot;), mdx(&quot;p&quot;, null, &quot;So you&apos;ve setup all these aliases but can&apos;t remember them. One more alias to help remember all your aliases:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, &quot;$ &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;git&quot;), &quot; config --global alias.aliases &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;config --get-regexp alias\&quot;&quot;), &quot;\n\n$ &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;git&quot;), &quot; aliases\nalias.pom pull origin main\nalias.last log -1 HEAD\nalias.ls log --pretty&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot;format:&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&apos;%C(yellow)%h %ad%Cred%d %Creset%s%Cblue [%cn]&apos;&quot;), &quot; --decorate --date&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot;short\nalias.amend commit -a --amend\nalias.standup log --since yesterday --author jimmy.tharpe@gmail.com --pretty&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot;short\nalias.everything &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;!&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;git&quot;), &quot; pull &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;&amp;&amp;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;git&quot;), &quot; submodule update --init --recursive\nalias.aliases config --get-regexp &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;alias&quot;)))), mdx(&quot;h2&quot;, null, &quot;Learn More About Git Aliases&quot;), mdx(&quot;p&quot;, null, &quot;Check out the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://git-scm.com/book/en/v2/Git-Basics-Git-Aliases&quot;
  }, &quot;Git Basics - Git Aliases&quot;), &quot; chapter of Pro Git to learn more about Git aliases.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Git Bash]]></title><description><![CDATA[A Bash emulator and terminal for Windows]]></description><link>https://www.jamestharpe.com/git-bash/</link><guid isPermaLink="false">https://www.jamestharpe.com/git-bash/</guid><pubDate>Mon, 16 Nov 2020 00:04:30 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-16T00:04:30.000Z&quot;,
  &quot;description&quot;: &quot;A Bash emulator and terminal for Windows&quot;,
  &quot;tags&quot;: [&quot;bash&quot;, &quot;git&quot;, &quot;shell&quot;, &quot;terminal&quot;],
  &quot;title&quot;: &quot;Git Bash&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Git Bash&quot;), mdx(&quot;p&quot;, null, &quot;Git Bash is a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../bash/&quot;
  }, &quot;Bash&quot;), &quot; emulator and terminal for Windows that includes common Unix utilities. It is packaged with &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://git-scm.com/download/win&quot;
  }, &quot;Git for Windows&quot;), &quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://gist.github.com/tuxfight3r/60051ac67c5f0445efee&quot;
  }, &quot;Git Bash Shortcuts for Windows&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Database as Code]]></title><description><![CDATA[A technique to version-control and automate the deployment of database schemas]]></description><link>https://www.jamestharpe.com/database-as-code/</link><guid isPermaLink="false">https://www.jamestharpe.com/database-as-code/</guid><pubDate>Sun, 15 Nov 2020 23:41:30 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-15T23:41:30.000Z&quot;,
  &quot;description&quot;: &quot;A technique to version-control and automate the deployment of database schemas&quot;,
  &quot;redirect_from&quot;: [&quot;/techniques/database-as-code/&quot;],
  &quot;tags&quot;: [&quot;infrastructure-as-code&quot;, &quot;databases&quot;],
  &quot;title&quot;: &quot;Database as Code&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Database as Code&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Docker]]></title><description><![CDATA[A set of tools to build and run containers]]></description><link>https://www.jamestharpe.com/docker/</link><guid isPermaLink="false">https://www.jamestharpe.com/docker/</guid><pubDate>Sun, 15 Nov 2020 23:41:30 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-15T23:41:30.000Z&quot;,
  &quot;description&quot;: &quot;A set of tools to build and run containers&quot;,
  &quot;redirect_from&quot;: [&quot;/languages/dockerfile/&quot;, &quot;/tools/docker/&quot;],
  &quot;tags&quot;: [&quot;containers&quot;],
  &quot;title&quot;: &quot;Docker&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Docker&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Docker&quot;), &quot; is a tool that makes it easy to build, run, share, and manage &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../containers/&quot;
  }, &quot;containers&quot;), &quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;Docker News and Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.docker.com/&quot;
  }, &quot;Official Docker Website&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UC76AVf2JkrwjxNKMuPpscHQ&quot;
  }, &quot;Docker YouTube Channel&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.docker.com/101-tutorial&quot;
  }, &quot;Docker 101 Tutorial&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Flyway]]></title><description><![CDATA[Flyway: A tool to version control database schemas in plain SQL]]></description><link>https://www.jamestharpe.com/flyway/</link><guid isPermaLink="false">https://www.jamestharpe.com/flyway/</guid><pubDate>Sun, 15 Nov 2020 23:41:30 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-15T23:41:30.000Z&quot;,
  &quot;description&quot;: &quot;Flyway: A tool to version control database schemas in plain SQL&quot;,
  &quot;tags&quot;: [&quot;database-as-code&quot;],
  &quot;title&quot;: &quot;Flyway&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Flyway&quot;), mdx(&quot;p&quot;, null, &quot;Flyway is a tool to help &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../database-as-code/&quot;
  }, &quot;version database schemas&quot;), &quot; with plain SQL.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Cloud Foundry]]></title><description><![CDATA[Could Foundry: An open-source, on-premise cloud platform for enterprise IT organizations]]></description><link>https://www.jamestharpe.com/cloud-foundry/</link><guid isPermaLink="false">https://www.jamestharpe.com/cloud-foundry/</guid><pubDate>Sun, 15 Nov 2020 23:39:30 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-15T23:39:30.000Z&quot;,
  &quot;description&quot;: &quot;Could Foundry: An open-source, on-premise cloud platform for enterprise IT organizations&quot;,
  &quot;tags&quot;: [&quot;open-source-software&quot;, &quot;cloud-platforms&quot;],
  &quot;title&quot;: &quot;Cloud Foundry&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Cloud Foundry&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Cloud Foundry&quot;), &quot; is an &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../open-source/&quot;
  }, &quot;open-source&quot;), &quot;, on-premise &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../cloud-platforms/&quot;
  }, &quot;cloud-platform&quot;), &quot; for enterprise IT organizations.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[MySQL]]></title><description><![CDATA[MySQL: An open-source relational database management system (RDBMS)]]></description><link>https://www.jamestharpe.com/mysql/</link><guid isPermaLink="false">https://www.jamestharpe.com/mysql/</guid><pubDate>Sun, 15 Nov 2020 23:34:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-15T23:34:11.000Z&quot;,
  &quot;description&quot;: &quot;MySQL: An open-source relational database management system (RDBMS)&quot;,
  &quot;redirect_from&quot;: [&quot;/languages/sql/&quot;],
  &quot;tags&quot;: [&quot;relational-databases&quot;, &quot;open-source-software&quot;],
  &quot;title&quot;: &quot;MySQL&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;MySQL&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Amazon Web Services (AWS)]]></title><description><![CDATA[The hosted cloud platform provided by Amazon]]></description><link>https://www.jamestharpe.com/aws/</link><guid isPermaLink="false">https://www.jamestharpe.com/aws/</guid><pubDate>Sun, 15 Nov 2020 23:22:30 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-15T23:22:30.000Z&quot;,
  &quot;description&quot;: &quot;The hosted cloud platform provided by Amazon&quot;,
  &quot;tags&quot;: [&quot;cloud-platforms&quot;],
  &quot;title&quot;: &quot;Amazon Web Services (AWS)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Amazon Web Services (AWS)&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Amazon Web Services (AWS)&quot;), &quot; is a hosted &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../cloud-platforms/&quot;
  }, &quot;cloud platform&quot;), &quot;, provided by Amazon.&quot;), mdx(&quot;h2&quot;, null, &quot;AWS Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCd6MoB9NC6uYN2grvUNT-Zg&quot;
  }, &quot;Amazon Web Services YouTube Channel&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://aws.amazon.com/&quot;
  }, &quot;AWS Home Page&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCT-nPlVzJI-ccQXlxjSvJmw&quot;
  }, &quot;AWS Online Tech Talks YouTube Channel&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UClLLJjpSWRRa1BosQrNVDjA&quot;
  }, &quot;AWS Tutorial Series&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCYO_jab_esuFRV4b17AJtAw&quot;
  }, &quot;SaM the CloudGuy&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://cloudonaut.io/diy-aws-security-review/&quot;
  }, &quot;DIY AWS Security Review&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Microsoft Azure]]></title><description><![CDATA[The hosted cloud platform provided by Microsoft]]></description><link>https://www.jamestharpe.com/azure/</link><guid isPermaLink="false">https://www.jamestharpe.com/azure/</guid><pubDate>Sun, 15 Nov 2020 23:22:30 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-15T23:22:30.000Z&quot;,
  &quot;description&quot;: &quot;The hosted cloud platform provided by Microsoft&quot;,
  &quot;tags&quot;: [&quot;cloud-platforms&quot;],
  &quot;title&quot;: &quot;Microsoft Azure&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Microsoft Azure&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Microsoft Azure&quot;), &quot; is a hosted &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../cloud-platforms/&quot;
  }, &quot;cloud platform&quot;), &quot;, provided by Microsoft.&quot;), mdx(&quot;h2&quot;, null, &quot;Azure Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://azure.microsoft.com/&quot;
  }, &quot;Microsoft Azure Official Homepage&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Computer Languages]]></title><description><![CDATA[Computer Languages: How humans tell computers what to do]]></description><link>https://www.jamestharpe.com/computer-languages/</link><guid isPermaLink="false">https://www.jamestharpe.com/computer-languages/</guid><pubDate>Sun, 15 Nov 2020 22:31:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-15T22:31:11.000Z&quot;,
  &quot;description&quot;: &quot;Computer Languages: How humans tell computers what to do&quot;,
  &quot;tags&quot;: [&quot;software-engineering&quot;],
  &quot;title&quot;: &quot;Computer Languages&quot;,
  &quot;redirect_from&quot;: [&quot;/languages/&quot;, &quot;/languages/page/2/&quot;, &quot;/computer-language/&quot;]
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Computer Languages&quot;), mdx(&quot;p&quot;, null, &quot;Computer Languages are languages used by humans to tell computers what to do. There are multiple types of computer languages, but for purposes of organization I don&apos;t currently distinguish between them.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Package Managers]]></title><description><![CDATA[Package Managers: Apps that manage your apps]]></description><link>https://www.jamestharpe.com/package-managers/</link><guid isPermaLink="false">https://www.jamestharpe.com/package-managers/</guid><pubDate>Sun, 15 Nov 2020 22:27:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;title&quot;: &quot;Package Managers&quot;,
  &quot;date&quot;: &quot;2020-11-15T22:27:11.000Z&quot;,
  &quot;tags&quot;: [],
  &quot;redirect_from&quot;: [&quot;/package-manager/&quot;],
  &quot;description&quot;: &quot;Package Managers: Apps that manage your apps&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Package Managers&quot;), mdx(&quot;p&quot;, null, &quot;A package manager is a software tool that automates the installation, upgrading, and un-installation of software or application dependencies.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Markdown]]></title><description><![CDATA[Knowledge about Markdown]]></description><link>https://www.jamestharpe.com/markdown/</link><guid isPermaLink="false">https://www.jamestharpe.com/markdown/</guid><pubDate>Sun, 15 Nov 2020 22:18:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-15T22:18:11.000Z&quot;,
  &quot;description&quot;: &quot;Knowledge about Markdown&quot;,
  &quot;redirect_from&quot;: [&quot;/languages/markdown/&quot;],
  &quot;tags&quot;: [&quot;computer-languages&quot;],
  &quot;title&quot;: &quot;Markdown&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Markdown&quot;), mdx(&quot;p&quot;, null, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://www.markdownguide.org/&quot;
  }, &quot;Markdown&quot;), &quot; is a simple language for writing rich-text documents using plain text.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Chocolatey (Windows Package Manager)]]></title><description><![CDATA[A package manager for managing software on Windows]]></description><link>https://www.jamestharpe.com/chocolatey/</link><guid isPermaLink="false">https://www.jamestharpe.com/chocolatey/</guid><pubDate>Sun, 15 Nov 2020 21:20:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-15T21:20:11.000Z&quot;,
  &quot;description&quot;: &quot;A package manager for managing software on Windows&quot;,
  &quot;redirect_from&quot;: [&quot;/tools/chocolatey/&quot;],
  &quot;tags&quot;: [&quot;package-managers&quot;],
  &quot;title&quot;: &quot;Chocolatey (Windows Package Manager)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Chocolatey&quot;), mdx(&quot;p&quot;, null, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://chocolatey.org/&quot;
  }, &quot;Chocolatey&quot;), &quot; is a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../package-managers/&quot;
  }, &quot;package manager&quot;), &quot; for Windows, similar to &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://brew.sh/&quot;
  }, &quot;Homebrew&quot;), &quot; for Mac.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[PowerShell]]></title><description><![CDATA[PowerShell: A command-line shell and scripting language]]></description><link>https://www.jamestharpe.com/powershell/</link><guid isPermaLink="false">https://www.jamestharpe.com/powershell/</guid><pubDate>Sun, 15 Nov 2020 21:20:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-15T21:20:11.000Z&quot;,
  &quot;description&quot;: &quot;PowerShell: A command-line shell and scripting language&quot;,
  &quot;redirect_from&quot;: [&quot;/languages/powershell/&quot;],
  &quot;tags&quot;: [&quot;computer-languages&quot;, &quot;terminal&quot;, &quot;shell&quot;],
  &quot;title&quot;: &quot;PowerShell&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;PowerShell&quot;), mdx(&quot;p&quot;, null, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://github.com/powershell/powershell&quot;
  }, &quot;PowerShell&quot;), &quot; is a cross-platform command-line &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../shell/&quot;
  }, &quot;shell&quot;), &quot; and &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../computer-languages/&quot;
  }, &quot;scripting language&quot;), &quot;.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[TypeScript]]></title><description><![CDATA[TypeScript: A programming language that adds optional static typing to JavaScript]]></description><link>https://www.jamestharpe.com/typescript/</link><guid isPermaLink="false">https://www.jamestharpe.com/typescript/</guid><pubDate>Sun, 15 Nov 2020 21:20:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-11-15T21:20:11.000Z&quot;,
  &quot;description&quot;: &quot;TypeScript: A programming language that adds optional static typing to JavaScript&quot;,
  &quot;tags&quot;: [&quot;computer-languages&quot;, &quot;javascript&quot;, &quot;open-source-languages&quot;],
  &quot;title&quot;: &quot;TypeScript&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;TypeScript&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;TypeScript&quot;), &quot; is an &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../open-source-languages/&quot;
  }, &quot;open-source programming language&quot;), &quot; that extends &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../javascript/&quot;
  }, &quot;JavaScript&quot;), &quot; to add optional static type definitions.&quot;), mdx(&quot;h2&quot;, null, &quot;TypeScript resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.typescriptlang.org/&quot;
  }, &quot;Official TypeScript website&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[TypeScript: Extend the Window (globalThis) Object]]></title><description><![CDATA[Add custom properties to the Window interface with TypeScript]]></description><link>https://www.jamestharpe.com/typescript-extend-window/</link><guid isPermaLink="false">https://www.jamestharpe.com/typescript-extend-window/</guid><pubDate>Sun, 15 Nov 2020 18:37:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;title&quot;: &quot;TypeScript: Extend the Window (globalThis) Object&quot;,
  &quot;date&quot;: &quot;2020-11-15T18:37:11.000Z&quot;,
  &quot;tags&quot;: [&quot;typescript&quot;, &quot;web-dev&quot;],
  &quot;description&quot;: &quot;Add custom properties to the Window interface with TypeScript&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Example: Add a Property to the Window type in TypeScript&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;typescript&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-typescript&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-typescript&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// &lt;any-name&gt;.d.ts&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;export&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;declare&quot;), &quot; global &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;interface&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Window&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\tsomeProperty&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; SomeType&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;)))), mdx(&quot;h2&quot;, null, &quot;Explanation&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;typescript&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-typescript&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-typescript&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// &lt;any-name&gt;.d.ts&quot;)))), mdx(&quot;p&quot;, null, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html&quot;
  }, &quot;Declaration files&quot;), &quot; (files ending with &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;.d.ts&quot;), &quot;) are used to declare types for code unavailable to the TypeScript compiler.&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;typescript&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-typescript&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-typescript&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;export&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;declare&quot;), &quot; global &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// ...&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;)))), mdx(&quot;p&quot;, null, &quot;Declaration files use &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import&quot;
  }, &quot;ES Modules&quot;), &quot; syntax. ES Modules require at least one export statement; therefore &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;global&quot;), &quot; is exported. Alternatively, &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;{ }&quot;), &quot; (nothing) could be explicitly exported to satisfy the compiler. This is only necessary if there are no other exports.&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;Window&quot;), &quot; interface is global, therefore changes to that interface need to be within the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;global&quot;), &quot; scope.&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;typescript&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-typescript&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-typescript&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;declare&quot;), &quot; global &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;interface&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Window&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\tsomeProperty&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; SomeType&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;)))), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;Window&quot;), &quot; interface is extended through &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://www.typescriptlang.org/docs/handbook/declaration-merging.html&quot;
  }, &quot;declaration merging&quot;), &quot;.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Go]]></title><description><![CDATA[An open-source, statically typed, compiled programming language]]></description><link>https://www.jamestharpe.com/golang/</link><guid isPermaLink="false">https://www.jamestharpe.com/golang/</guid><pubDate>Wed, 19 Aug 2020 20:02:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-08-19T20:02:11.000Z&quot;,
  &quot;description&quot;: &quot;An open-source, statically typed, compiled programming language&quot;,
  &quot;tags&quot;: [&quot;computer-languages&quot;, &quot;open-source-languages&quot;],
  &quot;title&quot;: &quot;Go&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Go&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Go&quot;), &quot; is an &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../open-source-languages/&quot;
  }, &quot;open-source programming language&quot;), &quot; with memory safety, structural typing, type safety, type inference, built-in package management (&quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;go get&quot;), &quot;), and built-in concurrency primitives. Programs compiled with Go do not have external dependencies by default.&quot;), mdx(&quot;p&quot;, null, &quot;In Go, a &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;package&quot;), &quot; is a collection of source files in the same directory. Functions, types, variables, etc, in a source file are visible to &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;all&quot;), &quot; other source files in the same package. Package members that start with an uppercase letter are exported by that package.&quot;), mdx(&quot;p&quot;, null, &quot;A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;module&quot;), &quot; is a collection of related packages. Modules are defined in &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;go.mod&quot;), &quot; at the repository root. A repository typically contains a single module, but may contain multiple modules.&quot;), mdx(&quot;p&quot;, null, &quot;To initialize a new module, run &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;go mod init&quot;), &quot;. To build the module and copy the binary to the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;$GOPATH/bin&quot;), &quot;, run &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;go install&quot;), &quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://golang.org/&quot;
  }, &quot;Official Go website&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[The Goal: A Business Graphic Novel by Eliyahu Goldratt]]></title><description><![CDATA[A business graphic novel to introduce the theory of constraints]]></description><link>https://www.jamestharpe.com/the-goal-graphic-novel/</link><guid isPermaLink="false">https://www.jamestharpe.com/the-goal-graphic-novel/</guid><pubDate>Sat, 06 Jun 2020 13:40:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-06-06T13:40:11.000Z&quot;,
  &quot;description&quot;: &quot;A business graphic novel to introduce the theory of constraints&quot;,
  &quot;redirect_from&quot;: [&quot;/book-goal-business-graphic-novel/&quot;],
  &quot;tags&quot;: [&quot;books&quot;, &quot;business-operations&quot;],
  &quot;title&quot;: &quot;The Goal: A Business Graphic Novel by Eliyahu Goldratt&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;The Goal: A Business Graphic Novel&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;The Goal: A Business Graphic Novel&quot;), &quot; is an adaptation of the book &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;The Goal: A Process of Ongoing Improvement&quot;), &quot; by Dwight Jon Zimmerman and Dean Motter.&quot;), mdx(&quot;h2&quot;, null, &quot;Key Lessons from The Goal&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;The Goal is to make money&quot;), &quot; (this is a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../business/&quot;
  }, &quot;business&quot;), &quot; book, after all). To remain competitive, businesses must continuously and systematically improve their operations. The theory of constraints provides a model to continuously identify and improve systems as they relate to The Goal.&quot;), mdx(&quot;p&quot;, null, &quot;The theory of constraints defines a model of how cash flows through a system:&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Throughput&quot;), &quot; is the rate at which a system generates money through sales.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Inventory&quot;), &quot; is all of the money a system has invested in purchasing things it intends to sell but hasn&apos;t sold; this includes anything from raw materials to finished products.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Operational expenses&quot;), &quot; are all of the money a system spends in order to convert &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;li&quot;
  }, &quot;inventory&quot;), &quot; to &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;li&quot;
  }, &quot;throughput&quot;), &quot;.&quot;)), mdx(&quot;p&quot;, null, &quot;In short: Throughput is money in, inventory is money out, and operational expenses are money that is \&quot;stuck\&quot; in the system.&quot;), mdx(&quot;p&quot;, null, &quot;The process of converting inventory to throughput is &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;constrained&quot;), &quot; by one or more bottlenecks. A &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;bottleneck&quot;), &quot; is a resource with less capacity than the demand placed upon it. Bottlenecks aren&apos;t good or bad, they&apos;re reality.&quot;), mdx(&quot;p&quot;, null, &quot;\&quot;The Goal\&quot; (to make money) therefore translates to &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;increasing throughput while reducing inventory and operational expenses simultaneously&quot;), &quot;.  Numbers not based on the constraints of the system are meaningless; &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;producing&quot;), &quot; work and &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;profiting&quot;), &quot; from it are two very different things.&quot;), mdx(&quot;p&quot;, null, &quot;A critical mistake many companies make is to optimize throughput, inventory, or operational expenses in isolation which can harm the system as a whole. For example, a reduction in operational expenses may look like a success \&quot;on paper\&quot; but if it leads to quality issues and an increase in returns, the system is not improved.&quot;), mdx(&quot;h3&quot;, null, &quot;Continuous Improvement with the Theory of Constraints&quot;), mdx(&quot;p&quot;, null, &quot;Time lost on a bottleneck directly equates to &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;reduced throughput&quot;), &quot; and includes defects produced both by the bottleneck and prior to the bottleneck because defective throughput will have to pass through the bottleneck again.&quot;), mdx(&quot;p&quot;, null, &quot;Bottleneck cost (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;c&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;c&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.43056em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;c&quot;))))), &quot;) is the system&apos;s total expenses (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;$&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;\\$&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.80556em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.05556em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;$&quot;))))), &quot;), divided by the bottleneck&apos;s production hours (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;h&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;h&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.69444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;h&quot;))))), &quot;), or &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;c&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;$&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;h&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;c = \\$/h&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.43056em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;c&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;$&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;h&quot;))))), &quot;. For example, if a system&apos;s total expenses are &quot;, &quot;$&quot;, &quot;1,000,000/year and a bottleneck is operational for 7,200 hours/year, the bottleneck cost is &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;$&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;1&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;separator&quot;: &quot;true&quot;
  }, &quot;,&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;000&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;separator&quot;: &quot;true&quot;
  }, &quot;,&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;000&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;7&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;separator&quot;: &quot;true&quot;
  }, &quot;,&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;200&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;h&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;o&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;u&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;r&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;s&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mtext&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\xA0&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;$&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;139&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;y&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;e&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;a&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;r&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;\\$1,000,000/7,200 hours = ~\\$139/year&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;$&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mpunct&quot;
  }, &quot;,&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.16666666666666666em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mpunct&quot;
  }, &quot;,&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.16666666666666666em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;7&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mpunct&quot;
  }, &quot;,&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.16666666666666666em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;2&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;h&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;o&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;u&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.02778em&quot;
    }
  }, &quot;r&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;s&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace nobreak&quot;
  }, &quot;\xA0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;$&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;3&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;9&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.03588em&quot;
    }
  }, &quot;y&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;e&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;a&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.02778em&quot;
    }
  }, &quot;r&quot;))))), &quot;. Note that as utilization of the bottleneck decreases, the cost to the system increases.&quot;), mdx(&quot;h4&quot;, null, &quot;Ways to Get the Most from a Bottleneck&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Reduce defects processed by the bottleneck&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Reduce idle time of the bottleneck (but not at the expense of maintenance!)&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Prioritize only what contributes to &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;li&quot;
  }, &quot;throughput&quot;), &quot;, not to &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;li&quot;
  }, &quot;inventory&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Distribute or reduce the load through alternative processes&quot;)), mdx(&quot;p&quot;, null, &quot;It&apos;s okay to slow down steps that proceed the bottleneck to reduce defects sent to the bottleneck or to \&quot;get around\&quot; the bottleneck, as long as those steps do not become slower than the bottleneck (thus becoming the bottleneck).&quot;), mdx(&quot;p&quot;, null, &quot;When a bottleneck&apos;s predecessor exceeds throughput, inventory is created; inventory increases tend to increase operational expenses as well. Running a non-bottleneck at maximum capacity is therefore a waste. Only bottlenecks should be utilized to full capacity. To \&quot;subordinate non-bottleneck resources to bottlenecks\&quot; is to run non-bottleneck resources at the rate of throughput as constrained by the bottleneck.&quot;), mdx(&quot;h3&quot;, null, &quot;Theory of Constraints: Focus Steps&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;mermaid&quot;
  }, &quot;graph TB\n    Identify[1. Identify &quot;, mdx(&quot;br&quot;, {
    parentName: &quot;div&quot;
  }), &quot;Constraints] --&gt; Decide[2. Decide how to &quot;, mdx(&quot;br&quot;, {
    parentName: &quot;div&quot;
  }), &quot;fully utilize the &quot;, mdx(&quot;br&quot;, {
    parentName: &quot;div&quot;
  }), &quot;constraints]\n\t\tDecide --&gt; Subordinate[3. Subordinate &quot;, mdx(&quot;br&quot;, {
    parentName: &quot;div&quot;
  }), &quot;everything else to &quot;, mdx(&quot;br&quot;, {
    parentName: &quot;div&quot;
  }), &quot;that decision]\n\t\tSubordinate --&gt; Elevate[4. Elevate the &quot;, mdx(&quot;br&quot;, {
    parentName: &quot;div&quot;
  }), &quot;constraints]\n\t\tElevate --&gt;|Step five: Go back &quot;, mdx(&quot;br&quot;, {
    parentName: &quot;div&quot;
  }), &quot;to step one| Identify&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[3D printing]]></title><description><![CDATA[Learn to 3D print]]></description><link>https://www.jamestharpe.com/3d-printing/</link><guid isPermaLink="false">https://www.jamestharpe.com/3d-printing/</guid><pubDate>Tue, 26 May 2020 13:13:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-05-26T13:13:11.000Z&quot;,
  &quot;description&quot;: &quot;Learn to 3D print&quot;,
  &quot;tags&quot;: [],
  &quot;title&quot;: &quot;3D printing&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;3D Printing&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;3D printing&quot;), &quot; is the process of creating 3-dimensional objects using an additive, such as a plastic (as opposed to a subtractive, such as a CNC machine).&quot;), mdx(&quot;h2&quot;, null, &quot;Process to 3D Print a Design&quot;), mdx(&quot;ol&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;Create or download a 3D design, typically as an STL file.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;\&quot;Slice\&quot; the design with a slicer to produce a g-code file.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;Load the g-code file to the printer&quot;)), mdx(&quot;p&quot;, null, &quot;Tips:&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Closely monitor the print as it begins and check on it periodically&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Clean the printer bed between prints with a small amount of rubbing alcohol and a microfiber cloth&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;A light dusting of cheap hairspray can improve adhesion, especially for glass beds&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Each filament will specify temperatures and other conditions required for successful prints&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Clean the printer bed between uses with a small amount of alcohol and a microfiber cloth&quot;)), mdx(&quot;h2&quot;, null, &quot;3D Printing Terminology&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;G-code file:&quot;), &quot; A file that contains the step-by-step instructions&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Raft:&quot;), &quot; A horizontal mesh printed before the first layer to improve bed adhesion or strengthen an otherwise weak base structure. Causes a rough finish on the bottom layer. Often used with ABS filament to prevent warping.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Slicer:&quot;), &quot; Software that converts a 3D model into layer-by-layer print instructions.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;STL file:&quot;), &quot; A \&quot;stereolithography\&quot; file that defines a set of 3-dimensional design in a layer-by-layer fashion.&quot;)), mdx(&quot;h2&quot;, null, &quot;3D Printing Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UC2Tc0TsvFxC83zF1w5x1PWQ&quot;
  }, &quot;Breaks&apos;n&apos;Makes&quot;), &quot; provides general advice and entertainment for 3D printing enthusiasts&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCWwuwWYPQhUnD6wo5Ri9URw&quot;
  }, &quot;Eunny&quot;), &quot; covers Tinkercad for use in 3D printing projects&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCVc6AHfGw9b2zOE_ZGfmsnw&quot;
  }, &quot;Make Anything YouTube Channel&quot;), &quot; has a lot of fun experiments and projects, plus a great community of helpful enthusiasts.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.thingiverse.com/&quot;
  }, &quot;MakerBot Thingiverse&quot;), &quot; has thousands of free, downloadable 3D designs.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCb8Rde3uRL1ohROUVg46h1A&quot;
  }, &quot;Thomas Sanladerer&apos;s YouTube channel&quot;), &quot; has a lot of excellent introductory resources for 3D printing.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://ultimaker.com/software/ultimaker-cura&quot;
  }, &quot;Ultimaker Cura&quot;), &quot; is a free slicer that works with most printers.&quot;)));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Electricity]]></title><description><![CDATA[Energy that results from charged particles]]></description><link>https://www.jamestharpe.com/electricity/</link><guid isPermaLink="false">https://www.jamestharpe.com/electricity/</guid><pubDate>Fri, 10 Apr 2020 18:40:46 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-04-10T18:40:46.000Z&quot;,
  &quot;description&quot;: &quot;Energy that results from charged particles&quot;,
  &quot;tags&quot;: [&quot;physics&quot;, &quot;power&quot;],
  &quot;title&quot;: &quot;Electricity&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Electricity&quot;), mdx(&quot;p&quot;, null, &quot;Electricity is the form of &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../physics/&quot;
  }, &quot;energy&quot;), &quot; (the ability to do work) that results from charged particles (electrons, protons). &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../power/&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;a&quot;
  }, &quot;Power&quot;), &quot; (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;a&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;P&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;P&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.13889em&quot;
    }
  }, &quot;P&quot;))))), &quot;)&quot;), &quot; from electricity is generated when potential electrical energy, referred to as &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../voltage/&quot;
  }, &quot;voltage&quot;), &quot;, is released so that it \&quot;flows\&quot; through a conductor as a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../current/&quot;
  }, &quot;current&quot;), &quot; where it encounters &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../resistance/&quot;
  }, &quot;resistance&quot;), &quot;. This flow is mathematically described by &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../ohms-law/&quot;
  }, &quot;Ohm&apos;s Law&quot;), &quot;, and the amount of power generated is described by the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../watts-law/&quot;
  }, &quot;Watt&apos;s Law&quot;), &quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;Relationships between Voltage, Current, Resistance, and Watts&quot;), mdx(&quot;p&quot;, null, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../ohms-law/&quot;
  }, &quot;Ohm&apos;s Law&quot;), &quot; and &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../watts-law/&quot;
  }, &quot;Watt&apos;s Law&quot;), &quot; describe the relationship between volts, amps, ohms and watts as &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;I&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;V&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;R&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;I = V/R&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.07847em&quot;
    }
  }, &quot;I&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.22222em&quot;
    }
  }, &quot;V&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.00773em&quot;
    }
  }, &quot;R&quot;))))), &quot; and &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;P&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;I&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;V&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;P=IV&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.13889em&quot;
    }
  }, &quot;P&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.07847em&quot;
    }
  }, &quot;I&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.22222em&quot;
    }
  }, &quot;V&quot;))))), &quot;, respectively. These equations allow for substitutions: for example &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;I&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;I&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.07847em&quot;
    }
  }, &quot;I&quot;))))), &quot; can be substituted with &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;V&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;R&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;V/R&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.22222em&quot;
    }
  }, &quot;V&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.00773em&quot;
    }
  }, &quot;R&quot;))))), &quot; so that &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;P&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;stretchy&quot;: &quot;false&quot;
  }, &quot;(&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;V&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;R&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;stretchy&quot;: &quot;false&quot;
  }, &quot;)&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;V&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;P=(V/R)V&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.13889em&quot;
    }
  }, &quot;P&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mopen&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.22222em&quot;
    }
  }, &quot;V&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.00773em&quot;
    }
  }, &quot;R&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mclose&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.22222em&quot;
    }
  }, &quot;V&quot;))))), &quot; or &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;P&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;msup&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;V&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;2&quot;)), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;R&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;P=V^2/R&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.13889em&quot;
    }
  }, &quot;P&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1.064108em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.22222em&quot;
    }
  }, &quot;V&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.063em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;2&quot;)))))))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.00773em&quot;
    }
  }, &quot;R&quot;))))), &quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;SI Units Used in Electricity&quot;), mdx(&quot;table&quot;, null, mdx(&quot;thead&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;thead&quot;
  }, mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Name&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Symbol&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Measures&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Definition&quot;))), mdx(&quot;tbody&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Ampere&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;A&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;A&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;A&quot;)))))), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;a&quot;, {
    parentName: &quot;td&quot;,
    &quot;href&quot;: &quot;../current/&quot;
  }, &quot;Current&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;C&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;s&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;{C}/{s}&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.07153em&quot;
    }
  }, &quot;C&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;s&quot;)))))))), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Coulomb&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;C&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;C&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.07153em&quot;
    }
  }, &quot;C&quot;)))))), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;a&quot;, {
    parentName: &quot;td&quot;,
    &quot;href&quot;: &quot;../charge/&quot;
  }, &quot;Charge&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;A&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u22C5&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;S&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;A \\cdot S&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;A&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2222222222222222em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mbin&quot;
  }, &quot;\u22C5&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2222222222222222em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.05764em&quot;
    }
  }, &quot;S&quot;))))))), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Farad&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;F&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;F&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.13889em&quot;
    }
  }, &quot;F&quot;)))))), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Capacitance&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;C&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;V&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;C/V&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.07153em&quot;
    }
  }, &quot;C&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.22222em&quot;
    }
  }, &quot;V&quot;))))))), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Henry&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;H&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;H&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.08125em&quot;
    }
  }, &quot;H&quot;)))))), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Inductance&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;W&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;b&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;A&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;Wb/A&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.13889em&quot;
    }
  }, &quot;W&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;b&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;A&quot;))))))), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Hertz&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;H&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;z&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;Hz&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.08125em&quot;
    }
  }, &quot;H&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.04398em&quot;
    }
  }, &quot;z&quot;)))))), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;a&quot;, {
    parentName: &quot;td&quot;,
    &quot;href&quot;: &quot;../frequency/&quot;
  }, &quot;Frequency&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;msup&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;s&quot;), mdx(&quot;mrow&quot;, {
    parentName: &quot;msup&quot;
  }, mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u2212&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;1&quot;)))), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;s^{-1}&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;s&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.063em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;\u2212&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;1&quot;))))))))))))))), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Ohm&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;\u03A9&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;\\Omega&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;\u03A9&quot;)))))), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;a&quot;, {
    parentName: &quot;td&quot;,
    &quot;href&quot;: &quot;../resistance/&quot;
  }, &quot;Resistance&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;V&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;A&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;V/A&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.22222em&quot;
    }
  }, &quot;V&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;A&quot;))))))), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Siemens&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;S&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;S&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.05764em&quot;
    }
  }, &quot;S&quot;)))))), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;a&quot;, {
    parentName: &quot;td&quot;,
    &quot;href&quot;: &quot;../conductance/&quot;
  }, &quot;Conductance&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;A&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;V&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;A/V&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;A&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.22222em&quot;
    }
  }, &quot;V&quot;))))))), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Tesla&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;T&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;T&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.13889em&quot;
    }
  }, &quot;T&quot;)))))), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Magnetic field strength&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;W&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;b&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;msup&quot;, {
    parentName: &quot;mrow&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;m&quot;), mdx(&quot;mn&quot;, {
    parentName: &quot;msup&quot;
  }, &quot;2&quot;))), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;Wb/m^2&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1.064108em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.13889em&quot;
    }
  }, &quot;W&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;b&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;m&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;msupsub&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-t&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist-r&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;vlist&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.8141079999999999em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;style&quot;: {
      &quot;top&quot;: &quot;-3.063em&quot;,
      &quot;marginRight&quot;: &quot;0.05em&quot;
    }
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;pstrut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;2.7em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;sizing reset-size6 size3 mtight&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mtight&quot;
  }, &quot;2&quot;)))))))))))))), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Volt&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;V&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;V&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.22222em&quot;
    }
  }, &quot;V&quot;)))))), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;a&quot;, {
    parentName: &quot;td&quot;,
    &quot;href&quot;: &quot;../voltage/&quot;
  }, &quot;Voltage&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;W&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;A&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;W/A&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.13889em&quot;
    }
  }, &quot;W&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;A&quot;))))))), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Watt&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;W&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;W&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.13889em&quot;
    }
  }, &quot;W&quot;)))))), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;a&quot;, {
    parentName: &quot;td&quot;,
    &quot;href&quot;: &quot;../power/&quot;
  }, &quot;Power&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;J&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;s&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;J/s&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.09618em&quot;
    }
  }, &quot;J&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;s&quot;))))))), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Weber&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;W&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;b&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;Wb&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.69444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.13889em&quot;
    }
  }, &quot;W&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;b&quot;)))))), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Magnetic flux&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;span&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;V&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u22C5&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;s&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;V \\cdot s&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.22222em&quot;
    }
  }, &quot;V&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2222222222222222em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mbin&quot;
  }, &quot;\u22C5&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2222222222222222em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.43056em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;s&quot;))))))))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Computer Science]]></title><description><![CDATA[The study of algorithms, data structures, information, and computation]]></description><link>https://www.jamestharpe.com/computer-science/</link><guid isPermaLink="false">https://www.jamestharpe.com/computer-science/</guid><pubDate>Sat, 25 Jan 2020 12:41:26 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-01-25T12:41:26.000Z&quot;,
  &quot;description&quot;: &quot;The study of algorithms, data structures, information, and computation&quot;,
  &quot;tags&quot;: [&quot;science&quot;],
  &quot;title&quot;: &quot;Computer Science&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Computer Science&quot;), mdx(&quot;h2&quot;, null, &quot;Computer Science Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCS0N5baNlQWJCUrhCEo8WlA&quot;
  }, &quot;Ben Eater&apos;s YouTube Channel&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UC9-y-6csu5WGm29I7JiwpnA&quot;
  }, &quot;Computerphile&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.khanacademy.org/computing/&quot;
  }, &quot;Khan Academy - Computer Science&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Functional Programming]]></title><description><![CDATA[A declarative programming paradigm for extracting and transforming data from streams]]></description><link>https://www.jamestharpe.com/functional-programming/</link><guid isPermaLink="false">https://www.jamestharpe.com/functional-programming/</guid><pubDate>Sat, 25 Jan 2020 12:39:26 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-01-25T12:39:26.000Z&quot;,
  &quot;description&quot;: &quot;A declarative programming paradigm for extracting and transforming data from streams&quot;,
  &quot;tags&quot;: [&quot;computer-science&quot;],
  &quot;title&quot;: &quot;Functional Programming&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Functional Programming&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Functional programming&quot;), &quot; is a declarative programming paradigm in which programs are constructed through the composition of functions, where each function is an expression that returns a value.&quot;), mdx(&quot;h2&quot;, null, &quot;Attributes of Functional Programs&quot;), mdx(&quot;table&quot;, null, mdx(&quot;thead&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;thead&quot;
  }, mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Attribute&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Description&quot;))), mdx(&quot;tbody&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;First Class Functions&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Functions can be bound to names, treated as variables, passed as arguments, and returned as the results of other functions&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Pure Functions&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Functions are deterministic: They always produce the same output from a given input without performing any side-effects (modifying values outside the function)&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Idempotence&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Side-effects (changes to state) produced by a function will occur only once, even if the function is executed multiple times&quot;)))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Reactive Programming]]></title><description><![CDATA[A declarative programming paradigm for extracting and transforming data from streams]]></description><link>https://www.jamestharpe.com/reactive-programming/</link><guid isPermaLink="false">https://www.jamestharpe.com/reactive-programming/</guid><pubDate>Sat, 25 Jan 2020 12:39:26 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-01-25T12:39:26.000Z&quot;,
  &quot;description&quot;: &quot;A declarative programming paradigm for extracting and transforming data from streams&quot;,
  &quot;tags&quot;: [&quot;computer-science&quot;],
  &quot;title&quot;: &quot;Reactive Programming&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Reactive Programming&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Reactive programming&quot;), &quot; is a declarative programming paradigm for extracting and transforming data from streams.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[RxJS]]></title><description><![CDATA[A library to create state machines and state charts written in JavaScript]]></description><link>https://www.jamestharpe.com/rxjs/</link><guid isPermaLink="false">https://www.jamestharpe.com/rxjs/</guid><pubDate>Sat, 25 Jan 2020 12:39:26 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-01-25T12:39:26.000Z&quot;,
  &quot;description&quot;: &quot;A library to create state machines and state charts written in JavaScript&quot;,
  &quot;tags&quot;: [&quot;javascript&quot;, &quot;reactive-programming&quot;],
  &quot;title&quot;: &quot;RxJS&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;RxJS&quot;), mdx(&quot;p&quot;, null, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://rxjs.dev/&quot;
  }, &quot;RxJS&quot;), &quot; is a JavaScript library for composing observable sequences of events into a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../reactive-programming/&quot;
  }, &quot;reactive&quot;), &quot; model.&quot;), mdx(&quot;h2&quot;, null, &quot;Terminology&quot;), mdx(&quot;table&quot;, null, mdx(&quot;thead&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;thead&quot;
  }, mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Term&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Meaning&quot;))), mdx(&quot;tbody&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Observable&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;An object that emits events&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Observer&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;A collection call-backs invoked by an Observable when an event is emitted&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Operator&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;A &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;td&quot;,
    &quot;href&quot;: &quot;../functional-programming/&quot;
  }, &quot;pure function&quot;), &quot; that transforms data emitted by an observable&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Pipe&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  })), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Scheduler&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  })), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Subject&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  })), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Subscription&quot;), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;The connection between an observable and observer&quot;)))), mdx(&quot;h3&quot;, null, &quot;Observables&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Observables&quot;), &quot; are sometimes referred to as \&quot;observable sequences\&quot; or \&quot;streams\&quot; and emit events either synchronously (immediately, when the event occurs) or asynchronously (some time after the event occurs).&quot;), mdx(&quot;h3&quot;, null, &quot;Observers&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Observers&quot;), &quot; \&quot;observe\&quot; events emitted by observables.&quot;), mdx(&quot;table&quot;, null, mdx(&quot;thead&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;thead&quot;
  }, mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Function&quot;), mdx(&quot;th&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Purpose&quot;))), mdx(&quot;tbody&quot;, {
    parentName: &quot;table&quot;
  }, mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;next()&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Provide a callback to process an event emitted by an observable&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;error()&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Provide a callback to process an error emitted by an observable&quot;)), mdx(&quot;tr&quot;, {
    parentName: &quot;tbody&quot;
  }, mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, mdx(&quot;code&quot;, {
    parentName: &quot;td&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;complete()&quot;)), mdx(&quot;td&quot;, {
    parentName: &quot;tr&quot;,
    &quot;align&quot;: null
  }, &quot;Provide a callback to process the end of the observable stream&quot;)))), mdx(&quot;h3&quot;, null, &quot;Subscriptions&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Subscriptions&quot;), &quot; connect observables to observers and are created by calling the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;subscribe&quot;), &quot; method on an observable and passing it an observer. Events are only emitted to an observer that has subscribed to an observable.&quot;), mdx(&quot;p&quot;, null, &quot;Subscriptions are stopped when:&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;The &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;complete()&quot;), &quot; method is called on the observer&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;A completing operator is used (for example, &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;of&quot;), &quot;, &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;from&quot;), &quot;, or &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;take&quot;), &quot;)&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;An uncaught error occurs&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;When &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;unsubscribe()&quot;), &quot; is called on a subscription&quot;)));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Angular CLI]]></title><description><![CDATA[Learn Angular]]></description><link>https://www.jamestharpe.com/angular-cli/</link><guid isPermaLink="false">https://www.jamestharpe.com/angular-cli/</guid><pubDate>Sun, 12 Jan 2020 13:05:10 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-01-12T13:05:10.000Z&quot;,
  &quot;description&quot;: &quot;Learn Angular&quot;,
  &quot;tags&quot;: [&quot;angular&quot;, &quot;cli&quot;],
  &quot;title&quot;: &quot;Angular CLI&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Angular CLI&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://angular.io/cli&quot;
  }, &quot;Angular CLI&quot;), &quot; is a &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../cli/&quot;
  }, &quot;command-line interface&quot;), &quot; used to build &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../angular/&quot;
  }, &quot;Angular&quot;), &quot; applications.&quot;), mdx(&quot;h2&quot;, null, &quot;Angular CLI Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://angular.io/cli&quot;
  }, &quot;Angular CLI Command Reference&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Angular (TypeScript Framework)]]></title><description><![CDATA[Learn Angular]]></description><link>https://www.jamestharpe.com/angular/</link><guid isPermaLink="false">https://www.jamestharpe.com/angular/</guid><pubDate>Sun, 12 Jan 2020 13:05:10 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-01-12T13:05:10.000Z&quot;,
  &quot;description&quot;: &quot;Learn Angular&quot;,
  &quot;tags&quot;: [&quot;typescript&quot;, &quot;web-dev&quot;],
  &quot;title&quot;: &quot;Angular (TypeScript Framework)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Angular (TypeScript Framework)&quot;), mdx(&quot;p&quot;, null, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://angular.io/&quot;
  }, &quot;Angular&quot;), &quot; is an application design framework for building &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../web-dev/&quot;
  }, &quot;web&quot;), &quot;, mobile, and desktop applications with &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../typescript/&quot;
  }, &quot;TypeScript&quot;), &quot;. It&apos;s most popular use is to develop web applications.&quot;), mdx(&quot;h2&quot;, null, &quot;Angular Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://angular.io/&quot;
  }, &quot;Angular Official Website&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://angular.io/docs&quot;
  }, &quot;Angular Documentation&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.youtube.com/channel/UCm9iiIfgmVODUJxINecHQkA&quot;
  }, &quot;ng-conf YouTube Channel&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Torque]]></title><description><![CDATA[Learn about torque: Force that causes an object to rotate around an axis.]]></description><link>https://www.jamestharpe.com/torque/</link><guid isPermaLink="false">https://www.jamestharpe.com/torque/</guid><pubDate>Thu, 09 Jan 2020 15:21:47 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2020-01-09T15:21:47.000Z&quot;,
  &quot;description&quot;: &quot;Learn about torque: Force that causes an object to rotate around an axis.&quot;,
  &quot;tags&quot;: [&quot;physics&quot;, &quot;angular-motion&quot;],
  &quot;title&quot;: &quot;Torque&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Torque&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Torque&quot;), &quot; (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u03C4&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;\\tau&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.43056em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.1132em&quot;
    }
  }, &quot;\u03C4&quot;))))), &quot;) is force that causes an object to rotate around an axis and is measured in joules (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;J&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;J&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.09618em&quot;
    }
  }, &quot;J&quot;))))), &quot;). Formally, torque is force (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;F&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;F&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.13889em&quot;
    }
  }, &quot;F&quot;))))), &quot;) times distance (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;d&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;d&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.69444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;d&quot;))))), &quot;), or &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;\u03C4&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;F&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;d&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;\\tau=Fd&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.43056em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.1132em&quot;
    }
  }, &quot;\u03C4&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.69444em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.13889em&quot;
    }
  }, &quot;F&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;d&quot;))))), &quot;. Though torque&apos;s definition is very similar to &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../physics/&quot;
  }, &quot;work&quot;), &quot; and the units of measure are the same, it is &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;not&quot;), &quot; work because work by definition causes &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;displacement&quot;), &quot; which is linear whereas torque by definition causes &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;rotation&quot;), &quot;.&quot;), mdx(&quot;p&quot;, null, &quot;By convention, Torque is negative when the rotation is clockwise and positive when rotation is counter-clockwise.&quot;), mdx(&quot;h2&quot;, null, &quot;Resources to Learn About Torque&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.khanacademy.org/science/physics/torque-angular-momentum/torque-tutorial/v/introduction-to-torque&quot;
  }, &quot;Khan Academy: Introduction to Torque&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[AWS Identity and Access Management (IAM)]]></title><description><![CDATA[AWS IAM: Identity Access Management for the AWS Cloud]]></description><link>https://www.jamestharpe.com/aws-iam/</link><guid isPermaLink="false">https://www.jamestharpe.com/aws-iam/</guid><pubDate>Fri, 19 Apr 2019 19:55:30 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;title&quot;: &quot;AWS Identity and Access Management (IAM)&quot;,
  &quot;date&quot;: &quot;2019-04-19T19:55:30.000Z&quot;,
  &quot;tags&quot;: [&quot;aws&quot;, &quot;cybersecurity&quot;],
  &quot;description&quot;: &quot;AWS IAM: Identity Access Management for the AWS Cloud&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;AWS Identity and Access Management (IAM)&quot;), mdx(&quot;p&quot;, null, &quot;IAM is a global service (no need to set a region) that completely manages all AWS Security \&quot;in the cloud\&quot; (as opposed to \&quot;of the cloud\&quot;).&quot;), mdx(&quot;p&quot;, null, &quot;IAM Consists of:&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Users&quot;), &quot; are intended to represent an actual person. Users can be part of a Group or have policies attached directly.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Groups&quot;), &quot; are collections of users, typically by function (dev, dba, etc), with a set of policies attached&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Roles&quot;), &quot; are for internal usage within AWS (assigned to AWS objects, e.g. an EC2 instance, though users can assume roles as well)&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;li&quot;
  }, &quot;Policies&quot;), &quot; are sets of access permissions to AWS resources&quot;)), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;IAM Federation&quot;), &quot; allows a company to integrate its identity provider (e.g. Active Directory) with IAM to supply identity/authentication.&quot;), mdx(&quot;p&quot;, null, &quot;IAM &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;does not&quot;), &quot; include Security Groups. &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Security Groups&quot;), &quot; are part of EC2 and act as a firewall around your EC2 instances by defining the ports, protocols, and IP addresses that can be used to access the instance.&quot;), mdx(&quot;h2&quot;, null, &quot;IAM Best Practices&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Never us root account&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Follow the Principle of Least Privilege&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;One user per person - Don&apos;t share&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;On role per application - don&apos;t reuse&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Never put credentials in code&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Never use root IAM credentials (create an admin user instead)&quot;)));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Unit Testing]]></title><description><![CDATA[The art and science of writing unit tests]]></description><link>https://www.jamestharpe.com/unit-testing/</link><guid isPermaLink="false">https://www.jamestharpe.com/unit-testing/</guid><pubDate>Fri, 15 Mar 2019 17:17:45 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2019-03-15T17:17:45.000Z&quot;,
  &quot;description&quot;: &quot;The art and science of writing unit tests&quot;,
  &quot;title&quot;: &quot;Unit Testing&quot;,
  &quot;tags&quot;: [&quot;software-testing&quot;]
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Unit Tests&quot;), mdx(&quot;p&quot;, null, &quot;Unit tests are tests that run in isolation from other tests. Unit tests are typically written by developers to test their own code and expected to run frequently and quickly.&quot;), mdx(&quot;h2&quot;, null, &quot;Semantics: The \&quot;Unit\&quot; in Unit Tests&quot;), mdx(&quot;p&quot;, null, &quot;The \&quot;unit\&quot; of isolation for a unit test &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;is the test its self&quot;), &quot;. Some developers &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;wrongly&quot;), &quot; consider the unit of isolation to be the system under test (the class, module, or function). This semantic difference of understanding can sometimes overwhelm otherwise productive discussions, especially when the difference is not explicitly stated.&quot;), mdx(&quot;h3&quot;, null, &quot;Why is it Wrong to Consider the System Under Test the Unit of Isolation?&quot;), mdx(&quot;p&quot;, null, &quot;The test is a more practical unit of isolation because it does not encourage needless isolation of the system under test, and instead focuses the developer on the desired &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;behavior&quot;), &quot; to be tested.&quot;), mdx(&quot;p&quot;, null, &quot;Software&apos;s behavior, not code, is what gives it value. Code may be endlessly refactored and rewritten, but it is only valuable as long as the &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;behavior&quot;), &quot; is correct. We therefore find more value in a definition that encourages us to test &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;behavior&quot;), &quot; in isolation over one that encourages us to test code - which can change endlessly - in isolation.&quot;), mdx(&quot;h3&quot;, null, &quot;Practical Conversations with Purists&quot;), mdx(&quot;p&quot;, null, &quot;When discussing unit tests, I occasionally run into a purist that insists that the system under test, not the test its self, is the unit of isolation. Rather than argue, I&apos;m happy to accept their definition if I can be allowed to introduce one of my own: Developer Test.&quot;), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Developer Test&quot;), &quot;: An automated test written by a developer to test the behavior of their application.&quot;)), mdx(&quot;p&quot;, null, &quot;This generally helps to focus on what&apos;s important without requiring a concession.&quot;), mdx(&quot;h2&quot;, null, &quot;Unit Test Structure&quot;), mdx(&quot;p&quot;, null, &quot;Though not strictly required, it&apos;s generally best for unit tests to follow a three-step pattern that resembles a small finite state machine consisting of an initial state, a single action, then finally a desired state.&quot;), mdx(&quot;p&quot;, null, &quot;This pattern usually goes by either of two mnemonics:&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Arrange, Act, Assert&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Given, When, Then&quot;)), mdx(&quot;p&quot;, null, &quot;In both cases we define an initial state, perform an action, and confirm the result. I personally prefer the declarative \&quot;Given, When, Then\&quot; over the imperative \&quot;Arrange, Act, Assert\&quot; because it more easily forms a sentence: &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Given a bank balance of &quot;, &quot;$&quot;, &quot;100, when I withdraw &quot;, &quot;$&quot;, &quot;20, then the bank balance is &quot;, &quot;$&quot;, &quot;80&quot;), &quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;Effective Unit Tests&quot;), mdx(&quot;p&quot;, null, &quot;An effective unit test suite...&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Is likely to catch a regression error&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Won&apos;t often produce false positives (including during a refactor)&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Saves more time than it requires to maintain&quot;)), mdx(&quot;h3&quot;, null, &quot;Characteristics of Good Unit Tests&quot;), mdx(&quot;p&quot;, null, &quot;Good unit tests...&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Cover a single behavior, observable from the end user&apos;s perspective&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Are deterministic, predictable, and repeatable&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Verify &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;li&quot;
  }, &quot;business&quot;), &quot; requirements&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Are run frequently without disrupting workflow&quot;)), mdx(&quot;h3&quot;, null, &quot;Tips to Write Effective Unit Tests&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Write the tests first&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Focus on the &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;li&quot;
  }, &quot;behavior&quot;), &quot; you want rather, not internals&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Use natural language to name tests&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Don&apos;t couple tests to implementation details unless absolutely necessary&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Don&apos;t mock dependencies unless there&apos;s an obvious benefit (e.g. speed, determinism)&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Don&apos;t rely on a test unless you&apos;ve seen if fail&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Don&apos;t bother to test trivial code (e.g. property getters/setters)&quot;)), mdx(&quot;h3&quot;, null, &quot;Ineffective Unit Test \&quot;Smells\&quot;&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Failing tests are difficult to debug&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Tests fail randomly or unpredictably&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Changes in implementation require changes in tests (tightly coupled)&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Developers avoid running tests&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Test failures aren&apos;t a priority&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;You must mock the internals of your domain model to write tests&quot;)), mdx(&quot;h2&quot;, null, &quot;Additional Resources&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;http://www.extremeprogramming.org/rules/unittests.html&quot;
  }, &quot;Extreme Programming: Unit Tests&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://www.martinfowler.com/bliki/UnitTest.html&quot;
  }, &quot;Unit Test by Martin Fowler&quot;)), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;https://martinfowler.com/bliki/TestPyramid.html&quot;
  }, &quot;The Test Pyramid by Martin Fowler&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[DynamoDB & CloudFormation: Add a Local Secondary Index to Existing Table]]></title><description><![CDATA[Steps to add a local secondary index to an existing DynamoDB table]]></description><link>https://www.jamestharpe.com/aws-dynamodb-local-secondary-index-existing-table-cloudformation/</link><guid isPermaLink="false">https://www.jamestharpe.com/aws-dynamodb-local-secondary-index-existing-table-cloudformation/</guid><pubDate>Sun, 27 Jan 2019 14:05:47 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2019-01-27T14:05:47.000Z&quot;,
  &quot;description&quot;: &quot;Steps to add a local secondary index to an existing DynamoDB table&quot;,
  &quot;redirect_from&quot;: [&quot;/dynamodb-local-secondary-index-existing-table-cloudformation/&quot;],
  &quot;tags&quot;: [&quot;aws-cloudformation&quot;, &quot;aws-dynamodb&quot;, &quot;aws-cli&quot;, &quot;database-as-code&quot;, &quot;infrastructure-as-code&quot;],
  &quot;title&quot;: &quot;DynamoDB &amp; CloudFormation: Add a Local Secondary Index to Existing Table&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;DynamoDB Local Secondary Index&quot;), mdx(&quot;p&quot;, null, &quot;A &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LSI.html&quot;
  }, &quot;local secondary index&quot;), &quot; essentially gives DynamoDB tables an additional sort key by which to query data. I recently needed to add a local secondary index to an existing DynamoDB table through CloudFormation so that I could query objects by the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;modified&quot;), &quot; column value without scanning. Unfortunately, this isn&apos;t as easy as simply adding the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-dynamodb-lsi.html&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;a&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;LocalSecondaryIndexes&quot;), &quot; element&quot;), &quot; to the CloudFormation script.&quot;), mdx(&quot;p&quot;, null, &quot;Adding a local secondary index requires replacing the table, which creates the challenge of preserving the table data during the upgrade.&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Here&apos;s what I learned:&quot;)), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;LocalSecondaryIndex CloudFormation YAML Syntax&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;How to troubleshoot the error &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;Property AttributeDefinitions is inconsistent with the KeySchema of the table and the secondary indexes&quot;), &quot;.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;How to take DynamoDB table backups with the AWS CLI&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;A work-around to prevent the error &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;CloudFormation cannot update a stack when a custom-named resource requires replacing...&quot;), &quot;.&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;Basic JSON parsing with &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;li&quot;,
    &quot;href&quot;: &quot;../jq/&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;a&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;jq&quot;)))), mdx(&quot;h2&quot;, null, &quot;Initial Table Schema: &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;h2&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;Jobs&quot;), &quot; Table&quot;), mdx(&quot;p&quot;, null, &quot;The original schema for the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;Jobs&quot;), &quot; table consisted of a generated &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;jobId&quot;), &quot; partition key and &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;jobName&quot;), &quot; sort key. The system is used for invoicing, so its important for users to quickly find a Job by its ID or name so they made a good choice fot they key schema.&quot;), mdx(&quot;p&quot;, null, &quot;Here is the CloudFormation code that originally defined the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;Jobs&quot;), &quot; table&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;yaml&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-yaml&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-yaml&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# app.cloudformation.yaml&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;JobsDynamoDBTable&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;Type&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&apos;AWS::DynamoDB::Table&apos;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;Properties&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;TableName&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; Jobs\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;AttributeDefinitions&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot;\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;-&quot;), &quot;\n\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;AttributeName&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; jobId\n\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;AttributeType&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; S\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;-&quot;), &quot;\n\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;AttributeName&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; name\n\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;AttributeType&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; S\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;KeySchema&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot;\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;-&quot;), &quot;\n\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;AttributeName&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; jobId\n\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;KeyType&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; HASH\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;-&quot;), &quot;\n\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;AttributeName&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; name\n\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;KeyType&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; RANGE\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;ProvisionedThroughput&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot;\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;ReadCapacityUnits&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;1&quot;), &quot;\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;WriteCapacityUnits&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;1&quot;)))), mdx(&quot;p&quot;, null, &quot;Recently, the client asked for some reporting to be added to the application that requires querying jobs by their last modified date. No problem, that&apos;s what local secondary indexes were built for.&quot;), mdx(&quot;h2&quot;, null, &quot;Add the LocalSecondaryIndex to the CloudFormation Script&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;LocalSecondaryIndexes&quot;), &quot; element for DynamoDB in CloudFormation is straight-forward. Provide a descriptive key name, alternate key schema, and Projection (columns that should be available in the index).&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;yaml&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-yaml&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-yaml&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;LocalSecondaryIndexes&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;-&quot;), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;IndexName&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; jobId&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;-&quot;), &quot;modified&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;-&quot;), &quot;index\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;KeySchema&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot;\n      &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;-&quot;), &quot;\n        &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;AttributeName&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; jobId\n        &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;KeyType&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; HASH\n      &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;-&quot;), &quot;\n        &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;AttributeName&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; modified\n        &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;KeyType&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; RANGE\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;Projection&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot;\n      &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;ProjectionType&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; ALL&quot;))), mdx(&quot;p&quot;, null, &quot;An attempt to deploy this change will result in an error:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, &quot;An error occurred: JobsDynamoDBTable - Property AttributeDefinitions is inconsistent with the KeySchema of the table and the secondary indexes.&quot;))), mdx(&quot;p&quot;, null, &quot;Of course! The &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;AttributeDefinitions&quot;), &quot; must be updated to include the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;modified&quot;), &quot; property. Once updated, the entire &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;JobsDynamoDBTable&quot;), &quot; CloudFormation resource element now looked like this:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;yaml&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-yaml&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-yaml&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# app.cloudformation.yaml&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;JobsDynamoDBTable&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;Type&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&apos;AWS::DynamoDB::Table&apos;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;Properties&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;TableName&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; Jobs\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;AttributeDefinitions&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot;\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;-&quot;), &quot;\n\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;AttributeName&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; jobId\n\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;AttributeType&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; S\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;-&quot;), &quot;\n\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;AttributeName&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; name\n\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;AttributeType&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; S\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# Required for LocalSecondaryIndex&quot;), &quot;\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;-&quot;), &quot;\n\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;AttributeName&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; modified\n\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;AttributeType&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; N\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;KeySchema&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot;\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;-&quot;), &quot;\n\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;AttributeName&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; jobId\n\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;KeyType&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; HASH\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;-&quot;), &quot;\n\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;AttributeName&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; name\n\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;KeyType&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; RANGE\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# Make modified available as a sort key&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;LocalSecondaryIndexes&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot;\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;-&quot;), &quot;\n\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;IndexName&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; jobId&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;-&quot;), &quot;modified&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;-&quot;), &quot;index\n\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;KeySchema&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot;\n\t\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;-&quot;), &quot;\n\t\t\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;AttributeName&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; jobId\n\t\t\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;KeyType&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; HASH\n\t\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;-&quot;), &quot;\n\t\t\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;AttributeName&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; modified\n\t\t\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;KeyType&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; RANGE\n\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;Projection&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot;\n\t\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;ProjectionType&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; ALL &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# Make All columns available in index&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;ProvisionedThroughput&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot;\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;ReadCapacityUnits&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;1&quot;), &quot;\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;WriteCapacityUnits&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;1&quot;)))), mdx(&quot;p&quot;, null, &quot;Though the CloudFormation template now seems complete, deploying fails:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, &quot;An error occurred: JobsDynamoDBTable - CloudFormation cannot update a stack when a custom-named resource requires replacing. Rename Jobs and update the stack again.&quot;))), mdx(&quot;h2&quot;, null, &quot;Replace the a DynamoDB Resource&quot;), mdx(&quot;p&quot;, null, &quot;CloudFormation refuses to add the index to the DynamoDB table, so it must be replaced with a new table. However, with application data in the table, it can&apos;t simply be deleted. The plan, then, is to create a new table called &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;Jobs.v1&quot;), &quot; with the index, then to move data from &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;Jobs&quot;), &quot; to &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;Jobs.v1&quot;), &quot; and finally (optionally) delete the original &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;Jobs&quot;), &quot; table.&quot;), mdx(&quot;h3&quot;, null, &quot;Retain the Original Table&quot;), mdx(&quot;p&quot;, null, &quot;A rename of the table will result in the original &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;Jobs&quot;), &quot; table being deleted. To prevent this, add &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;DeletionPolicy: Retain&quot;), &quot; to table object in your CloudFormation script and deploy. For safety sake, make a backup as well. Backups can be created in the AWS Console or via the CLI.&quot;), mdx(&quot;h4&quot;, null, &quot;Create a DynamoDB Backup with the AWS CLI&quot;), mdx(&quot;p&quot;, null, &quot;Here&apos;s an example of how to create a backup using the AWS CLI:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, &quot;$ aws dynamodb create-backup &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\\&quot;), &quot;\n  --region&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot;YOUR_REGION_HERE &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\\&quot;), &quot;\n  --table-name Jobs &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\\&quot;), &quot;\n  --backup-name Jobs-&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;date&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&apos;+%Y%m%d_%H%M%S&apos;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;)&quot;)), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;BackupDetails\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;BackupCreationDateTime\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;1548578121.641&quot;), &quot;,\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;BackupName\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;Jobs-20190127_033734\&quot;&quot;), &quot;,\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;BackupStatus\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;CREATING\&quot;&quot;), &quot;,\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;BackupType\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;USER\&quot;&quot;), &quot;,\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;BackupSizeBytes\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;123456&quot;), &quot;,\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;BackupArn\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;arn:aws:dynamodb:us-east-1:123456789012:table/Jobs/backup/01548578121641-f46bes63\&quot;&quot;), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;)))), mdx(&quot;p&quot;, null, &quot;It&apos;s important to let the backup finish before proceeding with further changes, but the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;aws dynamodb backup&quot;), &quot; command returns almost instantly because the backup operation is asynchronous.&quot;), mdx(&quot;p&quot;, null, &quot;Waiting on the backup to complete can be done with a simple script and a little help from the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;jq&quot;), &quot; utility.&quot;), mdx(&quot;p&quot;, null, &quot;First, parse out the ARN using &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;jq&quot;), &quot;:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, &quot;$ &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token assign-left variable&quot;
  }, &quot;backup_arn&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$(&quot;), &quot;aws dynamodb create-backup &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\\&quot;), &quot;\n  --region&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot;YOUR_REGION_HERE &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\\&quot;), &quot;\n  --table-name Jobs &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\\&quot;), &quot;\n  --backup-name Jobs-&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;$(&quot;), &quot;date &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&apos;+%Y%m%d_%H%M%S&apos;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;)&quot;)), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\\&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot; jq &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&apos;.BackupDetails.BackupArn&apos;&quot;), &quot; -r&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# -r for \&quot;raw\&quot; returns value w/ out quotes&quot;)))), mdx(&quot;p&quot;, null, &quot;Next, loop until the backup is no longer in a &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;CREATING&quot;), &quot; state:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, &quot;$ &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token assign-left variable&quot;
  }, &quot;backup_status&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;CREATING\&quot;&quot;), &quot;\n$ &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;while&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;[&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$backup_status&quot;), &quot;\&quot;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;CREATING\&quot;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;]&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;do&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\\&quot;), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;echo&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;... Waiting for backup to complete, backup_status=\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$backup_status&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\\&quot;), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token assign-left variable&quot;
  }, &quot;backup_status&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$(&quot;), &quot;aws dynamodb describe-backup &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\\&quot;), &quot;\n    --backup-arn $backup_arn &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\\&quot;), &quot;\n    --region&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot;YOUR_REGION_HERE &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\\&quot;), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot; jq &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&apos;.BackupDescription.BackupDetails.BackupStatus&apos;&quot;), &quot; -r&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;)&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\\&quot;), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;sleep&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;2&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\\&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;done&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\\&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;echo&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;Backup complete\&quot;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;..&quot;), &quot;. Waiting &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;for&quot;), &quot; backup to complete, &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token assign-left variable&quot;
  }, &quot;backup_status&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot;CREATING\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;..&quot;), &quot;. Waiting &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;for&quot;), &quot; backup to complete, &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token assign-left variable&quot;
  }, &quot;backup_status&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot;CREATING\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;..&quot;), &quot;. Waiting &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;for&quot;), &quot; backup to complete, &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token assign-left variable&quot;
  }, &quot;backup_status&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot;CREATING\nBackup complete\n\n$&quot;))), mdx(&quot;h3&quot;, null, &quot;Rename the Table&quot;), mdx(&quot;p&quot;, null, &quot;With the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;Retain&quot;), &quot; policy and backup in place it&apos;s safe to rename the Jobs table and deploy. The first time I did this, I had forgotten to deploy the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;DeletionPolicy: Retain&quot;), &quot; change in my CloudFormation and deleted the original table, along with all the data. &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Take backups!&quot;)), mdx(&quot;p&quot;, null, &quot;The entire table definition now looks like this:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;yaml&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-yaml&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-yaml&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# app.cloudformation.yaml&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;JobsDynamoDBTableV1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# Renamed&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;Type&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&apos;AWS::DynamoDB::Table&apos;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# Retain the table when deleting from CF Stack!&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;DeletionPolicy&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; Retain\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;Properties&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;TableName&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; Jobs.v1 &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# Renamed&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;AttributeDefinitions&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot;\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;-&quot;), &quot;\n\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;AttributeName&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; jobId\n\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;AttributeType&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; S\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;-&quot;), &quot;\n\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;AttributeName&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; name\n\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;AttributeType&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; S\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# Required for LocalSecondaryIndex&quot;), &quot;\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;-&quot;), &quot;\n\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;AttributeName&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; modified\n\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;AttributeType&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; N\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;KeySchema&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot;\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;-&quot;), &quot;\n\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;AttributeName&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; jobId\n\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;KeyType&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; HASH\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;-&quot;), &quot;\n\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;AttributeName&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; name\n\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;KeyType&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; RANGE\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# Make modified available as a sort key&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;LocalSecondaryIndexes&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot;\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;-&quot;), &quot;\n\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;IndexName&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; jobId&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;-&quot;), &quot;modified&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;-&quot;), &quot;index\n\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;KeySchema&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot;\n\t\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;-&quot;), &quot;\n\t\t\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;AttributeName&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; jobId\n\t\t\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;KeyType&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; HASH\n\t\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;-&quot;), &quot;\n\t\t\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;AttributeName&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; modified\n\t\t\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;KeyType&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; RANGE\n\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;Projection&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot;\n\t\t\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;ProjectionType&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; ALL\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;ProvisionedThroughput&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot;\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;ReadCapacityUnits&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;1&quot;), &quot;\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;WriteCapacityUnits&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;1&quot;)))), mdx(&quot;p&quot;, null, &quot;Before deploying, update references to the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;Jobs&quot;), &quot; table and &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;JobsDynamoDBTable&quot;), &quot; resource to &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;Jobs.v1&quot;), &quot; and &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;JobsDynamoDBTableV1&quot;), &quot;, respectively throughout your application and CloudFormation script.&quot;), mdx(&quot;h2&quot;, null, &quot;Deploy and Migrate&quot;), mdx(&quot;p&quot;, null, &quot;The deployment will consist of two steps: The deployment its self, then the migration of the Jobs DynamoDB table to the Jobs.v1 table.&quot;), mdx(&quot;p&quot;, null, &quot;The deployment of the CloudFormation template is simple:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, &quot;aws cloudformation deploy --template-file app.cloudformation.yaml --stack-name app&quot;))), mdx(&quot;p&quot;, null, &quot;Once completed, the migration from the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;Jobs&quot;), &quot; table to &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;Jobs.v1&quot;), &quot; can begin.&quot;), mdx(&quot;h3&quot;, null, &quot;Copy All Rows from one DynamoDB Table to Another via CLI&quot;), mdx(&quot;p&quot;, null, &quot;To copy all the rows from one DynamoDB table to another uses two primary commands with the AWS CLI: &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;aws dynamodb scan&quot;), &quot; to retrieve rows from the source table and &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;aws dynamodb batch-write-item&quot;), &quot; to write records to the destination.&quot;), mdx(&quot;h4&quot;, null, &quot;Limitations of &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;h4&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;batch-write-item&quot;)), mdx(&quot;p&quot;, null, &quot;Complicating matters is that &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;batch-write-item&quot;), &quot; can perform a maximum of 25 operations per call. Since the source table contains more than 25 records, we&apos;ll have to loop through.&quot;), mdx(&quot;h4&quot;, null, &quot;Paginating Reads, 25 at a Time&quot;), mdx(&quot;p&quot;, null, &quot;Our migration script will retrieve 25 items at a time, write them to a file, then use &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;batch-write-item&quot;), &quot; to copy them to the destination. To &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-pagination.html&quot;
  }, &quot;paginate&quot;), &quot; through the data, both the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;--page-size&quot;), &quot; and &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;--max-items&quot;), &quot; commands must be set to 25:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, &quot;aws dynamodb scan --profile hvh --region&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot;us-east-1 &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\\&quot;), &quot;\n  --table-name Jobs &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\\&quot;), &quot;\n  --page-size &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;25&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\\&quot;), &quot;\n  --max-items &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;25&quot;)))), mdx(&quot;p&quot;, null, &quot;This call can be wrapped in a loop to page through the data and the variables needed parsed using &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;jq&quot;), &quot;:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# migrate.sh&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;set&quot;), &quot; -e\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token assign-left variable&quot;
  }, &quot;page&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;1&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;while&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;do&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# do .. while equivalent&quot;), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;echo&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;  Scanning page &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$page&quot;), &quot;, up to 25 records in Jobs table\&quot;&quot;), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token assign-left variable&quot;
  }, &quot;scan_result&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$(&quot;), &quot;aws dynamodb scan --profile hvh --region&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot;us-east-1 &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\\&quot;), &quot;\n    --table-name Jobs &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\\&quot;), &quot;\n    --page-size &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;25&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\\&quot;), &quot;\n    --max-items &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;25&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\\&quot;), &quot;\n    $starting_token&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;)&quot;)), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;echo&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$scan_result&quot;), &quot;\&quot;&quot;), &quot;\n\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# Get pagination token:&quot;), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token assign-left variable&quot;
  }, &quot;next_token&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;echo&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$scan_result&quot;), &quot;\&quot;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot; jq &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&apos;.NextToken&apos;&quot;), &quot; -r&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;)&quot;)), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# Set starting_token for next iteration (blank on first iteration)&quot;), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token assign-left variable&quot;
  }, &quot;starting_token&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;--starting-token &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$next_token&quot;), &quot;\&quot;&quot;), &quot;\n\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# Break loop, if no more pages&quot;), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;[&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;[&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$next_token&quot;), &quot;\&quot;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;!=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;null\&quot;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;]&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;]&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;||&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;break&quot;), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# Increment page count&quot;), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;((&quot;), &quot;page&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;++&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;))&quot;)), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;done&quot;)))), mdx(&quot;h4&quot;, null, &quot;Transforming DynamoDB Scan Results to &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;h4&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;PutRequest&quot;), &quot; Elements&quot;), mdx(&quot;p&quot;, null, &quot;Each item returned from &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;aws dynamodb scan&quot;), &quot; must be transformed into a &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;PutRequest&quot;), &quot; element for compatibility with &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;batch-write-item&quot;), &quot;. Each set of 25 scan results can be written to a temporary file then passed to &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;batch-write-item&quot;), &quot; to perform the insert. The entire, finished script now looks like this:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# migrate.sh&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;set&quot;), &quot; -e\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token assign-left variable&quot;
  }, &quot;page&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;1&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;echo&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;Copying all rows from Jobs to Jobs.v1, 25 rows at a time\&quot;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;while&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;do&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# do .. while equivalent&quot;), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;echo&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;  Scanning page &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$page&quot;), &quot;, up to 25 records in Jobs table\&quot;&quot;), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token assign-left variable&quot;
  }, &quot;scan_result&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$(&quot;), &quot;aws dynamodb scan --profile hvh --region&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot;us-east-1 &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\\&quot;), &quot;\n        --table-name Jobs &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\\&quot;), &quot;\n        --page-size &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;25&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\\&quot;), &quot;\n        --max-items &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;25&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\\&quot;), &quot;\n        $starting_token&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;)&quot;)), &quot;\n\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# Transform the scan result to a PutRequest:&quot;), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token assign-left variable&quot;
  }, &quot;put_req_json&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;echo&quot;), &quot; $scan_result &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot; jq &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&apos;[.Items | .[] | { PutRequest: { Item: . } }]&apos;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;)&quot;)), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# Get number of records:&quot;), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token assign-left variable&quot;
  }, &quot;rec_count&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;echo&quot;), &quot; $put_req_json &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot; jq &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&apos;length&apos;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;)&quot;)), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# Get pagination token:&quot;), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token assign-left variable&quot;
  }, &quot;next_token&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;echo&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$scan_result&quot;), &quot;\&quot;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot; jq &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&apos;.NextToken&apos;&quot;), &quot; -r&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;)&quot;)), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# Set starting_token for next iteration (blank on first iteration)&quot;), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token assign-left variable&quot;
  }, &quot;starting_token&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;--starting-token &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$next_token&quot;), &quot;\&quot;&quot;), &quot;\n\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;echo&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;  Writing &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$rec_count&quot;), &quot; records to temporary file\&quot;&quot;), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token assign-left variable&quot;
  }, &quot;tmp_file_name&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;Jobs.v1.&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$page&quot;), &quot;.json\&quot;&quot;), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;echo&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&apos;{\n        \&quot;Jobs.v1\&quot;: &apos;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;${put_req_json}&quot;), &quot;\&quot;&quot;), &quot;&apos;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&apos; &gt; \&quot;Jobs.v1.$page.json\&quot;\n\n    echo \&quot;  Writing $rec_count to Jobs.v1\&quot;\n    aws dynamodb batch-write-item \\\n        --region=YOUR_REGION_HERE \\\n        --request-items file://\&quot;$tmp_file_name\&quot; \\\n    | sed &apos;&quot;), &quot;s/^/  /&apos; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# Indent output&quot;), &quot;\n\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;echo&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;  Deleting temporary file\&quot;&quot;), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;rm&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$tmp_file_name&quot;), &quot;\&quot;&quot;), &quot;\n\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# Break loop, if no more pages&quot;), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;[&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;[&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$next_token&quot;), &quot;\&quot;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;!=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;null\&quot;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;]&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;]&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;||&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;break&quot;), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# Increment page count&quot;), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;((&quot;), &quot;page&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;++&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;))&quot;)), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;done&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;echo&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;Copied all rows from Jobs to Jobs.v1\&quot;&quot;)))), mdx(&quot;h2&quot;, null, &quot;Clean Up: Delete the Original Table (optional)&quot;), mdx(&quot;p&quot;, null, &quot;The original &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;Job&quot;), &quot; table is no longer in use, and may be deleted safely at this point:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, &quot;aws dynamodb delete-table &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\\&quot;), &quot;\n  --region&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot;YOUR_REGION_HERE &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\\&quot;), &quot;\n  --table-name Jobs&quot;))), mdx(&quot;p&quot;, null, &quot;That&apos;s it! The original &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;Jobs&quot;), &quot; table has been migrated to &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;Jobs.v1&quot;), &quot; with a Local Secondary Index applied and the original table removed.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Database as Code: Flyway & MySQL on Cloud Foundry]]></title><description><![CDATA[Recipe: Database as Code with Flyway & MySQL on Cloud Foundry This recipe is illustrated in the  PAL Tracker  example project. 1. Provision…]]></description><link>https://www.jamestharpe.com/cloud-foundry-database-as-code-flyway/</link><guid isPermaLink="false">https://www.jamestharpe.com/cloud-foundry-database-as-code-flyway/</guid><pubDate>Tue, 15 Jan 2019 12:09:18 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2019-01-15T12:09:18.000Z&quot;,
  &quot;redirect_from&quot;: [&quot;/database-as-code-flyway/&quot;],
  &quot;tags&quot;: [&quot;cloud-foundry&quot;, &quot;database-as-code&quot;, &quot;flyway&quot;, &quot;mysql&quot;, &quot;pal-tracker&quot;],
  &quot;title&quot;: &quot;Database as Code: Flyway &amp; MySQL on Cloud Foundry&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Recipe: Database as Code with Flyway &amp; MySQL on Cloud Foundry&quot;), mdx(&quot;p&quot;, null, &quot;This recipe is illustrated in the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../pal-tracker/&quot;
  }, &quot;PAL Tracker&quot;), &quot; example project.&quot;), mdx(&quot;h2&quot;, null, &quot;1. Provision and Bind MySQL in Cloud Foundry&quot;), mdx(&quot;p&quot;, null, &quot;Use &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;cf marketplace&quot;), &quot; to find the appropriate service and provisioning options for MySQL, then use &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;cf create-service&quot;), &quot; to provision the service:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, &quot;$ cf marketplace\nGetting services from marketplace &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;in&quot;), &quot; org some-org / space develop as you@example.com&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;..&quot;), &quot;.\nOK\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;service&quot;), &quot;               plans                  description\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# ...&quot;), &quot;\np-mysql               100mb, 1gb             A DBaaS\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# ...&quot;)))), mdx(&quot;p&quot;, null, &quot;In the example above, the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;p-mysql&quot;), &quot; service is available. Provision it with &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;cf create-service&quot;), &quot;:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, &quot;cf create-service p-mysql 100mb pal-tracker-db&quot;))), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;cf create-service&quot;), &quot; call will return immediately, before the service is provisioned. To check the status use &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;cf service&quot;), &quot;:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, &quot;$ cf &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;service&quot;), &quot; pal-tracker-db\n\nService instance: pal-tracker-db\nService: p-mysql\nPlan: 100mb\nDescription: MySQL databases on demand\nDocumentation url:\nDashboard: https://p-mysql.example.com/manage/instances/abcd-ef12-3456\n\nLast Operation\nStatus: create succeeded\nMessage:\nStarted: &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;2019&quot;), &quot;-01-15T22:59:07Z\nUpdated: &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;2019&quot;), &quot;-01-15T22:59:26Z&quot;))), mdx(&quot;p&quot;, null, &quot;Once the service is ready, bind it to the &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;pal-tracker&quot;), &quot; application:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, &quot;cf bind-service pal-tracker pal-tracker-db &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# Service info added to VCAP_SERVICES env var&quot;)))), mdx(&quot;p&quot;, null, &quot;Once the service is bound, the &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;VCAP_SERVICES&quot;), &quot; environment variable will contain details about the service:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, &quot;$ cf &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;env&quot;), &quot; my-app\nGetting &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;env&quot;), &quot; variables &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;for&quot;), &quot; app pal-tracker &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;in&quot;), &quot; org some-org / space some-space as\nyou&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;..&quot;), &quot;.\nOK\nSystem-Provided:\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;VCAP_SERVICES\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;p.mysql\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;[&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;label\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;p.mysql\&quot;&quot;), &quot;,\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;name\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;pal-tracker-db\&quot;&quot;), &quot;,\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;plan\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;db-small\&quot;&quot;), &quot;,\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;provider\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;:&quot;), &quot; null,\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;syslog_drain_url\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;:&quot;), &quot; null,\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;tags\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;[&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;mysql\&quot;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;]&quot;), &quot;,\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;credentials\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;hostname\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;10.0.0.20\&quot;&quot;), &quot;,\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;jdbcUrl\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;jdbc:mysql://10.0.0.20:3306/service_instance_db?user=fefcbe8360854a18a7994b870e7b0bf5&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token entity&quot;,
    &quot;title&quot;: &quot;\\u0026&quot;
  }, &quot;\\u0026&quot;), &quot;password=z9z6eskdbs1rhtxt\&quot;&quot;), &quot;,\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;name\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;service_instance_db\&quot;&quot;), &quot;,\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;password\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;z9z6eskdbs1rhtxt\&quot;&quot;), &quot;,\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;port\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;3306&quot;), &quot;,\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;uri\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;mysql://fefcbe8360854a18a7994b870e7b0bf5:z9z6eskdbs1rhtxt@10.0.0.20:3306/service_instance_db?reconnect=true\&quot;&quot;), &quot;,\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;username\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;fefcbe8360854a18a7994b870e7b0bf5\&quot;&quot;), &quot;\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;,\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;volume_mounts\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;[&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;]&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;..&quot;), &quot;.\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;)))), mdx(&quot;h2&quot;, null, &quot;2. Add the Database \&quot;as code\&quot; to the Project&quot;), mdx(&quot;p&quot;, null, &quot;Create a &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;databases/tracker&quot;), &quot; folder in the application root then create a file called &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;create_databases.sql&quot;), &quot; there:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;mkdir&quot;), &quot; -p database/tracker\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;touch&quot;), &quot; database/tracker/create_databases.sql&quot;))), mdx(&quot;p&quot;, null, &quot;Edit the &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;create_databases.sql&quot;), &quot; file to create &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;tracker_dev&quot;), &quot; and &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;tracker_test&quot;), &quot; databases:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;sql&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-sql&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-sql&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;-- Delete DBs if they exist&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;DROP&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;DATABASE&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;IF&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;EXISTS&quot;), &quot; tracker_dev&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;DROP&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;DATABASE&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;IF&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;EXISTS&quot;), &quot; tracker_test&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;-- Create the databases&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;CREATE&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;DATABASE&quot;), &quot; tracker_dev&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;CREATE&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;DATABASE&quot;), &quot; tracker_test&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;-- Add a user with full access to both DBs&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;CREATE&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;USER&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;IF&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;NOT&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;EXISTS&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&apos;tracker&apos;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;@&apos;localhost&apos;&quot;), &quot;\n  IDENTIFIED &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;BY&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&apos;&apos;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;GRANT&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;ALL&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;PRIVILEGES&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;ON&quot;), &quot; tracker_dev&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;*&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;TO&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&apos;tracker&apos;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;@&apos;localhost&apos;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;GRANT&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;ALL&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;PRIVILEGES&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;ON&quot;), &quot; tracker_test&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;*&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;TO&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&apos;tracker&apos;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;@&apos;localhost&apos;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;)))), mdx(&quot;h3&quot;, null, &quot;Add the first Migration&quot;), mdx(&quot;p&quot;, null, &quot;Add a file called &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;V1__initial_schema.sql&quot;), &quot; to a folder called &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;migrations&quot;), &quot; in the &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;database/tracker&quot;), &quot; folder, then add a &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;CREATE TABLE&quot;), &quot; statement to store &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;TimeEntry&quot;), &quot; objects.&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;sql&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-sql&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-sql&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;CREATE&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;TABLE&quot;), &quot; time_entries &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;\n  id         &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;BIGINT&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;20&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;NOT&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token boolean&quot;
  }, &quot;NULL&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;AUTO_INCREMENT&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n  project_id &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;BIGINT&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;20&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;-- projectId on TimeEntry&quot;), &quot;\n  user_id    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;BIGINT&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;20&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;-- userId on TimeEntry&quot;), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;date&quot;), &quot;       &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;DATE&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n  hours      &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;INT&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;PRIMARY&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;KEY&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;id&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;ENGINE&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;innodb&quot;), &quot;\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;DEFAULT&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;CHARSET&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; utf8&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;)))), mdx(&quot;h2&quot;, null, &quot;3. Create and Migrate a Local MySQL Databases&quot;), mdx(&quot;p&quot;, null, &quot;To create the test and development databases, simply pass the &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;create_databases.sql&quot;), &quot; file to MySQL on the command line:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, &quot;mysql -uroot &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;&lt;&quot;), &quot; databases/tracker/create_databases.sql&quot;))), mdx(&quot;p&quot;, null, &quot;Add the &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;time_entries&quot;), &quot; table to both databases using the Flyway CLI:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, &quot;flyway -url&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;jdbc:mysql://localhost:3306/tracker_dev\&quot;&quot;), &quot; -locations&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot;filesystem:databases/tracker clean migrate\nflyway -url&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;jdbc:mysql://localhost:3306/tracker_test\&quot;&quot;), &quot; -locations&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot;filesystem:databases/tracker clean migrate&quot;))), mdx(&quot;p&quot;, null, &quot;The databases can now be inspected with MySQL.&quot;), mdx(&quot;p&quot;, null, &quot;Open MySQL on the CLI:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, &quot;mysql -u tracker&quot;))), mdx(&quot;p&quot;, null, &quot;Inspect the database:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;sql&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-sql&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-sql&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;use&quot;), &quot; tracker_dev&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;describe&quot;), &quot; time_entries&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;+&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;------------+--------------+------+-----+---------+----------------+&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot; Field      &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;Type&quot;), &quot;         &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token boolean&quot;
  }, &quot;Null&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;Key&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;Default&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot; Extra          &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;+&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;------------+--------------+------+-----+---------+----------------+&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot; id         &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;bigint&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;20&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;   &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;NO&quot;), &quot;   &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot; PRI &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token boolean&quot;
  }, &quot;NULL&quot;), &quot;    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;auto_increment&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot; project_id &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;bigint&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;20&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;   &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot; YES  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot;     &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token boolean&quot;
  }, &quot;NULL&quot;), &quot;    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot;                &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot; user_id    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;bigint&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;20&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;   &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot; YES  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot;     &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token boolean&quot;
  }, &quot;NULL&quot;), &quot;    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot;                &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;date&quot;), &quot;       &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;date&quot;), &quot;         &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot; YES  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot;     &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token boolean&quot;
  }, &quot;NULL&quot;), &quot;    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot;                &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot; hours      &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;int&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;11&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;      &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot; YES  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot;     &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token boolean&quot;
  }, &quot;NULL&quot;), &quot;    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot;                &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;+&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;------------+--------------+------+-----+---------+----------------+&quot;)))), mdx(&quot;p&quot;, null, &quot;Your local databases are ready to go!&quot;), mdx(&quot;h2&quot;, null, &quot;4. Create and Migrate the Database on Cloud Foundry&quot;), mdx(&quot;p&quot;, null, &quot;The database provided by Cloud Foundry is behind a Firewall, so it&apos;s necessary to open an SSH tunnel. The following is a fully re-usable script for running the migration as part of a CI process:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token shebang important&quot;
  }, &quot;#!/usr/bin/env bash&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# Fail on error&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;set&quot;), &quot; -e\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# Get the GUID of the app - pass pal-tracker as first arg to script&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token assign-left variable&quot;
  }, &quot;app_guid&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;`&quot;), &quot;cf app $1 --guid&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;`&quot;)), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token assign-left variable&quot;
  }, &quot;credentials&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;`&quot;), &quot;cf &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;curl&quot;), &quot; /v2/apps/$app_guid/env &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot; jq &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&apos;.system_env_json.VCAP_SERVICES | .[] | .[] | select(.instance_name==\&quot;pal-tracker-db\&quot;) | .credentials&apos;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;`&quot;)), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# Get MySQL Connection info&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token assign-left variable&quot;
  }, &quot;ip_address&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;`&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;echo&quot;), &quot; $credentials &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot; jq -r &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&apos;.hostname&apos;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;`&quot;)), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token assign-left variable&quot;
  }, &quot;db_name&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;`&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;echo&quot;), &quot; $credentials &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot; jq -r &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&apos;.name&apos;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;`&quot;)), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token assign-left variable&quot;
  }, &quot;db_username&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;`&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;echo&quot;), &quot; $credentials &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot; jq -r &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&apos;.username&apos;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;`&quot;)), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token assign-left variable&quot;
  }, &quot;db_password&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;`&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;echo&quot;), &quot; $credentials &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;|&quot;), &quot; jq -r &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&apos;.password&apos;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;`&quot;)), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# Open SSH tunnel&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;echo&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;Opening ssh tunnel to &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$ip_address&quot;), &quot;\&quot;&quot;), &quot;\ncf &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;ssh&quot;), &quot; -N -L &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;63306&quot;), &quot;:&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$ip_address&quot;), &quot;:3306 pal-tracker &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;&amp;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token assign-left variable&quot;
  }, &quot;cf_ssh_pid&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$!&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;echo&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;Waiting for tunnel\&quot;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;sleep&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;5&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# Run migrations&quot;), &quot;\nflyway-*/flyway -url&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;jdbc:mysql://127.0.0.1:63306/&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$db_name&quot;), &quot;\&quot;&quot;), &quot; -locations&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot;filesystem:&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$2&quot;), &quot;/databases/tracker -user&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$db_username&quot;), &quot; -password&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$db_password&quot;), &quot; migrate\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;kill&quot;), &quot; -STOP &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$cf_ssh_pid&quot;)))), mdx(&quot;p&quot;, null, &quot;To run the script, pass the application name and root directory to the script:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, &quot;./scripts/migrate-databases.sh pal-tracker &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;.&quot;)))), mdx(&quot;p&quot;, null, &quot;Once the script has completed, the Cloud Foundry database is ready to go!&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Spring MVC CRUD Operations]]></title><description><![CDATA[Recipe: Create, Retrieve, Update, and Delete with Spring MVC This recipe is based on the  PAL Tracker  example project. 1. Create the Model…]]></description><link>https://www.jamestharpe.com/cloud-foundry-spring-mvc-crud-operations/</link><guid isPermaLink="false">https://www.jamestharpe.com/cloud-foundry-spring-mvc-crud-operations/</guid><pubDate>Tue, 15 Jan 2019 11:18:03 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2019-01-15T11:18:03.000Z&quot;,
  &quot;redirect_from&quot;: [&quot;/spring-mvc-crud-operations/&quot;],
  &quot;title&quot;: &quot;Spring MVC CRUD Operations&quot;,
  &quot;tags&quot;: [&quot;java&quot;, &quot;gradle&quot;, &quot;cloud-foundry&quot;, &quot;pal-tracker&quot;, &quot;spring-boot&quot;]
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Recipe: Create, Retrieve, Update, and Delete with Spring MVC&quot;), mdx(&quot;p&quot;, null, &quot;This recipe is based on the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../pal-tracker/&quot;
  }, &quot;PAL Tracker&quot;), &quot; example project.&quot;), mdx(&quot;h2&quot;, null, &quot;1. Create the Model&quot;), mdx(&quot;p&quot;, null, &quot;We&apos;ll stick with the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://github.com/jamestharpe/pal-tracker&quot;
  }, &quot;PAL Tracker&quot;), &quot; example and create a simple &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;TimeEntry&quot;), &quot; class to be serialized for CRUD operations:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;java&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-java&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-java&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;package&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;io&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;pivotal&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;pal&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;tracker&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;import&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;java&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;time&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;LocalDate&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;public&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;class&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntry&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;private&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;long&quot;), &quot; id&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;private&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;long&quot;), &quot; projectId&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;private&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;long&quot;), &quot; userId&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;private&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;int&quot;), &quot; hours&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;private&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;LocalDate&quot;), &quot; date&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;public&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntry&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;public&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntry&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;long&quot;), &quot; projectId&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;long&quot;), &quot; userId&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;LocalDate&quot;), &quot; date&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;int&quot;), &quot; hours&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;this&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;projectId &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; projectId&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;this&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;userId &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; userId&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;this&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;date &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; date&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;this&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;hours &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; hours&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;public&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntry&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;long&quot;), &quot; id&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;long&quot;), &quot; projectId&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;long&quot;), &quot; userId&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;LocalDate&quot;), &quot; date&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;int&quot;), &quot; hours&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;this&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;id &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; id&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;this&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;projectId &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; projectId&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;this&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;userId &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; userId&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;this&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;date &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; date&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;this&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;hours &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; hours&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;public&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;long&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;getId&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; id&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;public&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;void&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;setId&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;long&quot;), &quot; id&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;this&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;id &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; id&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;public&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;long&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;getProjectId&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; projectId&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;public&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;long&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;getUserId&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; userId&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;public&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;LocalDate&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;getDate&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; date&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;public&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;int&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;getHours&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; hours&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Required for equality comparisons&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token annotation punctuation&quot;
  }, &quot;@Override&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;public&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;boolean&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;equals&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Object&quot;), &quot; o&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;if&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;this&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;==&quot;), &quot; o&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token boolean&quot;
  }, &quot;true&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;if&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;o &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;==&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;null&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;||&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;getClass&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;!=&quot;), &quot; o&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;getClass&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token boolean&quot;
  }, &quot;false&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntry&quot;), &quot; timeEntry &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntry&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; o&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;if&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;id &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;!=&quot;), &quot; timeEntry&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;id&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token boolean&quot;
  }, &quot;false&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;if&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;projectId &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;!=&quot;), &quot; timeEntry&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;projectId&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token boolean&quot;
  }, &quot;false&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;if&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;userId &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;!=&quot;), &quot; timeEntry&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;userId&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token boolean&quot;
  }, &quot;false&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;if&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;hours &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;!=&quot;), &quot; timeEntry&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;hours&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token boolean&quot;
  }, &quot;false&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; date &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;!=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;null&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;?&quot;), &quot; date&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;equals&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;timeEntry&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;date&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; timeEntry&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;date &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;==&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;null&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Required for equality comparisons&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token annotation punctuation&quot;
  }, &quot;@Override&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;public&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;int&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;hashCode&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;int&quot;), &quot; result &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;int&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;id &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;^&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;id &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;&gt;&gt;&gt;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;32&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\tresult &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;31&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;*&quot;), &quot; result &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;+&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;int&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;projectId &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;^&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;projectId &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;&gt;&gt;&gt;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;32&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\tresult &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;31&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;*&quot;), &quot; result &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;+&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;int&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;userId &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;^&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;userId &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;&gt;&gt;&gt;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;32&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\tresult &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;31&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;*&quot;), &quot; result &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;+&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;date &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;!=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;null&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;?&quot;), &quot; date&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;hashCode&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\tresult &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;31&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;*&quot;), &quot; result &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;+&quot;), &quot; hours&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; result&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token annotation punctuation&quot;
  }, &quot;@Override&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;public&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;String&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;toString&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;TimeEntry{\&quot;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;+&quot;), &quot;\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;id=\&quot;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;+&quot;), &quot; id &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;+&quot;), &quot;\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;, projectId=\&quot;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;+&quot;), &quot; projectId &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;+&quot;), &quot;\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;, userId=\&quot;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;+&quot;), &quot; userId &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;+&quot;), &quot;\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;, date=&apos;\&quot;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;+&quot;), &quot; date &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;+&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token char&quot;
  }, &quot;&apos;\\&apos;&apos;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;+&quot;), &quot;\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;, hours=\&quot;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;+&quot;), &quot; hours &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;+&quot;), &quot;\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token char&quot;
  }, &quot;&apos;}&apos;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;)))), mdx(&quot;h2&quot;, null, &quot;2. Create an in-memory Repository&quot;), mdx(&quot;p&quot;, null, &quot;I&apos;ll cover using JDBC in my next article. For now, create an in-memory repository for time entries by implementing a &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;TimeEntryRepository&quot;), &quot; interface. Using an interface will make it easy to swap out later.&quot;), mdx(&quot;p&quot;, null, &quot;First, create the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;TimeEntryRepository&quot;), &quot; interface:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;java&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-java&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-java&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;package&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;io&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;pivotal&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;pal&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;tracker&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;import&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;java&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;util&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;List&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;public&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;interface&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntryRepository&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntry&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;create&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntry&quot;), &quot; timeEntry&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntry&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;find&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Long&quot;), &quot; id&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;List&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token generics&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntry&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;list&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntry&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;update&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Long&quot;), &quot; id&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntry&quot;), &quot; timeEntry&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;void&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;delete&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Long&quot;), &quot; id&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;)))), mdx(&quot;p&quot;, null, &quot;Next, implement it by storing &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;TimeEntry&quot;), &quot; objects in a &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;HashMap&quot;), &quot;:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;java&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-java&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-java&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;package&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;io&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;pivotal&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;pal&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;tracker&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;import&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;java&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;util&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;ArrayList&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;import&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;java&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;util&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;HashMap&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;import&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;java&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;util&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;List&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;public&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;class&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;InMemoryTimeEntryRepository&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;implements&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntryRepository&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Store entries in a HashMap for onw&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;private&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;HashMap&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token generics&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Long&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntry&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), &quot; timeEntries &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;new&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;HashMap&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token generics&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;private&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;long&quot;), &quot; currentId &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;1L&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token annotation punctuation&quot;
  }, &quot;@Override&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;public&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntry&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;create&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntry&quot;), &quot; timeEntry&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Long&quot;), &quot; id &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; currentId&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;++&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntry&quot;), &quot; newTimeEntry &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;new&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntry&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;\n\t\t\tid&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\t\t\ttimeEntry&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;getProjectId&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\t\t\ttimeEntry&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;getUserId&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\t\t\ttimeEntry&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;getDate&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\t\t\ttimeEntry&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;getHours&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n\t\ttimeEntries&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;put&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;id&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; newTimeEntry&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; newTimeEntry&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token annotation punctuation&quot;
  }, &quot;@Override&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;public&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntry&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;find&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Long&quot;), &quot; id&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; timeEntries&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;get&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;id&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token annotation punctuation&quot;
  }, &quot;@Override&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;public&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;List&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token generics&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntry&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;list&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;new&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;ArrayList&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token generics&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;timeEntries&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;values&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token annotation punctuation&quot;
  }, &quot;@Override&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;public&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntry&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;update&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Long&quot;), &quot; id&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntry&quot;), &quot; timeEntry&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntry&quot;), &quot; updatedEntry &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;new&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntry&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;\n\t\t\tid&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\t\t\ttimeEntry&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;getProjectId&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\t\t\ttimeEntry&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;getUserId&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\t\t\ttimeEntry&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;getDate&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\t\t\ttimeEntry&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;getHours&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n\t\ttimeEntries&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;replace&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;id&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; updatedEntry&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; updatedEntry&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token annotation punctuation&quot;
  }, &quot;@Override&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;public&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;void&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;delete&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Long&quot;), &quot; id&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\ttimeEntries&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;remove&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;id&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;)))), mdx(&quot;h2&quot;, null, &quot;Wire up the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;h2&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;TimeEntryRepository&quot;), &quot; Bean&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;@Bean&quot;), &quot; annotation allows an application to provide an implementation of a class or interface at run-time. To supply a &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;TimeEntryRepository&quot;), &quot;, update the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;PalTrackerApplication&quot;), &quot; class:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;java&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-java&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-java&quot;
  }, &quot;\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token annotation punctuation&quot;
  }, &quot;@Bean&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntryRepository&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;timeEntryRepository&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;new&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;InMemoryTimeEntryRepository&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;)))), mdx(&quot;p&quot;, null, &quot;Since the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;TimeEntry&quot;), &quot; class contains a &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;LocalDate&quot;), &quot;, we also need to supply an &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;ObjectMapper&quot;), &quot; which can properly serialize dates into &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;LocalDate&quot;), &quot; objects, so add another &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;@Bean&quot;), &quot; to supply a &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;Jackson2ObjectMapperBuilder&quot;), &quot; instance:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;java&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-java&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-java&quot;
  }, &quot;\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token annotation punctuation&quot;
  }, &quot;@Bean&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;public&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;ObjectMapper&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;jsonObjectMapper&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Jackson2ObjectMapperBuilder&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;json&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;serializationInclusion&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;JsonInclude&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;Include&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;NON_NULL&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Don\u2019t include null values&quot;), &quot;\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;featuresToDisable&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;SerializationFeature&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;WRITE_DATES_AS_TIMESTAMPS&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;//ISODate&quot;), &quot;\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;modules&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;new&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;JavaTimeModule&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;build&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;)))), mdx(&quot;p&quot;, null, &quot;For this to build, the Jackson dependency must be added to the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;dependencies&quot;), &quot; closure in &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;build.gradle&quot;), &quot;:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;groovy&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-groovy&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-groovy&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;compile&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string gstring&quot;
  }, &quot;\&quot;com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.7\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;)))), mdx(&quot;h2&quot;, null, &quot;3. Create a Controller for CRUD Operations&quot;), mdx(&quot;p&quot;, null, &quot;The controller is a simple Java class with the appropriate annotations: &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;@PostMapping&quot;), &quot; for POST requests that will handle Create operation, &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;@GetMapping&quot;), &quot; for GET requests to handle Retrieve operations, &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;@PutMapping&quot;), &quot; for PUT requests that will handle Update operations, and &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;@DeleteMapping&quot;), &quot; for DELETE requests to handle Delete operations.&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;java&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-java&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-java&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;package&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;io&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;pivotal&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;pal&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;tracker&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;import&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;org&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;springframework&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;http&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;HttpStatus&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;import&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;org&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;springframework&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;http&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;ResponseEntity&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;import&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;org&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;springframework&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;web&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;bind&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;annotation&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;*&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;import&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;java&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;util&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;List&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token annotation punctuation&quot;
  }, &quot;@RestController&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Sets the \&quot;root\&quot; for all TimeEntryController end-points&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token annotation punctuation&quot;
  }, &quot;@RequestMapping&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;/time-entries\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;public&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;class&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntryController&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;private&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntryRepository&quot;), &quot; timeEntriesRepo&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;public&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntryController&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntryRepository&quot;), &quot; timeEntriesRepo&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;this&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;timeEntriesRepo &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; timeEntriesRepo&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Create&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token annotation punctuation&quot;
  }, &quot;@PostMapping&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;public&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;ResponseEntity&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token generics&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntry&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;create&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token annotation punctuation&quot;
  }, &quot;@RequestBody&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntry&quot;), &quot; timeEntry&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntry&quot;), &quot; createdTimeEntry &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; timeEntriesRepo&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;create&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;timeEntry&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Returning a ResponseEntity allows us to control the resulting HTTP status code&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;new&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;ResponseEntity&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token generics&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;createdTimeEntry&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;HttpStatus&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;CREATED&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Retrieve a single record&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token annotation punctuation&quot;
  }, &quot;@GetMapping&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;{id}\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;public&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;ResponseEntity&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token generics&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntry&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;read&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token annotation punctuation&quot;
  }, &quot;@PathVariable&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Long&quot;), &quot; id&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntry&quot;), &quot; timeEntry &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; timeEntriesRepo&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;find&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;id&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;if&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;timeEntry &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;!=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;null&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;new&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;ResponseEntity&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token generics&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;timeEntry&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;HttpStatus&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;OK&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;else&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;new&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;ResponseEntity&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token generics&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;HttpStatus&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;NOT_FOUND&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Retrieve all records&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token annotation punctuation&quot;
  }, &quot;@GetMapping&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;public&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;ResponseEntity&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token generics&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;List&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntry&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;list&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;new&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;ResponseEntity&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token generics&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;timeEntriesRepo&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;list&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;HttpStatus&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;OK&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Update&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token annotation punctuation&quot;
  }, &quot;@PutMapping&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;{id}\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;public&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;ResponseEntity&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token generics&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntry&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;update&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token annotation punctuation&quot;
  }, &quot;@PathVariable&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Long&quot;), &quot; id&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token annotation punctuation&quot;
  }, &quot;@RequestBody&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntry&quot;), &quot; timeEntry&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntry&quot;), &quot; updatedTimeEntry &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; timeEntriesRepo&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;update&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;id&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; timeEntry&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;if&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;updatedTimeEntry &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;!=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;null&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;new&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;ResponseEntity&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token generics&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;updatedTimeEntry&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;HttpStatus&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;OK&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;else&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;new&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;ResponseEntity&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token generics&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;HttpStatus&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;NOT_FOUND&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Delete&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token annotation punctuation&quot;
  }, &quot;@DeleteMapping&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;{id}\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;public&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;ResponseEntity&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token generics&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntry&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;delete&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token annotation punctuation&quot;
  }, &quot;@PathVariable&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Long&quot;), &quot; id&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\ttimeEntriesRepo&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;delete&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;id&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;new&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;ResponseEntity&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token generics&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;HttpStatus&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;NO_CONTENT&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;)))), mdx(&quot;p&quot;, null, &quot;Returning a &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;ResponseEntity&quot;), &quot; allows us to control the resulting HTTP status code.&quot;), mdx(&quot;h2&quot;, null, &quot;4. Test and Deploy the Changes&quot;), mdx(&quot;p&quot;, null, &quot;Use PostMan, curl, or unit tests to test the end-points. Here&apos;s a sample set of end-to-end tests for the TimeEntryController:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;java&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-java&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-java&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;package&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;test&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;pivotal&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;pal&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;trackerapi&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;import&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;com&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;jayway&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;jsonpath&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;DocumentContext&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;import&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;io&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;pivotal&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;pal&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;tracker&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;PalTrackerApplication&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;import&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;io&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;pivotal&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;pal&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;tracker&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntry&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;import&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;org&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;junit&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Test&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;import&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;org&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;junit&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;runner&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;RunWith&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;import&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;org&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;springframework&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;beans&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;factory&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;annotation&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Autowired&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;import&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;org&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;springframework&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;boot&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;test&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;context&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;SpringBootTest&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;import&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;org&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;springframework&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;boot&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;test&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;web&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;client&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TestRestTemplate&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;import&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;org&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;springframework&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;http&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;HttpEntity&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;import&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;org&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;springframework&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;http&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;HttpMethod&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;import&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;org&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;springframework&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;http&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;HttpStatus&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;import&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;org&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;springframework&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;http&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;ResponseEntity&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;import&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;org&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;springframework&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;test&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;context&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;junit4&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;SpringRunner&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;import&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;java&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;time&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;LocalDate&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;import&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;java&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;util&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Collection&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;import&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;static&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;com&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;jayway&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;jsonpath&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;JsonPath&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;parse&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;import&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;static&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;org&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;assertj&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;core&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;api&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Assertions&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;assertThat&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;import&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;static&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;org&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;springframework&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;boot&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;test&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;context&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;SpringBootTest&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;WebEnvironment&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;RANDOM_PORT&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Wire up the Spring application&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token annotation punctuation&quot;
  }, &quot;@RunWith&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;SpringRunner&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;class&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token annotation punctuation&quot;
  }, &quot;@SpringBootTest&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;classes &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;PalTrackerApplication&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;class&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; webEnvironment &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; RANDOM_PORT&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;public&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;class&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntryApiTest&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Use to call the TimeEntryController end-points&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token annotation punctuation&quot;
  }, &quot;@Autowired&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;private&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TestRestTemplate&quot;), &quot; restTemplate&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Sample/test data&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;private&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;final&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;long&quot;), &quot; projectId &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;123L&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;private&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;final&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;long&quot;), &quot; userId &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;456L&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;private&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntry&quot;), &quot; timeEntry &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;new&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntry&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;projectId&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; userId&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;LocalDate&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;parse&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;2017-01-08\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;8&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token annotation punctuation&quot;
  }, &quot;@Test&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;public&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;void&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;testCreate&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;throws&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Exception&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;ResponseEntity&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token generics&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;String&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), &quot; createResponse &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; restTemplate&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;postForEntity&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;/time-entries\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; timeEntry&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;String&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;class&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;assertThat&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;createResponse&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;getStatusCode&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;isEqualTo&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;HttpStatus&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;CREATED&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// com.jayway.jsonpath.JsonPath.parse makes it easy to read JSON&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;DocumentContext&quot;), &quot; createJson &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;parse&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;createResponse&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;getBody&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;assertThat&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;createJson&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;read&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;$.id\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Long&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;class&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;isGreaterThan&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;0&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;assertThat&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;createJson&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;read&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;$.projectId\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Long&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;class&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;isEqualTo&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;projectId&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;assertThat&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;createJson&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;read&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;$.userId\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Long&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;class&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;isEqualTo&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;userId&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;assertThat&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;createJson&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;read&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;$.date\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;String&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;class&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;isEqualTo&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;2017-01-08\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;assertThat&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;createJson&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;read&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;$.hours\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Long&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;class&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;isEqualTo&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;8&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token annotation punctuation&quot;
  }, &quot;@Test&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;public&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;void&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;testList&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;throws&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Exception&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Long&quot;), &quot; id &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;createTimeEntry&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;ResponseEntity&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token generics&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;String&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), &quot; listResponse &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; restTemplate&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;getForEntity&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;/time-entries\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;String&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;class&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;assertThat&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;listResponse&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;getStatusCode&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;isEqualTo&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;HttpStatus&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;OK&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;DocumentContext&quot;), &quot; listJson &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;parse&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;listResponse&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;getBody&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Collection&quot;), &quot; timeEntries &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; listJson&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;read&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;$[*]\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Collection&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;class&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;assertThat&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;timeEntries&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;size&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;isEqualTo&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;1&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Long&quot;), &quot; readId &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; listJson&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;read&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;$[0].id\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Long&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;class&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;assertThat&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;readId&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;isEqualTo&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;id&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token annotation punctuation&quot;
  }, &quot;@Test&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;public&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;void&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;testRead&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;throws&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Exception&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Long&quot;), &quot; id &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;createTimeEntry&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;ResponseEntity&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token generics&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;String&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), &quot; readResponse &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;this&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;restTemplate&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;getForEntity&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;/time-entries/\&quot;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;+&quot;), &quot; id&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;String&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;class&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;assertThat&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;readResponse&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;getStatusCode&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;isEqualTo&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;HttpStatus&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;OK&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;DocumentContext&quot;), &quot; readJson &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;parse&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;readResponse&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;getBody&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;assertThat&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;readJson&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;read&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;$.id\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Long&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;class&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;isEqualTo&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;id&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;assertThat&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;readJson&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;read&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;$.projectId\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Long&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;class&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;isEqualTo&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;projectId&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;assertThat&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;readJson&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;read&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;$.userId\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Long&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;class&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;isEqualTo&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;userId&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;assertThat&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;readJson&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;read&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;$.date\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;String&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;class&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;isEqualTo&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;2017-01-08\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;assertThat&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;readJson&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;read&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;$.hours\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Long&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;class&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;isEqualTo&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;8&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token annotation punctuation&quot;
  }, &quot;@Test&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;public&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;void&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;testUpdate&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;throws&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Exception&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Long&quot;), &quot; id &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;createTimeEntry&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;long&quot;), &quot; projectId &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;2L&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;long&quot;), &quot; userId &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;3L&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntry&quot;), &quot; updatedTimeEntry &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;new&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntry&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;projectId&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; userId&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;LocalDate&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;parse&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;2017-01-09\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;9&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;ResponseEntity&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token generics&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;String&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), &quot; updateResponse &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; restTemplate&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;exchange&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;/time-entries/\&quot;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;+&quot;), &quot; id&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;HttpMethod&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;PUT&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;new&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;HttpEntity&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token generics&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;updatedTimeEntry&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;null&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;String&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;class&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;assertThat&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;updateResponse&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;getStatusCode&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;isEqualTo&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;HttpStatus&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;OK&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;DocumentContext&quot;), &quot; updateJson &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;parse&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;updateResponse&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;getBody&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;assertThat&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;updateJson&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;read&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;$.id\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Long&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;class&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;isEqualTo&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;id&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;assertThat&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;updateJson&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;read&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;$.projectId\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Long&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;class&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;isEqualTo&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;projectId&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;assertThat&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;updateJson&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;read&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;$.userId\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Long&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;class&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;isEqualTo&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;userId&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;assertThat&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;updateJson&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;read&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;$.date\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;String&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;class&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;isEqualTo&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;2017-01-09\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;assertThat&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;updateJson&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;read&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;$.hours\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Long&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;class&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;isEqualTo&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;9&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token annotation punctuation&quot;
  }, &quot;@Test&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;public&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;void&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;testDelete&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;throws&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Exception&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Long&quot;), &quot; id &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;createTimeEntry&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;ResponseEntity&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token generics&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;String&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), &quot; deleteResponse &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; restTemplate&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;exchange&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;/time-entries/\&quot;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;+&quot;), &quot; id&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;HttpMethod&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;DELETE&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;null&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;String&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;class&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;assertThat&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;deleteResponse&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;getStatusCode&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;isEqualTo&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;HttpStatus&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;NO_CONTENT&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;ResponseEntity&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token generics&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;String&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), &quot; deletedReadResponse &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;this&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;restTemplate&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;getForEntity&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;/time-entries/\&quot;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;+&quot;), &quot; id&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;String&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;class&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;assertThat&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;deletedReadResponse&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;getStatusCode&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;isEqualTo&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;HttpStatus&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;NOT_FOUND&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;private&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Long&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;createTimeEntry&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;HttpEntity&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token generics&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntry&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), &quot; entity &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;new&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;HttpEntity&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token generics&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;timeEntry&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;ResponseEntity&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token generics&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntry&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), &quot; response &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; restTemplate&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;exchange&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;/time-entries\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;HttpMethod&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;POST&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; entity&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;TimeEntry&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;class&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;assertThat&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;response&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;getStatusCode&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;isEqualTo&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;HttpStatus&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;CREATED&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; response&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;getBody&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;getId&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;)))), mdx(&quot;p&quot;, null, &quot;Now that basic CRUD operations are complete, they can be deployed to Cloud Foundry:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, &quot;./gradlew build &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# build the JAR&quot;), &quot;\ncf push -p build/libs/pal-tracker.jar &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# deploy to CF&quot;)))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Spring Boot Environment Configuration on Cloud Foundry]]></title><description><![CDATA[Recipe: Configure Spring Boot on Cloud Foundry This recipe is illustrated in the  PAL Tracker  example project. 1. Inject Environment…]]></description><link>https://www.jamestharpe.com/cloud-foundry-spring-boot-environment/</link><guid isPermaLink="false">https://www.jamestharpe.com/cloud-foundry-spring-boot-environment/</guid><pubDate>Tue, 15 Jan 2019 01:25:15 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2019-01-15T01:25:15.000Z&quot;,
  &quot;redirect_from&quot;: [&quot;/pcf-spring-boot-environment-basics/&quot;],
  &quot;tags&quot;: [&quot;cloud-foundry&quot;, &quot;java&quot;, &quot;pal-tracker&quot;],
  &quot;title&quot;: &quot;Spring Boot Environment Configuration on Cloud Foundry&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Recipe: Configure Spring Boot on Cloud Foundry&quot;), mdx(&quot;p&quot;, null, &quot;This recipe is illustrated in the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../pal-tracker/&quot;
  }, &quot;PAL Tracker&quot;), &quot; example project.&quot;), mdx(&quot;h2&quot;, null, &quot;1. Inject Environment Variables into a Controller&quot;), mdx(&quot;p&quot;, null, &quot;Update the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;WelcomeController&quot;), &quot; so that the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;sayHello()&quot;), &quot; method returns a &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;message&quot;), &quot; field set by the constructor. Use the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;@Value&quot;), &quot; annotation to inject the value from the environment:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;java&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-java&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-java&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;package&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;io&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;pivotal&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;pal&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;tracker&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;import&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;org&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;springframework&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;beans&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;factory&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;annotation&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Value&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;import&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;org&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;springframework&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;web&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;bind&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;annotation&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;GetMapping&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;import&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;org&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;springframework&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;web&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;bind&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;annotation&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;RestController&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token annotation punctuation&quot;
  }, &quot;@RestController&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;public&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;class&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;WelcomeController&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;private&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;String&quot;), &quot; message&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;public&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;WelcomeController&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;\n        &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Injects the WELCOME_MESSAGE environment variable&quot;), &quot;\n        &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token annotation punctuation&quot;
  }, &quot;@Value&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;${welcome.message}\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;String&quot;), &quot; message\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n        &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;this&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;message &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; message&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token annotation punctuation&quot;
  }, &quot;@GetMapping&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;/\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;public&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;String&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;sayHello&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n        &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; message&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;)))), mdx(&quot;p&quot;, null, &quot;Running the app now will result in a failure: &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;Could not resolve placeholder &apos;welcome.message&apos; in value \&quot;${welcome.message}\&quot;&quot;), &quot;.&quot;), mdx(&quot;p&quot;, null, &quot;To resolve this, update the &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;build.gradle&quot;), &quot; to set the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;WELCOME_MESSAGE&quot;), &quot; environment variable in the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;bootRun&quot;), &quot; configuration:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;groovy&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-groovy&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-groovy&quot;
  }, &quot;bootRun&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;environment&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;[&quot;), &quot;\n     &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string gstring&quot;
  }, &quot;\&quot;WELCOME_MESSAGE\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string gstring&quot;
  }, &quot;\&quot;hello\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;]&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;)))), mdx(&quot;h2&quot;, null, &quot;2. Built-in Cloud Foundry Environment Variables&quot;), mdx(&quot;p&quot;, null, &quot;Cloud Foundry comes with several &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://docs.cloudfoundry.org/devguide/deploy-apps/environment-variable.html&quot;
  }, &quot;built-in environment variables&quot;), &quot; accessible to your application. To show this, let&apos;s create a new controller called &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;EnvController&quot;), &quot;:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;java&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-java&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-java&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;package&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;io&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;pivotal&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;pal&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;tracker&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;import&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;org&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;springframework&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;beans&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;factory&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;annotation&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Value&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;import&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;org&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;springframework&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;web&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;bind&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;annotation&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;GetMapping&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;import&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;org&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;springframework&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;web&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;bind&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;annotation&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;RestController&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;import&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;java&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;util&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;HashMap&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;import&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;java&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;util&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Map&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token annotation punctuation&quot;
  }, &quot;@RestController&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;public&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;class&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;EnvController&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;private&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;final&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;String&quot;), &quot; port&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;private&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;final&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;String&quot;), &quot; memoryLimit&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;private&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;final&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;String&quot;), &quot; cfInstanceIndex&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;private&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;final&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;String&quot;), &quot; cfInstanceAddress&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;public&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;EnvController&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Injects the PORT environment variable, defaults to NOT SET&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token annotation punctuation&quot;
  }, &quot;@Value&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;${port:NOT SET}\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;String&quot;), &quot; port&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Injects the MEMORY_LIMIT environment variable, defaults to NOT SET&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token annotation punctuation&quot;
  }, &quot;@Value&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;${memory.limit:NOT SET}\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;String&quot;), &quot; memoryLimit&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Injects the CF_INSTANCE_INDEX environment variable, defaults to NOT SET&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token annotation punctuation&quot;
  }, &quot;@Value&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;${cf.instance.index:NOT SET}\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;String&quot;), &quot; cfInstanceIndex&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Injects the CF_INSTANCE_ADDR environment variable, defaults to NOT SET&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token annotation punctuation&quot;
  }, &quot;@Value&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;${cf.instance.addr:NOT SET}\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;String&quot;), &quot; cfInstanceAddress\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;this&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;port &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; port&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;this&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;memoryLimit &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; memoryLimit&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;this&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;cfInstanceIndex &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; cfInstanceIndex&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;this&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;cfInstanceAddress &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; cfInstanceAddress&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Maps GET requests to /env&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token annotation punctuation&quot;
  }, &quot;@GetMapping&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;/env\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;public&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Map&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token generics&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;String&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;String&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;getEnv&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;Map&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token generics&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;String&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;String&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), &quot; result &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;new&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;HashMap&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token generics&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&lt;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;&gt;&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\tresult&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;put&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;PORT\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; port&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\tresult&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;put&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;MEMORY_LIMIT\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; memoryLimit&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\tresult&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;put&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;CF_INSTANCE_INDEX\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; cfInstanceIndex&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\tresult&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;put&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;CF_INSTANCE_ADDR\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; cfInstanceAddress&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; result&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;)))), mdx(&quot;p&quot;, null, &quot;Run the app and visit the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/env&quot;), &quot; end-point to see the output in your local environment:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;json&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-json&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-json&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token property&quot;
  }, &quot;\&quot;PORT\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;NOT SET\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token property&quot;
  }, &quot;\&quot;CF_INSTANCE_ADDR\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;NOT SET\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token property&quot;
  }, &quot;\&quot;CF_INSTANCE_INDEX\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;NOT SET\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token property&quot;
  }, &quot;\&quot;MEMORY_LIMIT\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;NOT SET\&quot;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;)))), mdx(&quot;h3&quot;, null, &quot;Set Environment Variables in Cloud Foundry&quot;), mdx(&quot;p&quot;, null, &quot;Deploy the app to see what happens in production:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, &quot;cf push -p build/libs/pal-tracker.jar&quot;))), mdx(&quot;p&quot;, null, &quot;The app will crash because the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;WELCOME_MESSAGE&quot;), &quot; environment variable isn&apos;t set. The environment variable can be set using &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;cf set-env&quot;), &quot; then restaging:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, &quot;cf set-env pal-tracker WELCOME_MESSAGE hi\ncf restage pal-tracker &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# no need to re-push&quot;)))), mdx(&quot;p&quot;, null, &quot;Now when you check the Cloud Foundry endpoint, it will have the actual values:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;json&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-json&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-json&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token property&quot;
  }, &quot;\&quot;PORT\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;80\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token property&quot;
  }, &quot;\&quot;CF_INSTANCE_ADDR\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;1.2.3.4:80\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token property&quot;
  }, &quot;\&quot;CF_INSTANCE_INDEX\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;1\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token property&quot;
  }, &quot;\&quot;MEMORY_LIMIT\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;1GB\&quot;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;)))), mdx(&quot;h2&quot;, null, &quot;3. Scale your Cloud Foundry App&quot;), mdx(&quot;p&quot;, null, &quot;Scaling can be done horizontally, vertically, or both using the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;cf scale&quot;), &quot; command:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# Scale to 3 instances, 2GB storage, 1024M memory and force a restart&quot;), &quot;\ncf scale APP -i &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;3&quot;), &quot; -k 2G -m 1024M -f&quot;))), mdx(&quot;p&quot;, null, &quot;Check on the process by running &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;cf app pal-tracker&quot;), &quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;4. Use a Manifest File&quot;), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://docs.cloudfoundry.org/devguide/deploy-apps/manifest.html&quot;
  }, &quot;manifest.yml&quot;), &quot; specified an application&apos;s environment defaults, so they only need to be managed with the CLI if they need to be overridden. Rather than setting the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;WELCOME_MESSAGE&quot;), &quot; value using &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;cf set-env&quot;), &quot;, the value can be specified in the &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;manifest.yml&quot;), &quot;:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;yaml&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-yaml&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-yaml&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;---&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;applications&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;-&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;name&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; pal&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;-&quot;), &quot;tracker\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;path&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; build/libs/pal&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;-&quot;), &quot;tracker.jar\n  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;env&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token key atrule&quot;
  }, &quot;WELCOME_MESSAGE&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; Hello from the Manifest&quot;))), mdx(&quot;p&quot;, null, &quot;Run &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;cf push&quot;), &quot; again to see the updated &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;WELCOME_MESSAGE&quot;), &quot; value in the CF environment.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Deploy Spring Boot Apps to Pivotal Cloud Foundry (PCF)]]></title><description><![CDATA[Recipe: PCF Cloud Native App This recipe is based on the  PAL Tracker  example project. 1. Create the PCF Developer Environment Developing…]]></description><link>https://www.jamestharpe.com/cloud-foundry-spring-boot/</link><guid isPermaLink="false">https://www.jamestharpe.com/cloud-foundry-spring-boot/</guid><pubDate>Mon, 14 Jan 2019 22:06:34 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2019-01-14T22:06:34.000Z&quot;,
  &quot;redirect_from&quot;: [&quot;/pcf-spring-boot-basics/&quot;],
  &quot;tags&quot;: [&quot;java&quot;, &quot;spring-boot&quot;, &quot;cloud-foundry&quot;, &quot;pal-tracker&quot;, &quot;intellij&quot;],
  &quot;title&quot;: &quot;Deploy Spring Boot Apps to Pivotal Cloud Foundry (PCF)&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Recipe: PCF Cloud Native App&quot;), mdx(&quot;p&quot;, null, &quot;This recipe is based on the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../pal-tracker/&quot;
  }, &quot;PAL Tracker&quot;), &quot; example project.&quot;), mdx(&quot;h2&quot;, null, &quot;1. Create the PCF Developer Environment&quot;), mdx(&quot;p&quot;, null, &quot;Developing Spring apps for PAL \&quot;the Pivotal way\&quot; requires &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://git-scm.com/&quot;
  }, &quot;Git&quot;), &quot;, Java 8 or above, &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://www.jetbrains.com/idea/&quot;
  }, &quot;IntelliJ&quot;), &quot;, the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://github.com/cloudfoundry/cli/releases&quot;
  }, &quot;Cloud Foundry CLI&quot;), &quot;, &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://gradle.org/&quot;
  }, &quot;Gradle&quot;), &quot;, &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://www.mysql.com/downloads/&quot;
  }, &quot;MySQL&quot;), &quot;, and &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://flywaydb.org/&quot;
  }, &quot;Flyway&quot;), &quot;.&quot;), mdx(&quot;p&quot;, null, &quot;Once the tools are installed, log in to Cloud Foundry (CF):&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, &quot;cf login -a &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;${CF_API_ENDPOINT}&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# ... follow the prompts ...&quot;)))), mdx(&quot;p&quot;, null, &quot;From there, the CLI can be used to explore the Cloud Foundry environment. Here are a few useful commands:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, &quot;cf target &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# View the targeted organization or space&quot;), &quot;\ncf apps &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# List applications in the target CF space&quot;), &quot;\ncf services &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# List services in the target CF space&quot;), &quot;\ncf marketplace &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# List services that can added to the target CF space&quot;)))), mdx(&quot;p&quot;, null, &quot;Additional information: &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://github.com/platform-acceleration-lab/prerequisite-code&quot;
  }, &quot;Platform Acceleration Lab&quot;)), mdx(&quot;h2&quot;, null, &quot;2. Create a Spring Boot Application&quot;), mdx(&quot;p&quot;, null, &quot;Start with Gradle:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, &quot;gradle wrapper\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;touch&quot;), &quot; build.gradle&quot;))), mdx(&quot;p&quot;, null, &quot;Open the project in IntelliJ using &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;File &gt; Open&quot;), &quot; rather than the import feature.&quot;), mdx(&quot;p&quot;, null, &quot;In IntelliJ, update the &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;build.gradle&quot;), &quot; file to use the Java plug-in, reference the Maven Central repository, and apply the latest &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://docs.spring.io/spring-boot/docs/2.1.2.RELEASE/gradle-plugin/reference/html/&quot;
  }, &quot;Spring Boot Gradle plug-in&quot;), &quot;:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;groovy&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-groovy&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-groovy&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Gradle Configuration&quot;), &quot;\n\nbuildscript &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\text &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Set Spring Boot version as variable&quot;), &quot;\n\t\tspringBootVersion &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string gstring&quot;
  }, &quot;\&quot;2.0.6.RELEASE\&quot;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n\n\trepositories &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Use Maven Central to get required packages&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;mavenCentral&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n\n\tdependencies &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Add specified version of Spring Boot to class path&quot;), &quot;\n\t\tclasspath &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string gstring&quot;
  }, &quot;\&quot;org.springframework.boot:spring-boot-gradle-plugin:&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token expression&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;$&quot;), &quot;springBootVersion&quot;), &quot;\&quot;&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// PAL Tracker Configuration&quot;), &quot;\n\nplugins &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// It&apos;s a Java Project!&quot;), &quot;\n\tid &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string gstring&quot;
  }, &quot;\&quot;java\&quot;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Apply the Spring Framework plug-in&quot;), &quot;\napply plugin&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&apos;org.springframework.boot&apos;&quot;), &quot;\n\nrepositories &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Use Maven Central to get required packages&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;mavenCentral&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n\ndependencies &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Add specified version of Spring Boot to class path&quot;), &quot;\n\t&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;compile&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string gstring&quot;
  }, &quot;\&quot;org.springframework.boot:spring-boot-starter-web:&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token expression&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;$&quot;), &quot;springBootVersion&quot;), &quot;\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n&quot;))), mdx(&quot;p&quot;, null, &quot;Next, create a file &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;settings.gradle&quot;), &quot; to set the name of the Gradle project. This determines the name of the JAR file when the application is built:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;groovy&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-groovy&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-groovy&quot;
  }, &quot;rootProject&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;name &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;=&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string gstring&quot;
  }, &quot;\&quot;pal-tracker\&quot;&quot;)))), mdx(&quot;h3&quot;, null, &quot;Gradle Project Structure&quot;), mdx(&quot;p&quot;, null, &quot;Create a minimal &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html&quot;
  }, &quot;standard Maven directory layout&quot;), &quot;:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;mkdir&quot;), &quot; -p src/main/java&quot;))), mdx(&quot;p&quot;, null, &quot;Use IntelliJ to create a new package called &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;io.pivotal.pal.tracker&quot;), &quot;. This might require setting &apos;src/main/java` as the \&quot;Sources Root\&quot; first:&quot;), mdx(&quot;p&quot;, null, mdx(&quot;img&quot;, {
    parentName: &quot;p&quot;,
    &quot;src&quot;: &quot;../img/intellij-sources-root.png&quot;,
    &quot;alt&quot;: &quot;Set IntelliJ sources root&quot;
  })), mdx(&quot;p&quot;, null, &quot;With the basic project structure established, we can create a class for our application called &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;PalTrackerApplication&quot;), &quot;:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;java&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-java&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-java&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;package&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;io&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;pivotal&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;pal&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;tracker&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;import&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;org&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;springframework&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;boot&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;SpringApplication&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;import&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;org&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;springframework&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;boot&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;autoconfigure&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;SpringBootApplication&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Tell Spring Boot that this is our main entry point&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token annotation punctuation&quot;
  }, &quot;@SpringBootApplication&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;public&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;class&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;PalTrackerApplication&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;public&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;static&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;void&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;main&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;String&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;[&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;]&quot;), &quot; args&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n        &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Start the app&quot;), &quot;\n        &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;SpringApplication&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;run&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;PalTrackerApplication&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;class&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), &quot; args&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Later: Register beans with @Bean&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;)))), mdx(&quot;p&quot;, null, &quot;The &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;@SpringBootApplication&quot;), &quot; annotation tells Spring Boot that this class contains the main entrypoint of the application. The call to &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;SpringApplication.run(...)&quot;), &quot; is boiler-plate to tell Spring to scan for the necessary components that will be &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://martinfowler.com/articles/injection.html&quot;
  }, &quot;injected&quot;), &quot; into the controllers and other classes that make up the application.&quot;), mdx(&quot;p&quot;, null, &quot;It&apos;s now possible to run the application, though you&apos;ll receive the generic Spring Boot Whitelabel Error Page.&quot;), mdx(&quot;p&quot;, null, &quot;To make running the application, and later tests, easier you can delegate these actions to Gradle in IntelliJ under &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;File &gt; Settings &gt; Build, Execution, Deployment &gt; Gradle &gt; Runner&quot;), &quot;:&quot;), mdx(&quot;p&quot;, null, mdx(&quot;img&quot;, {
    parentName: &quot;p&quot;,
    &quot;src&quot;: &quot;../img/intellij-delegate-build-run-gradle.png&quot;,
    &quot;alt&quot;: &quot;Delegate build run and test actions to Gradle in IntelliJ&quot;
  })), mdx(&quot;h3&quot;, null, &quot;Create a REST Controller&quot;), mdx(&quot;p&quot;, null, &quot;With the basic project structure in place, we can create a simple REST controller by generating a new Java class and annotating it:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;java&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-java&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-java&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;package&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;io&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;pivotal&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;pal&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;tracker&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;import&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;org&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;springframework&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;web&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;bind&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;annotation&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;GetMapping&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;import&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;org&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;springframework&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;web&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;bind&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;annotation&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;)), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;RestController&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Tells spring that this controller provides REST end-points&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token annotation punctuation&quot;
  }, &quot;@RestController&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;public&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;class&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;WelcomeController&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;// Maps \&quot;GET\&quot; requests to the application root&quot;), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token annotation punctuation&quot;
  }, &quot;@GetMapping&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;/\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;public&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token class-name&quot;
  }, &quot;String&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;sayHello&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n        &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;return&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;hello\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;;&quot;), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;)))), mdx(&quot;p&quot;, null, &quot;When the application is run and launched in the browser, the \&quot;hello\&quot; string is returned.&quot;), mdx(&quot;h2&quot;, null, &quot;3. Push to Cloud Foundry&quot;), mdx(&quot;p&quot;, null, &quot;Build and deploy the application to Cloud Foundry:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, &quot;./gradlew build &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# build the JAR&quot;), &quot;\ncf push -p build/libs/pal-tracker.jar &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# deploy to CF&quot;)))), mdx(&quot;p&quot;, null, &quot;Get the application status:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, &quot;cf app pal-tracker &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# Get application status&quot;)))), mdx(&quot;p&quot;, null, &quot;Get recent log output from the app:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, &quot;cf logs --recent&quot;))), mdx(&quot;p&quot;, null, &quot;The output of &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;cf push&quot;), &quot; will include a URL. Opening the URL in a web browser should bring up the application.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Docker: Fix Invalid Bind Mount Spec in Git Bash]]></title><description><![CDATA[Error response from daemon: invalid bind mount spec The call to  docker run  using  Git Bash  on Windows was recently frustrating me when I…]]></description><link>https://www.jamestharpe.com/docker-fix-invalid-bind-mount-spec-gitbash/</link><guid isPermaLink="false">https://www.jamestharpe.com/docker-fix-invalid-bind-mount-spec-gitbash/</guid><pubDate>Tue, 07 Nov 2017 18:44:06 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;title&quot;: &quot;Docker: Fix Invalid Bind Mount Spec in Git Bash&quot;,
  &quot;date&quot;: &quot;2017-11-07T18:44:06.000Z&quot;,
  &quot;tags&quot;: [&quot;docker&quot;, &quot;git-bash&quot;]
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Error response from daemon: invalid bind mount spec&quot;), mdx(&quot;p&quot;, null, &quot;The call to &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;docker run&quot;), &quot; using &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../git-bash/&quot;
  }, &quot;Git Bash&quot;), &quot; on Windows was recently frustrating me when I tried to specify a volume using &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;-v&quot;), &quot;:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, &quot;$ &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;docker&quot;), &quot; run -it -v /c/Users/james/Code/my-application:/app james/test-container &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;sh&quot;), &quot;\nC:&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\\&quot;), &quot;Program Files&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\\&quot;), &quot;Docker&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\\&quot;), &quot;Docker&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\\&quot;), &quot;Resources&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\\&quot;), &quot;bin&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;\\&quot;), &quot;docker.exe: Error response from daemon: invalid &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;bind&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;mount&quot;), &quot; spec &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;/C/Users/james/Code/my-application;C:&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token entity&quot;,
    &quot;title&quot;: &quot;\\\\&quot;
  }, &quot;\\\\&quot;), &quot;Program Files&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token entity&quot;,
    &quot;title&quot;: &quot;\\\\&quot;
  }, &quot;\\\\&quot;), &quot;Git&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token entity&quot;,
    &quot;title&quot;: &quot;\\\\&quot;
  }, &quot;\\\\&quot;), &quot;app\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;:&quot;), &quot; invalid volume specification: &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&apos;/C/Users/james/Code/my-app;C:\\Program Files\\Git\\app&apos;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;:&quot;), &quot; invalid &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;mount&quot;), &quot; config &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;for&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;type&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;bind\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;:&quot;), &quot; invalid &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;mount&quot;), &quot; path: &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&apos;\\Program Files\\Git\\app&apos;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;mount&quot;), &quot; path must be absolute.\nSee &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&apos;C:\\Program Files\\Docker\\Docker\\Resources\\bin\\docker.exe run --help&apos;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;.&quot;)))), mdx(&quot;p&quot;, null, &quot;I tried multiple formats for the path, but ultimately discovered that it is necessary to prefix the path with an extra slash (&quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;/&quot;), &quot;), like so:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;docker&quot;), &quot; run -it -v //c/Users/james/Code/my-application:/app james/test-container &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;sh&quot;)))), mdx(&quot;p&quot;, null, &quot;This is necessary when using &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;pwd&quot;), &quot; as well, for example:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;docker&quot;), &quot; run -it -v /&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;pwd&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;)&quot;)), &quot;:/app james/test-container &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;sh&quot;)))), mdx(&quot;p&quot;, null, &quot;The syntax to mount a docker volume to the current parent directory turned out to be quite interesting as well:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;docker&quot;), &quot; run -it -v /&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;pwd&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;)&quot;)), &quot;/&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;..&quot;), &quot;:/app james/test-container &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;sh&quot;)))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Markdown Code Comments]]></title><description><![CDATA[How to Comment a Markdown File Markdown doesn't include specific syntax for comments, but there is a workaround using the  reference style…]]></description><link>https://www.jamestharpe.com/markdown-comments/</link><guid isPermaLink="false">https://www.jamestharpe.com/markdown-comments/</guid><pubDate>Thu, 26 Oct 2017 22:17:11 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2017-10-26T22:17:11.000Z&quot;,
  &quot;redirect_from&quot;: [&quot;/code-comments-markdown/&quot;],
  &quot;tags&quot;: [&quot;markdown&quot;],
  &quot;title&quot;: &quot;Markdown Code Comments&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;How to Comment a Markdown File&quot;), mdx(&quot;p&quot;, null, &quot;Markdown doesn&apos;t include specific syntax for comments, but there is a workaround using the &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://daringfireball.net/projects/markdown/syntax#link&quot;
  }, &quot;reference style links&quot;), &quot; syntax. Using this syntax, the &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;comments will not be output to the resulting HTML&quot;), &quot;.&quot;), mdx(&quot;p&quot;, null, &quot;Here are a few examples:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;markdown&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-markdown&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-markdown&quot;
  }, &quot;[]: # (This is a comment)\n[]: # \&quot;And this is a comment\&quot;\n[]: # &apos;Also this is a comment&apos;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token url-reference url&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;[&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;//&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;]&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; # &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;(Yet another comment)&quot;)), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token url-reference url&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;[&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;comment&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;]&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;:&quot;), &quot; # &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;(Still another comment)&quot;))))), mdx(&quot;p&quot;, null, &quot;Each of these lines works the same way:&quot;), mdx(&quot;ul&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;[...]:&quot;), &quot; identifies a reference link (that won&apos;t be used in the article)&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;#&quot;), &quot; defines the destination, in this case &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;#&quot;), &quot; is the shortest valid value for a URL&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;(...)&quot;), &quot;, &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;\&quot;...\&quot;&quot;), &quot;, and &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;&apos;...&apos;&quot;), &quot;define the reference title, which we repurpose to make a comment&quot;)), mdx(&quot;p&quot;, null, &quot;While this is the best approach that I&apos;m aware of, it doesn&apos;t allow multi-line comments and each comment must appear on it&apos;s own line.&quot;), mdx(&quot;p&quot;, null, &quot;I personally prefer to use &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;[//]: #&quot;), &quot; since, as a software developer, I tend to associate &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;//&quot;), &quot; with comment syntax.&quot;), mdx(&quot;h2&quot;, null, &quot;Adding HTML Comments in Markdown&quot;), mdx(&quot;p&quot;, null, &quot;If you&apos;d like for your comments to show up in the HTML output, a simple modified HTML comment syntax will work:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;markdown&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-markdown&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-markdown&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;&lt;!--- This is an HTML comment in Markdown --&gt;&quot;)))), mdx(&quot;p&quot;, null, &quot;Unlike a \&quot;normal\&quot; HTML comment which opens with &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;&lt;!--&quot;), &quot; (two dashes), an HTML comment in Markdown opens with &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;&lt;!---&quot;), &quot; (three dashes). Some Markdown parsers support two-dash HTML comments, but the three-dash version is more universally compatible.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Include Files Outside Docker Build Context]]></title><description><![CDATA["Forbidden path outside the build context" I was recently attempting to Dockerize a Node project, so I added a  docker  folder to the…]]></description><link>https://www.jamestharpe.com/docker-include-files-outside-build-context/</link><guid isPermaLink="false">https://www.jamestharpe.com/docker-include-files-outside-build-context/</guid><pubDate>Thu, 26 Oct 2017 21:33:25 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2017-10-26T21:33:25.000Z&quot;,
  &quot;redirect_from&quot;: [&quot;/include-files-outside-docker-build-context/&quot;],
  &quot;tags&quot;: [&quot;docker&quot;],
  &quot;title&quot;: &quot;Include Files Outside Docker Build Context&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;\&quot;Forbidden path outside the build context\&quot;&quot;), mdx(&quot;p&quot;, null, &quot;I was recently attempting to Dockerize a Node project, so I added a &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;docker&quot;), &quot; folder to the project and created a simple &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;Dockerfile&quot;), &quot; to get started:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;dockerfile&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-dockerfile&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-dockerfile&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token instruction&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;FROM&quot;), &quot;  node:alpine&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token instruction&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;WORKDIR&quot;), &quot; /app&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token instruction&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;COPY&quot;), &quot; ../ ./&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token instruction&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;RUN&quot;), &quot; npm install&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token instruction&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;EXPOSE&quot;), &quot; 80&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token instruction&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;ENTRYPOINT&quot;), &quot; [ &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;npm\&quot;&quot;), &quot;, &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;start\&quot;&quot;), &quot; ]&quot;)))), mdx(&quot;p&quot;, null, &quot;However, when I tried to build the image, I got the following output:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, &quot;$ &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;docker&quot;), &quot; build -t node-app &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;.&quot;), &quot;\nSending build context to Docker daemon  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;53&quot;), &quot;.76kB\nStep &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;1&quot;), &quot;/6 &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;:&quot;), &quot; FROM node:alpine\n ---&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;&gt;&quot;), &quot; 04a3ba95f191\nStep &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;2&quot;), &quot;/6 &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;:&quot;), &quot; WORKDIR /app\n ---&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;&gt;&quot;), &quot; 85fff9a66b84\nRemoving intermediate container e2c838595c90\nStep &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;3&quot;), &quot;/6 &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;:&quot;), &quot; COPY &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;..&quot;), &quot;/ ./\nCOPY failed: Forbidden path outside the build context: &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;..&quot;), &quot;/ &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;)))), mdx(&quot;p&quot;, null, &quot;Note the error: &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;COPY failed: Forbidden path outside the build context: ../ ()&quot;)), mdx(&quot;p&quot;, null, &quot;According to Docker&apos;s &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://docs.docker.com/engine/reference/builder/#copy&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;a&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;COPY&quot;), &quot; documentation&quot;), &quot;:&quot;), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;COPY&quot;), &quot; obeys the following rules:&quot;), mdx(&quot;ul&quot;, {
    parentName: &quot;blockquote&quot;
  }, mdx(&quot;li&quot;, {
    parentName: &quot;ul&quot;
  }, &quot;The &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;&lt;src&gt;&quot;), &quot; path must be inside the context of the build; you cannot &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;COPY ../something /something&quot;), &quot;, because the first step of a &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;li&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;docker build&quot;), &quot; is to send the context directory (and subdirectories) to the docker daemon.&quot;))), mdx(&quot;p&quot;, null, &quot;It turns out that &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;you cannot include files outside Docker&apos;s build context&quot;), &quot;. However, you &quot;, mdx(&quot;em&quot;, {
    parentName: &quot;p&quot;
  }, &quot;can&quot;), &quot; copy files from the Dockerfile&apos;s parent directory.&quot;), mdx(&quot;h2&quot;, null, &quot;How to &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;h2&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;COPY&quot;), &quot; Files from the Dockerfile Parent Directory&quot;), mdx(&quot;p&quot;, null, &quot;I tried several combinations of command line arguments to include the parent directory in the context, and finally landed on the solution: start from the parent directory, and pass the Dockerfile as an argument.&quot;), mdx(&quot;p&quot;, null, &quot;To do this, first update the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;COPY&quot;), &quot; command to use the current (&quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;./&quot;), &quot;) directory:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;dockerfile&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-dockerfile&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-dockerfile&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token instruction&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;FROM&quot;), &quot;  node:alpine&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token instruction&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;WORKDIR&quot;), &quot; /app&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token instruction&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;COPY&quot;), &quot; ./ ./&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token instruction&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;RUN&quot;), &quot; npm install&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token instruction&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;EXPOSE&quot;), &quot; 80&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token instruction&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;ENTRYPOINT&quot;), &quot; [ &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;npm\&quot;&quot;), &quot;, &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;start\&quot;&quot;), &quot; ]&quot;)))), mdx(&quot;p&quot;, null, &quot;Next, &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;cd ..&quot;), &quot; into the parent directory and run &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;docker build&quot;), &quot;:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, &quot;~/Code/node-app/docker\n$ &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;cd&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;..&quot;), &quot;\n\n~/Code/node-app\n$ &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;docker&quot;), &quot; build -t node-app -f docker/Dockerfile &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token builtin class-name&quot;
  }, &quot;.&quot;), &quot;\nSending build context to Docker daemon  &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token number&quot;
  }, &quot;263&quot;), &quot;.7MB\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;..&quot;), &quot;.\nSuccessfully built d296bf765369\nSuccessfully tagged node-app:latest&quot;))), mdx(&quot;p&quot;, null, &quot;Success!&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Automatically Build a Developer Environment on Windows]]></title><description><![CDATA[A step-by-step guide to automate tool and framework installation for developers that use Windows]]></description><link>https://www.jamestharpe.com/automated-developer-environment/</link><guid isPermaLink="false">https://www.jamestharpe.com/automated-developer-environment/</guid><pubDate>Mon, 18 Sep 2017 15:42:46 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2017-09-18T15:42:46.000Z&quot;,
  &quot;description&quot;: &quot;A step-by-step guide to automate tool and framework installation for developers that use Windows&quot;,
  &quot;redirect_from&quot;: [&quot;/automatic-development-environment-setup/&quot;, &quot;/techniques/everything-in-version-control/&quot;, &quot;/techniques/grows/&quot;],
  &quot;tags&quot;: [&quot;powershell&quot;, &quot;chocolatey&quot;],
  &quot;title&quot;: &quot;Automatically Build a Developer Environment on Windows&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Automate Your Development Environment Setup&quot;), mdx(&quot;p&quot;, null, &quot;Starting from a fresh OS installation, manually installing and configuring a full development environment can take several days. Even then, it&apos;s easy to forget some bit of configuration or forget to install some critical software. Automation makes it easy to save a ton of time and minimize disruption.&quot;), mdx(&quot;p&quot;, null, &quot;Most of the software I write is developed on Windows, so I decided to write the script using PowerShell and &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://chocolatey.org/&quot;
  }, &quot;Chocolatey&quot;), &quot;. MacOS users can follow a similar pattern using &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://brew.sh/&quot;
  }, &quot;Homebrew&quot;), &quot;.&quot;), mdx(&quot;h2&quot;, null, &quot;Overview of the Automation Process&quot;), mdx(&quot;p&quot;, null, &quot;The goal of the script is to start from a base OS installation and finish with a complete development environment. To write the script, it&apos;s easiest to use a write-test-tweak approach:&quot;), mdx(&quot;ol&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;Write a command in the PowerShell ISE (running elevated)&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;Copy-paste the command from the script into the shell panel and execute it&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;Tweak the command if needed&quot;)), mdx(&quot;p&quot;, null, &quot;Once your script is completed, you can easily maintain it by following the same process every time you install a new tool or adjust a setting. I prefer to store my script in OneDrive for easy access from a base Windows installation (which includes OneDrive), but I also check it in to GitHub to share with the world.&quot;), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Warning&quot;), &quot;: If your development environment is already setup manually, installing software via Chocolatey can sometimes cause conflicts. It&apos;s best to uninstall any applications you&apos;ll be managing with Chocolatey, then reinstall with Chocolatey (or just start from scratch).&quot;)), mdx(&quot;h2&quot;, null, &quot;Basic Script Structure&quot;), mdx(&quot;p&quot;, null, &quot;I&apos;ve broken &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://github.com/jamestharpe/windows-development-environment/blob/main/env-windows.ps1&quot;
  }, &quot;my script&quot;), &quot; into four sections:&quot;), mdx(&quot;ol&quot;, null, mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;Utility methods&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;Chocolatey install&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;Configure Windows settings&quot;), mdx(&quot;li&quot;, {
    parentName: &quot;ol&quot;
  }, &quot;Install and configure tools&quot;)), mdx(&quot;h2&quot;, null, &quot;Utility Method: Refresh the PATH environment variable in PowerShell&quot;), mdx(&quot;p&quot;, null, &quot;Many of the tools you&apos;ll instal will have dependencies, which need to be available via the Windows PATH environment variable for the script to succeed. PowerShell does not automatically pick up changes to the PATH. To do that, this simple utility function will help:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;powershell&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-powershell&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-powershell&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;function&quot;), &quot; RefreshEnvPath\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$env&quot;), &quot;:Path = &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;[System.Environment]&quot;), &quot;::GetEnvironmentVariable&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;Path\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;Machine\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot; `\n        &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;+&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;;\&quot;&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;+&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;[System.Environment]&quot;), &quot;::GetEnvironmentVariable&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;Path\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;User\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;)))), mdx(&quot;p&quot;, null, &quot;This method simply re-reads the Machine and User &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;Path&quot;), &quot; environment variables, concatenates them, and stores them in the variable PowerShell uses to read the PATH.&quot;), mdx(&quot;h2&quot;, null, &quot;Script to Install Chocolatey&quot;), mdx(&quot;p&quot;, null, &quot;The next addition to the script is to install Chocolatey (choco, for short):&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;powershell&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-powershell&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-powershell&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;iex&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;New-Object&quot;), &quot; System&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;Net&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;WebClient&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;DownloadString&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;&apos;https://chocolatey.org/install.ps1&apos;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;\nRefreshEnvPath&quot;))), mdx(&quot;p&quot;, null, &quot;Note the call to &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;RefreshEnvPath&quot;), &quot;: That ensures the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;choco&quot;), &quot; command will run without having to start a new PowerShell window.&quot;), mdx(&quot;h2&quot;, null, &quot;Script to Configure Windows Settings&quot;), mdx(&quot;p&quot;, null, &quot;The Windows Explorer default settings don&apos;t work well for most developers. The following script will show file extensions and hidden files:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;powershell&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-powershell&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-powershell&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# Navigate registry&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;Push-Location&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;Set-Location&quot;), &quot; HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# Show file extensions&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;Set-ItemProperty&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot; HideFileExt &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;0\&quot;&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# Show hidden files&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;Set-ItemProperty&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot; Hidden &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;1\&quot;&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;Pop-Location&quot;), &quot;\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# Force Windows Explorer restart so settings take effect&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;Stop-Process&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;-&quot;), &quot;processName: Explorer &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;-&quot;), &quot;force&quot;))), mdx(&quot;h2&quot;, null, &quot;Script to Install Developer Tools&quot;), mdx(&quot;p&quot;, null, &quot;With Chocolaty installed, to install development tools requires a simple call to &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;choco install [tool name] --yes&quot;), &quot;. The &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;--yes&quot;), &quot; flag is required so that the script doesn&apos;t prompt you to approve each installation before proceeding. For example, to install Visual Studio Code, simply run:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;powershell&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-powershell&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-powershell&quot;
  }, &quot;choco install vscode &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;--&quot;), &quot;yes&quot;))), mdx(&quot;p&quot;, null, &quot;When installing a tool that needs to be configured or is a prerequisite of another tool, remember to call &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;RefreshEnvPath&quot;), &quot; before proceeding, or your script will error out.&quot;), mdx(&quot;h3&quot;, null, &quot;Script to Customize VS Code&quot;), mdx(&quot;p&quot;, null, &quot;Vanilla Visual Studio Code isn&apos;t very interesting, so let&apos;s customize it by installing some common plug-ins. Here&apos;s what I install by default:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;powershell&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-powershell&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-powershell&quot;
  }, &quot;RefreshEnvPath\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# Pretty icons&quot;), &quot;\ncode &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;--&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;install-extension&quot;), &quot; robertohuertasm&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;vscode-icons\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# PowerShell&quot;), &quot;\ncode &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;--&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;install-extension&quot;), &quot; ms-vscode&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;PowerShell\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# HTML, CSS, JS&quot;), &quot;\ncode &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;--&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;install-extension&quot;), &quot; Zignd&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;html-css-&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;class&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;-&quot;), &quot;completion\ncode &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;--&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;install-extension&quot;), &quot; lonefy&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;vscode-JS-CSS-HTML-formatter\ncode &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;--&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;install-extension&quot;), &quot; robinbentley&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;sass-indented\ncode &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;--&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;install-extension&quot;), &quot; dbaeumer&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;vscode-eslint\ncode &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;--&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;install-extension&quot;), &quot; steoates&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;autoimport\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# TypeScript&quot;), &quot;\ncode &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;--&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;install-extension&quot;), &quot; eg2&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;tslint\ncode &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;--&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;install-extension&quot;), &quot; johnpapa&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;Angular2\n\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token comment&quot;
  }, &quot;# Docker&quot;), &quot;\ncode &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;--&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;install-extension&quot;), &quot; PeterJausovec&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;vscode-docker&quot;))), mdx(&quot;p&quot;, null, &quot;The commands to install VS Code extensions from PowerShell are slightly different compared to what you would put directly into the VS Code command pallet. To know what value to pass into the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;--install-extension&quot;), &quot; command, you can grab the fully qualified extension name from the Visual Studio Marketplace URL, like so:&quot;), mdx(&quot;p&quot;, null, mdx(&quot;img&quot;, {
    parentName: &quot;p&quot;,
    &quot;src&quot;: &quot;../img/vs-code-extension-fully-qualified-name_600x357.png&quot;,
    &quot;alt&quot;: &quot;Fully qualified VS code extension name example&quot;
  })), mdx(&quot;h2&quot;, null, &quot;Advanced Options&quot;), mdx(&quot;p&quot;, null, &quot;I recently configured a similar script for a large development team. Though the team uses a lot of required tools, they also have a lot options that boil down to personal preference. For example, some of the developers prefer IntelliJ while others prefer Eclipse.&quot;), mdx(&quot;p&quot;, null, &quot;This can be easily handled by accepting arguments and choosing wise defaults. As an example, let&apos;s install both by default but allow the user to specify the IDE as a command-line argument. Start by using &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;params&quot;), &quot; at the top of the script:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;powershell&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-powershell&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-powershell&quot;
  }, &quot;params&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token namespace&quot;
  }, &quot;[string[]]&quot;), &quot;\n    &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$ide&quot;), &quot;=@&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;intellij\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;,&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;eclipse\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;)))), mdx(&quot;p&quot;, null, &quot;Later on, we can read the argument:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;powershell&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-powershell&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-powershell&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;if&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$ide&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;-contains&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;intellij\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n    choco install intellijidea-ultimate &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;--&quot;), &quot;yes\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;), &quot;\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token keyword&quot;
  }, &quot;if&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$ide&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;-contains&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token string&quot;
  }, &quot;\&quot;eclipse\&quot;&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;)&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;{&quot;), &quot;\n    choco install eclipse &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;--&quot;), &quot;yes\n&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;}&quot;)))), mdx(&quot;p&quot;, null, &quot;Finally, the script can be called with the &quot;, mdx(&quot;code&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;language-text&quot;
  }, &quot;-ide&quot;), &quot; argument. Here&apos;s an example to install only Eclipse:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;powershell&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-powershell&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-powershell&quot;
  }, &quot;env-windows&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token punctuation&quot;
  }, &quot;.&quot;), &quot;ps1 &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token operator&quot;
  }, &quot;-&quot;), &quot;ide eclipse&quot;))), mdx(&quot;h2&quot;, null, &quot;A Full Example&quot;), mdx(&quot;p&quot;, null, &quot;You can view &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://github.com/jamestharpe/windows-development-environment/blob/main/env-windows.ps1&quot;
  }, &quot;the script&quot;), &quot; I use personally on &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://github.com/jamestharpe/&quot;
  }, &quot;my GitHub page&quot;), &quot; (MIT License). Contributions welcome!&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Useful Docker Commands]]></title><description><![CDATA[Useful Docker Shell Command and "Shortcuts" Start/Stop All Docker Containers This example starts then stops all containers: Remove All…]]></description><link>https://www.jamestharpe.com/docker-commands/</link><guid isPermaLink="false">https://www.jamestharpe.com/docker-commands/</guid><pubDate>Mon, 04 Sep 2017 10:24:27 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2017-09-04T10:24:27.000Z&quot;,
  &quot;redirect_from&quot;: [&quot;/useful-docker-shortcut-commands/&quot;],
  &quot;tags&quot;: [&quot;docker&quot;, &quot;shell&quot;],
  &quot;title&quot;: &quot;Useful Docker Commands&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Useful Docker Shell Command and \&quot;Shortcuts\&quot;&quot;), mdx(&quot;h2&quot;, null, &quot;Start/Stop All Docker Containers&quot;), mdx(&quot;p&quot;, null, &quot;This example starts then stops all containers:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, &quot;$ &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;docker&quot;), &quot; start &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;docker&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;ps&quot;), &quot; -aq&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;)&quot;)), &quot;\na12b34c5d678\nb23c46d6e789\nc34d57e7f790\n\n$ &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;docker&quot;), &quot; stop &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;docker&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;ps&quot;), &quot; -q&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;)&quot;)), &quot;\na12b34c5d678\nb23c46d6e789\nc34d57e7f790&quot;))), mdx(&quot;h2&quot;, null, &quot;Remove All Docker Images&quot;), mdx(&quot;p&quot;, null, &quot;This example removes all Docker images:&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, &quot;$ &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;docker&quot;), &quot; rmi &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;docker&quot;), &quot; image &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;ls&quot;), &quot; -q&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;)&quot;)), &quot;\nDeleted: sha256:4314bd051463a3bbd0debc5f4c94455582187a969b710e99bd425ad0b01d6e75\nDeleted: sha256:b51d913d9cc8529e31119787300e3858fb8e275b0fd763c3fc1e8346dc25bb2a\nDeleted: sha256:46510f51a25eeb15c9bdf3a1cc52561d88e35f3d59809260da1b1f6499babcb4\nDeleted: sha256:4b962de5545cfdec0724c35d5711060b1620bd22ec2d9cc4ed5589fd7beb178a&quot;))), mdx(&quot;blockquote&quot;, null, mdx(&quot;p&quot;, {
    parentName: &quot;blockquote&quot;
  }, &quot;Note: This will fail on images with running containers&quot;)), mdx(&quot;h2&quot;, null, &quot;Remove all Docker Containers&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, &quot;$ &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;docker&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;rm&quot;), &quot; -f &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;docker&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;ps&quot;), &quot; -aq&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;)&quot;)), &quot;\na12b34c5d678\nb23c46d6e789\nc34d57e7f790&quot;))), mdx(&quot;h3&quot;, null, &quot;Stop All Running Containers&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;docker&quot;), &quot; stop &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;docker&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;ps&quot;), &quot; -aq&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;)&quot;))))), mdx(&quot;h3&quot;, null, &quot;Remove all Stopped Containers&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;docker&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;rm&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;docker&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;ps&quot;), &quot; -aq&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;)&quot;))))), mdx(&quot;h2&quot;, null, &quot;Remove all Docker Networks&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, &quot;$ &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;docker&quot;), &quot; network &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;rm&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;docker&quot;), &quot; network &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;ls&quot;), &quot; -q&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;)&quot;)), &quot;\n4f0ae26eba78\n3a0bd36fab79\n3f1ad27eaa88&quot;))), mdx(&quot;h2&quot;, null, &quot;Remove all Docker Volumes&quot;), mdx(&quot;div&quot;, {
    &quot;className&quot;: &quot;gatsby-highlight&quot;,
    &quot;data-language&quot;: &quot;bash&quot;
  }, mdx(&quot;pre&quot;, {
    parentName: &quot;div&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, mdx(&quot;code&quot;, {
    parentName: &quot;pre&quot;,
    &quot;className&quot;: &quot;language-bash&quot;
  }, &quot;$ &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;docker&quot;), &quot; volume &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;rm&quot;), &quot; &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;code&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;$(&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;docker&quot;), &quot; volume &quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token function&quot;
  }, &quot;ls&quot;), &quot; -q&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;token variable&quot;
  }, &quot;)&quot;)), &quot;\nMyVolume1\nMyVolume2\nMyVolume3&quot;))));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item><item><title><![CDATA[Ohm's Law]]></title><description><![CDATA[A formula for determining voltage, current, and resistance]]></description><link>https://www.jamestharpe.com/ohms-law/</link><guid isPermaLink="false">https://www.jamestharpe.com/ohms-law/</guid><pubDate>Tue, 28 Mar 2017 21:42:46 GMT</pubDate><content:encoded>var _excluded = [&quot;components&quot;];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i &lt; arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i &lt; sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i &lt; sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) &gt;= 0) continue; target[key] = source[key]; } return target; }

/* @jsxRuntime classic */

/* @jsx mdx */
var _frontmatter = {
  &quot;date&quot;: &quot;2017-03-28T21:42:46.000Z&quot;,
  &quot;description&quot;: &quot;A formula for determining voltage, current, and resistance&quot;,
  &quot;tags&quot;: [&quot;electricity&quot;, &quot;current&quot;, &quot;voltage&quot;, &quot;resistance&quot;, &quot;conductance&quot;],
  &quot;title&quot;: &quot;Ohm&apos;s Law&quot;
};
var layoutProps = {
  _frontmatter: _frontmatter
};
var MDXLayout = &quot;wrapper&quot;;
return function MDXContent(_ref) {
  var components = _ref.components,
      props = _objectWithoutProperties(_ref, _excluded);

  return mdx(MDXLayout, _extends({}, layoutProps, props, {
    components: components,
    mdxType: &quot;MDXLayout&quot;
  }), mdx(&quot;h1&quot;, null, &quot;Ohm&apos;s Law&quot;), mdx(&quot;p&quot;, null, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;Ohm&apos;s Law&quot;), &quot; describes the relationship between &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../current/&quot;
  }, &quot;current&quot;), &quot; (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;I&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;I&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.07847em&quot;
    }
  }, &quot;I&quot;))))), &quot;), &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../voltage/&quot;
  }, &quot;voltage&quot;), &quot; (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;V&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;V&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.22222em&quot;
    }
  }, &quot;V&quot;))))), &quot;), and &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../resistance/&quot;
  }, &quot;resistance&quot;), &quot; (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;R&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;R&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.00773em&quot;
    }
  }, &quot;R&quot;))))), &quot;), so that &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;current&quot;), &quot;, which is the flow of &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../electricity/&quot;
  }, &quot;electricity&quot;), &quot;, is defined as:&quot;), mdx(&quot;p&quot;, null, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;I&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;V&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;R&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;I = V/R&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.07847em&quot;
    }
  }, &quot;I&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.22222em&quot;
    }
  }, &quot;V&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.00773em&quot;
    }
  }, &quot;R&quot;)))))), mdx(&quot;p&quot;, null, &quot;Given the values for any two variables, we solve for the third, so that &quot;, mdx(&quot;strong&quot;, {
    parentName: &quot;p&quot;
  }, &quot;voltage&quot;), &quot;, electrical potential energy, is defined as:&quot;), mdx(&quot;p&quot;, null, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;V&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;I&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;R&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;V = IR&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.22222em&quot;
    }
  }, &quot;V&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.07847em&quot;
    }
  }, &quot;I&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.00773em&quot;
    }
  }, &quot;R&quot;)))))), mdx(&quot;p&quot;, null, &quot;And &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../resistance/&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;a&quot;
  }, &quot;resistance&quot;)), &quot;, which impedes the flow of electricity, is:&quot;), mdx(&quot;p&quot;, null, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;R&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;V&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;I&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;R = V/I&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.00773em&quot;
    }
  }, &quot;R&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.22222em&quot;
    }
  }, &quot;V&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.07847em&quot;
    }
  }, &quot;I&quot;)))))), mdx(&quot;p&quot;, null, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;../conductance/&quot;
  }, mdx(&quot;strong&quot;, {
    parentName: &quot;a&quot;
  }, &quot;Conductance&quot;)), &quot; (&quot;, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;G&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;G&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;G&quot;))))), &quot;), which is the ability for a material to conduct electricity is defined as the inverse of resistance, and can therefore calculated by Ohm&apos;s Law as:&quot;), mdx(&quot;p&quot;, null, mdx(&quot;span&quot;, {
    parentName: &quot;p&quot;,
    &quot;className&quot;: &quot;math math-inline&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-mathml&quot;
  }, mdx(&quot;math&quot;, {
    parentName: &quot;span&quot;,
    &quot;xmlns&quot;: &quot;http://www.w3.org/1998/Math/MathML&quot;
  }, mdx(&quot;semantics&quot;, {
    parentName: &quot;math&quot;
  }, mdx(&quot;mrow&quot;, {
    parentName: &quot;semantics&quot;
  }, mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;G&quot;), mdx(&quot;mo&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;=&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;I&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;,
    &quot;mathvariant&quot;: &quot;normal&quot;
  }, &quot;/&quot;), mdx(&quot;mi&quot;, {
    parentName: &quot;mrow&quot;
  }, &quot;V&quot;)), mdx(&quot;annotation&quot;, {
    parentName: &quot;semantics&quot;,
    &quot;encoding&quot;: &quot;application/x-tex&quot;
  }, &quot;G = I/V&quot;)))), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;katex-html&quot;,
    &quot;aria-hidden&quot;: &quot;true&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;0.68333em&quot;,
      &quot;verticalAlign&quot;: &quot;0em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;
  }, &quot;G&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mrel&quot;
  }, &quot;=&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mspace&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.2777777777777778em&quot;
    }
  })), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;base&quot;
  }, mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;strut&quot;,
    &quot;style&quot;: {
      &quot;height&quot;: &quot;1em&quot;,
      &quot;verticalAlign&quot;: &quot;-0.25em&quot;
    }
  }), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.07847em&quot;
    }
  }, &quot;I&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord&quot;
  }, &quot;/&quot;), mdx(&quot;span&quot;, {
    parentName: &quot;span&quot;,
    &quot;className&quot;: &quot;mord mathnormal&quot;,
    &quot;style&quot;: {
      &quot;marginRight&quot;: &quot;0.22222em&quot;
    }
  }, &quot;V&quot;)))))), mdx(&quot;h2&quot;, null, &quot;Video: Circuits and Ohm&apos;s Law&quot;), mdx(&quot;iframe&quot;, {
    width: &quot;560&quot;,
    height: &quot;315&quot;,
    src: &quot;https://www.youtube.com/embed/F_vLWkkOETI&quot;,
    frameBorder: &quot;0&quot;,
    allow: &quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot;,
    allowFullScreen: true
  }), mdx(&quot;h2&quot;, null, &quot;History&quot;), mdx(&quot;p&quot;, null, &quot;Ohm&apos;s Law is named after &quot;, mdx(&quot;a&quot;, {
    parentName: &quot;p&quot;,
    &quot;href&quot;: &quot;https://en.wikipedia.org/wiki/Georg_Ohm&quot;
  }, &quot;Georg Simon Ohm&quot;), &quot;, who first derived the relationships now known as Ohm&apos;s Law.&quot;));
}
;
MDXContent.isMDXComponent = true;</content:encoded></item></channel></rss>