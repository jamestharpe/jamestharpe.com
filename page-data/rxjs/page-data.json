{"componentChunkName":"component---src-templates-article-tsx","path":"/rxjs/","result":{"data":{"markdownRemark":{"html":"<h1>RxJS</h1>\n<p><a href=\"https://rxjs.dev/\">RxJS</a> is a JavaScript library for composing observable sequences of events into a <a href=\"../reactive-programming/\">reactive</a> model.</p>\n<h2>Terminology</h2>\n<table>\n<thead>\n<tr>\n<th>Term</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Observable</td>\n<td>An object that emits events</td>\n</tr>\n<tr>\n<td>Observer</td>\n<td>A collection call-backs invoked by an Observable when an event is emitted</td>\n</tr>\n<tr>\n<td>Operator</td>\n<td>A <a href=\"../functional-programming/\">pure function</a> that transforms data emitted by an observable</td>\n</tr>\n<tr>\n<td>Pipe</td>\n<td></td>\n</tr>\n<tr>\n<td>Scheduler</td>\n<td></td>\n</tr>\n<tr>\n<td>Subject</td>\n<td></td>\n</tr>\n<tr>\n<td>Subscription</td>\n<td>The connection between an observable and observer</td>\n</tr>\n</tbody>\n</table>\n<h3>Observables</h3>\n<p><strong>Observables</strong> are sometimes referred to as \"observable sequences\" or \"streams\" and emit events either synchronously (immediately, when the event occurs) or asynchronously (some time after the event occurs).</p>\n<h3>Observers</h3>\n<p><strong>Observers</strong> \"observe\" events emitted by observables.</p>\n<table>\n<thead>\n<tr>\n<th>Function</th>\n<th>Purpose</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">next()</code></td>\n<td>Provide a callback to process an event emitted by an observable</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">error()</code></td>\n<td>Provide a callback to process an error emitted by an observable</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">complete()</code></td>\n<td>Provide a callback to process the end of the observable stream</td>\n</tr>\n</tbody>\n</table>\n<h3>Subscriptions</h3>\n<p><strong>Subscriptions</strong> connect observables to observers and are created by calling the <code class=\"language-text\">subscribe</code> method on an observable and passing it an observer. Events are only emitted to an observer that has subscribed to an observable.</p>\n<p>Subscriptions are stopped when:</p>\n<ul>\n<li>The <code class=\"language-text\">complete()</code> method is called on the observer</li>\n<li>A completing operator is used (for example, <code class=\"language-text\">of</code>, <code class=\"language-text\">from</code>, or <code class=\"language-text\">take</code>)</li>\n<li>An uncaught error occurs</li>\n<li>When <code class=\"language-text\">unsubscribe()</code> is called on a subscription</li>\n</ul>","fields":{"slug":"/rxjs/"},"frontmatter":{"title":"RxJS","tags":["javascript","reactive-programming"]}}},"pageContext":{"slug":"/rxjs/"}},"staticQueryHashes":["2270328656","3794076007","80858887"]}