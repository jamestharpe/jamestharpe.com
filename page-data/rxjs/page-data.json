{"componentChunkName":"component---src-templates-article-tsx","path":"/rxjs/","result":{"data":{"mdx":{"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"date\": \"2020-01-25T12:39:26.000Z\",\n  \"description\": \"A library to create state machines and state charts written in JavaScript\",\n  \"tags\": [\"javascript\", \"reactive-programming\"],\n  \"title\": \"RxJS\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"RxJS\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://rxjs.dev/\"\n  }, \"RxJS\"), \" is a JavaScript library for composing observable sequences of events into a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../reactive-programming/\"\n  }, \"reactive\"), \" model.\"), mdx(\"h2\", null, \"Terminology\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Term\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Meaning\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Observable\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"An object that emits events\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Observer\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"A collection call-backs invoked by an Observable when an event is emitted\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Operator\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"A \", mdx(\"a\", {\n    parentName: \"td\",\n    \"href\": \"../functional-programming/\"\n  }, \"pure function\"), \" that transforms data emitted by an observable\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Pipe\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Scheduler\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Subject\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Subscription\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The connection between an observable and observer\")))), mdx(\"h3\", null, \"Observables\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Observables\"), \" are sometimes referred to as \\\"observable sequences\\\" or \\\"streams\\\" and emit events either synchronously (immediately, when the event occurs) or asynchronously (some time after the event occurs).\"), mdx(\"h3\", null, \"Observers\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Observers\"), \" \\\"observe\\\" events emitted by observables.\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Function\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Purpose\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"code\", {\n    parentName: \"td\",\n    \"className\": \"language-text\"\n  }, \"next()\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Provide a callback to process an event emitted by an observable\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"code\", {\n    parentName: \"td\",\n    \"className\": \"language-text\"\n  }, \"error()\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Provide a callback to process an error emitted by an observable\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"code\", {\n    parentName: \"td\",\n    \"className\": \"language-text\"\n  }, \"complete()\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Provide a callback to process the end of the observable stream\")))), mdx(\"h3\", null, \"Subscriptions\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Subscriptions\"), \" connect observables to observers and are created by calling the \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"subscribe\"), \" method on an observable and passing it an observer. Events are only emitted to an observer that has subscribed to an observable.\"), mdx(\"p\", null, \"Subscriptions are stopped when:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \", mdx(\"code\", {\n    parentName: \"li\",\n    \"className\": \"language-text\"\n  }, \"complete()\"), \" method is called on the observer\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A completing operator is used (for example, \", mdx(\"code\", {\n    parentName: \"li\",\n    \"className\": \"language-text\"\n  }, \"of\"), \", \", mdx(\"code\", {\n    parentName: \"li\",\n    \"className\": \"language-text\"\n  }, \"from\"), \", or \", mdx(\"code\", {\n    parentName: \"li\",\n    \"className\": \"language-text\"\n  }, \"take\"), \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"An uncaught error occurs\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When \", mdx(\"code\", {\n    parentName: \"li\",\n    \"className\": \"language-text\"\n  }, \"unsubscribe()\"), \" is called on a subscription\")));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/rxjs/"},"frontmatter":{"description":"A library to create state machines and state charts written in JavaScript","tags":["javascript","reactive-programming"],"title":"RxJS"}}},"pageContext":{"slug":"/rxjs/"}},"staticQueryHashes":["3772659826","3794076007","80858887"]}