{"componentChunkName":"component---src-templates-article-tsx","path":"/python-venvs/","result":{"data":{"mdx":{"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"date\": \"2021-11-22T17:00:54.000Z\",\n  \"description\": \"How to manage virtual environments with Python, Pip, and VEnv\",\n  \"tags\": [\"python\", \"python-pip\"],\n  \"title\": \"Python Virtual Environments\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Virtual environments with Python, Pip, and VEnv\"), mdx(\"p\", null, \"In \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../python/\"\n  }, \"Python\"), \" development, a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"virtual environment\"), \" is an isolated context for \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../python-pip/\"\n  }, \"installing Python packages\"), \". As of Python 3.3, \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"venv\"), \" is included to help manage virtual environments.\"), mdx(\"h2\", null, \"Create and use a virtual environment\"), mdx(\"p\", null, \"To create a virtual environment, it's usually best to specify the Python version explicitly to ensure the environment is setup with the expected version:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"bash\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-bash\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"python3.8 \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token parameter variable\"\n  }, \"-m\"), \" venv path/to/environment\"))), mdx(\"p\", null, \"A best practice is to use a virtual environment per project. A common convention to do so is to create the environment in a folder called \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"venv\"), \" directly in the project folder:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"bash\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-bash\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token builtin class-name\"\n  }, \"cd\"), \" my-project\\npython3.8 \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token parameter variable\"\n  }, \"-m\"), \" venv venv\"))), mdx(\"p\", null, \"To use the virtual environment, it needs to be activated:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"bash\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-bash\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token builtin class-name\"\n  }, \"source\"), \" venv/bin/activate\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"which\"), \" python3 \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, \"# confirm expected python version\")))), mdx(\"p\", null, \"Once activated, it's usually necessary to install the project dependencies which are most often referenced by a \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"requirements.txt\"), \" file:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"bash\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-bash\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"python3 \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token parameter variable\"\n  }, \"-m\"), \" pip \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"install\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token parameter variable\"\n  }, \"-r\"), \" requirements.txt\"))), mdx(\"p\", null, \"Finally, the virtual environment can be deactivated when it's no longer needed:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"bash\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-bash\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-bash\"\n  }, \"deactivate\"))), mdx(\"h2\", null, \"Why virtual environments are important: Dependency hell\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Dependency hell\"), \" is the confusion caused when dependency needs conflict between projects, users, and systems.\"), mdx(\"p\", null, \"Unlike most other \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../computer-languages/\"\n  }, \"programming language\"), \" package managers that install packages in the current working directory, \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../python-pip/\"\n  }, mdx(\"code\", {\n    parentName: \"a\",\n    \"className\": \"language-text\"\n  }, \"pip\")), \" by default installs packages as globally as possible. When installing a package, \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"pip\"), \" will first try to install that package system-wide. If system-wide installation is not permitted, \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"pip\"), \" will install the package for the current user.\"), mdx(\"p\", null, \"These \\\"as global as possible\\\" installations can cause dependency hell when:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Multiple projects have conflicting dependencies\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Project dependencies conflict with system dependencies\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Multiple users of the same system need conflicting dependencies\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Projects need to be tested against different versions of Python\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Projects need to be tested against different library versions\")), mdx(\"p\", null, \"For these reasons, a best practice for Python and \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"pip\"), \" is to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"always use a virtual environment\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/python-venvs/"},"frontmatter":{"description":"How to manage virtual environments with Python, Pip, and VEnv","tags":["python","python-pip"],"title":"Python Virtual Environments"}}},"pageContext":{"slug":"/python-venvs/"}},"staticQueryHashes":["3772659826","3794076007","80858887"]}