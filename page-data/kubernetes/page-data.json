{
    "componentChunkName": "component---src-templates-article-tsx",
    "path": "/kubernetes/",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"date\": \"2021-08-18T11:13:14.000Z\",\n  \"description\": \"A system to conduct an orchestra of containers\",\n  \"tags\": [\"containers\"],\n  \"title\": \"Kubernetes (k8s)\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Kubernetes (k8s)\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Kubernetes\"), \", sometimes stylistically written as \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"k8s\"), \", is an \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../open-source/\"\n  }, \"open-source\"), \" system to automate the deployment, scaling, and management of \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../containers/\"\n  }, \"containerized\"), \" applications. Kubernetes includes networking and storage abstractions to make it easy for deployments to be distributed across physical machine boundaries while maintaining the ability to communicate. Kubernetes provides the means to eliminate single points of failure, automatically scale, and to update containers without downtime through built-in services for service discovery, load balancing, automated roll-outs/roll-backs, self healing, and configuration management.\"), mdx(\"h2\", null, \"How Kubernetes Works\"), mdx(\"p\", null, \"Kubernetes works by maintaining a cluster of nodes, where each \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"node\"), \" is a physical or virtual machine capable of running one or more pods and managed by an agent called \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet/\"\n  }, \"kublet\"), \". A \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"pod\"), \" is a group of containers that share a common configuration and are scheduled onto the same node. Kubernetes is declaratively configured by a manifest file, which describes the desired state of the cluster. Differences between the desired state are reconciled through the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"control plane\"), \", which is an extensible set of components that are responsible for maintaining the desired state of the cluster.\"), mdx(\"div\", {\n    \"className\": \"mermaid\"\n  }, \"graph TD\\n    subgraph Cluster\\n\\t\\tMaster(\\\"fa:fa-asterisk Master Node\\\")\\n        subgraph Node1[Node]\\n            Kublet1(\\\"fa:fa-cog Kublet\\\") --> Pod1[Pod]\\n            Kublet1 --> Pod2[Pod]\\n            Pod1[Pod]\\n            Pod2[Pod]\\n        end\\n\\t\\tsubgraph Node2[Node]\\n            Kublet2(\\\"fa:fa-cog Kublet\\\") --> Pod3[Pod]\\n            Kublet2 --> Pod4\\n            Pod3[Pod]\\n            Pod4[Pod]\\n        end\\n        subgraph Node3[Node]\\n            Kublet3(\\\"fa:fa-cog Kublet\\\") --> Pod5[Pod]\\n            Kublet3 --> Pod6\\n            Pod5[Pod]\\n            Pod6[Pod]\\n        end\\n    end\\n    subgraph CP[Control Plane]\\n\\t\\tStore[(\\\"Store (etcd)\\\")] -->|Configuration| Master\\n        API --> Master\\n        Scheduler --> Master\\n        Controller[\\\"Controller Manager\\\"] --> Master\\n    end\\n    kubectl[\\\"$ kubectl\\\"] --> API\\n    Master --> Kublet1\\n    Master --> Kublet2\\n    Master --> Kublet3\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/kubernetes/"},"frontmatter":{"title":"Kubernetes (k8s)","tags":["containers"]}}},"pageContext":{"slug":"/kubernetes/"}},
    "staticQueryHashes": ["1957148337","3794076007","80858887"]}