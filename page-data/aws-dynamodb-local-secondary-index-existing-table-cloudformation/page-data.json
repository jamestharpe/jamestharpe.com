{"componentChunkName":"component---src-templates-article-tsx","path":"/aws-dynamodb-local-secondary-index-existing-table-cloudformation/","result":{"data":{"markdownRemark":{"html":"<h1>DynamoDB Local Secondary Index</h1>\n<p>A <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/LSI.html\">local secondary index</a> essentially gives DynamoDB tables an additional sort key by which to query data. I recently needed to add a local secondary index to an existing DynamoDB table through CloudFormation so that I could query objects by the <code class=\"language-text\">modified</code> column value without scanning. Unfortunately, this isn't as easy as simply adding the <a href=\"https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-dynamodb-lsi.html\"><code class=\"language-text\">LocalSecondaryIndexes</code> element</a> to the CloudFormation script.</p>\n<p>Adding a local secondary index requires replacing the table, which creates the challenge of preserving the table data during the upgrade.</p>\n<p><strong>Here's what I learned:</strong></p>\n<ul>\n<li>LocalSecondaryIndex CloudFormation YAML Syntax</li>\n<li>How to troubleshoot the error <code class=\"language-text\">Property AttributeDefinitions is inconsistent with the KeySchema of the table and the secondary indexes</code>.</li>\n<li>How to take DynamoDB table backups with the AWS CLI</li>\n<li>A work-around to prevent the error <code class=\"language-text\">CloudFormation cannot update a stack when a custom-named resource requires replacing...</code>.</li>\n<li>Basic JSON parsing with <a href=\"https://stedolan.github.io/jq/\"><code class=\"language-text\">jq</code></a></li>\n</ul>\n<h2>Initial Table Schema: <code class=\"language-text\">Jobs</code> Table</h2>\n<p>The original schema for the <code class=\"language-text\">Jobs</code> table consisted of a generated <code class=\"language-text\">jobId</code> partition key and <code class=\"language-text\">jobName</code> sort key. The system is used for invoicing, so its important for users to quickly find a Job by its ID or name so they made a good choice fot they key schema.</p>\n<p>Here is the CloudFormation code that originally defined the <code class=\"language-text\">Jobs</code> table</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># app.cloudformation.yaml</span>\n<span class=\"token key atrule\">JobsDynamoDBTable</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token key atrule\">Type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'AWS::DynamoDB::Table'</span>\n\t<span class=\"token key atrule\">Properties</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token key atrule\">TableName</span><span class=\"token punctuation\">:</span> Jobs\n\t\t<span class=\"token key atrule\">AttributeDefinitions</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token punctuation\">-</span>\n\t\t\t\t<span class=\"token key atrule\">AttributeName</span><span class=\"token punctuation\">:</span> jobId\n\t\t\t\t<span class=\"token key atrule\">AttributeType</span><span class=\"token punctuation\">:</span> S\n\t\t\t<span class=\"token punctuation\">-</span>\n\t\t\t\t<span class=\"token key atrule\">AttributeName</span><span class=\"token punctuation\">:</span> name\n\t\t\t\t<span class=\"token key atrule\">AttributeType</span><span class=\"token punctuation\">:</span> S\n\t\t<span class=\"token key atrule\">KeySchema</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token punctuation\">-</span>\n\t\t\t\t<span class=\"token key atrule\">AttributeName</span><span class=\"token punctuation\">:</span> jobId\n\t\t\t\t<span class=\"token key atrule\">KeyType</span><span class=\"token punctuation\">:</span> HASH\n\t\t\t<span class=\"token punctuation\">-</span>\n\t\t\t\t<span class=\"token key atrule\">AttributeName</span><span class=\"token punctuation\">:</span> name\n\t\t\t\t<span class=\"token key atrule\">KeyType</span><span class=\"token punctuation\">:</span> RANGE\n\t\t<span class=\"token key atrule\">ProvisionedThroughput</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token key atrule\">ReadCapacityUnits</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n\t\t\t<span class=\"token key atrule\">WriteCapacityUnits</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span></code></pre></div>\n<p>Recently, the client asked for some reporting to be added to the application that requires querying jobs by their last modified date. No problem, that's what local secondary indexes were built for.</p>\n<h2>Add the LocalSecondaryIndex to the CloudFormation Script</h2>\n<p>The <code class=\"language-text\">LocalSecondaryIndexes</code> element for DynamoDB in CloudFormation is straight-forward. Provide a descriptive key name, alternate key schema, and Projection (columns that should be available in the index).</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">LocalSecondaryIndexes</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span>\n    <span class=\"token key atrule\">IndexName</span><span class=\"token punctuation\">:</span> jobId<span class=\"token punctuation\">-</span>modified<span class=\"token punctuation\">-</span>index\n    <span class=\"token key atrule\">KeySchema</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span>\n        <span class=\"token key atrule\">AttributeName</span><span class=\"token punctuation\">:</span> jobId\n        <span class=\"token key atrule\">KeyType</span><span class=\"token punctuation\">:</span> HASH\n      <span class=\"token punctuation\">-</span>\n        <span class=\"token key atrule\">AttributeName</span><span class=\"token punctuation\">:</span> modified\n        <span class=\"token key atrule\">KeyType</span><span class=\"token punctuation\">:</span> RANGE\n    <span class=\"token key atrule\">Projection</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">ProjectionType</span><span class=\"token punctuation\">:</span> ALL</code></pre></div>\n<p>An attempt to deploy this change will result in an error:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">An error occurred: JobsDynamoDBTable - Property AttributeDefinitions is inconsistent with the KeySchema of the table and the secondary indexes.</code></pre></div>\n<p>Of course! The <code class=\"language-text\">AttributeDefinitions</code> must be updated to include the <code class=\"language-text\">modified</code> property. Once updated, the entire <code class=\"language-text\">JobsDynamoDBTable</code> CloudFormation resource element now looked like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># app.cloudformation.yaml</span>\n<span class=\"token key atrule\">JobsDynamoDBTable</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token key atrule\">Type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'AWS::DynamoDB::Table'</span>\n\t<span class=\"token key atrule\">Properties</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token key atrule\">TableName</span><span class=\"token punctuation\">:</span> Jobs\n\t\t<span class=\"token key atrule\">AttributeDefinitions</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token punctuation\">-</span>\n\t\t\t\t<span class=\"token key atrule\">AttributeName</span><span class=\"token punctuation\">:</span> jobId\n\t\t\t\t<span class=\"token key atrule\">AttributeType</span><span class=\"token punctuation\">:</span> S\n\t\t\t<span class=\"token punctuation\">-</span>\n\t\t\t\t<span class=\"token key atrule\">AttributeName</span><span class=\"token punctuation\">:</span> name\n\t\t\t\t<span class=\"token key atrule\">AttributeType</span><span class=\"token punctuation\">:</span> S\n\t\t\t<span class=\"token comment\"># Required for LocalSecondaryIndex</span>\n\t\t\t<span class=\"token punctuation\">-</span>\n\t\t\t\t<span class=\"token key atrule\">AttributeName</span><span class=\"token punctuation\">:</span> modified\n\t\t\t\t<span class=\"token key atrule\">AttributeType</span><span class=\"token punctuation\">:</span> N\n\t\t<span class=\"token key atrule\">KeySchema</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token punctuation\">-</span>\n\t\t\t\t<span class=\"token key atrule\">AttributeName</span><span class=\"token punctuation\">:</span> jobId\n\t\t\t\t<span class=\"token key atrule\">KeyType</span><span class=\"token punctuation\">:</span> HASH\n\t\t\t<span class=\"token punctuation\">-</span>\n\t\t\t\t<span class=\"token key atrule\">AttributeName</span><span class=\"token punctuation\">:</span> name\n\t\t\t\t<span class=\"token key atrule\">KeyType</span><span class=\"token punctuation\">:</span> RANGE\n\t\t<span class=\"token comment\"># Make modified available as a sort key</span>\n\t\t<span class=\"token key atrule\">LocalSecondaryIndexes</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token punctuation\">-</span>\n\t\t\t\t<span class=\"token key atrule\">IndexName</span><span class=\"token punctuation\">:</span> jobId<span class=\"token punctuation\">-</span>modified<span class=\"token punctuation\">-</span>index\n\t\t\t\t<span class=\"token key atrule\">KeySchema</span><span class=\"token punctuation\">:</span>\n\t\t\t\t\t<span class=\"token punctuation\">-</span>\n\t\t\t\t\t\t<span class=\"token key atrule\">AttributeName</span><span class=\"token punctuation\">:</span> jobId\n\t\t\t\t\t\t<span class=\"token key atrule\">KeyType</span><span class=\"token punctuation\">:</span> HASH\n\t\t\t\t\t<span class=\"token punctuation\">-</span>\n\t\t\t\t\t\t<span class=\"token key atrule\">AttributeName</span><span class=\"token punctuation\">:</span> modified\n\t\t\t\t\t\t<span class=\"token key atrule\">KeyType</span><span class=\"token punctuation\">:</span> RANGE\n\t\t\t\t<span class=\"token key atrule\">Projection</span><span class=\"token punctuation\">:</span>\n\t\t\t\t\t<span class=\"token key atrule\">ProjectionType</span><span class=\"token punctuation\">:</span> ALL <span class=\"token comment\"># Make All columns available in index</span>\n\t\t<span class=\"token key atrule\">ProvisionedThroughput</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token key atrule\">ReadCapacityUnits</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n\t\t\t<span class=\"token key atrule\">WriteCapacityUnits</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span></code></pre></div>\n<p>Though the CloudFormation template now seems complete, deploying fails:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">An error occurred: JobsDynamoDBTable - CloudFormation cannot update a stack when a custom-named resource requires replacing. Rename Jobs and update the stack again.</code></pre></div>\n<h2>Replace the a DynamoDB Resource</h2>\n<p>CloudFormation refuses to add the index to the DynamoDB table, so it must be replaced with a new table. However, with application data in the table, it can't simply be deleted. The plan, then, is to create a new table called <code class=\"language-text\">Jobs.v1</code> with the index, then to move data from <code class=\"language-text\">Jobs</code> to <code class=\"language-text\">Jobs.v1</code> and finally (optionally) delete the original <code class=\"language-text\">Jobs</code> table.</p>\n<h3>Retain the Original Table</h3>\n<p>A rename of the table will result in the original <code class=\"language-text\">Jobs</code> table being deleted. To prevent this, add <code class=\"language-text\">DeletionPolicy: Retain</code> to table object in your CloudFormation script and deploy. For safety sake, make a backup as well. Backups can be created in the AWS Console or via the CLI.</p>\n<h4>Create a DynamoDB Backup with the AWS CLI</h4>\n<p>Here's an example of how to create a backup using the AWS CLI:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ aws dynamodb create-backup <span class=\"token punctuation\">\\</span>\n  --region<span class=\"token operator\">=</span>YOUR_REGION_HERE <span class=\"token punctuation\">\\</span>\n  --table-name Jobs <span class=\"token punctuation\">\\</span>\n  --backup-name Jobs-<span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> <span class=\"token string\">'+%Y%m%d_%H%M%S'</span><span class=\"token variable\">)</span></span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"BackupDetails\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"BackupCreationDateTime\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">1548578121.641</span>,\n    <span class=\"token string\">\"BackupName\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"Jobs-20190127_033734\"</span>,\n    <span class=\"token string\">\"BackupStatus\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"CREATING\"</span>,\n    <span class=\"token string\">\"BackupType\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"USER\"</span>,\n    <span class=\"token string\">\"BackupSizeBytes\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">123456</span>,\n    <span class=\"token string\">\"BackupArn\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"arn:aws:dynamodb:us-east-1:123456789012:table/Jobs/backup/01548578121641-f46bes63\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It's important to let the backup finish before proceeding with further changes, but the <code class=\"language-text\">aws dynamodb backup</code> command returns almost instantly because the backup operation is asynchronous. </p>\n<p>Waiting on the backup to complete can be done with a simple script and a little help from the <code class=\"language-text\">jq</code> utility.</p>\n<p>First, parse out the ARN using <code class=\"language-text\">jq</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">backup_arn</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>aws dynamodb create-backup <span class=\"token punctuation\">\\</span>\n  --region<span class=\"token operator\">=</span>YOUR_REGION_HERE <span class=\"token punctuation\">\\</span>\n  --table-name Jobs <span class=\"token punctuation\">\\</span>\n  --backup-name Jobs-<span class=\"token punctuation\">$(</span>date <span class=\"token string\">'+%Y%m%d_%H%M%S'</span><span class=\"token punctuation\">)</span><span class=\"token variable\">)</span></span> <span class=\"token punctuation\">\\</span>\n<span class=\"token operator\">|</span> jq <span class=\"token string\">'.BackupDetails.BackupArn'</span> -r<span class=\"token punctuation\">)</span> <span class=\"token comment\"># -r for \"raw\" returns value w/ out quotes</span></code></pre></div>\n<p>Next, loop until the backup is no longer in a <code class=\"language-text\">CREATING</code> state:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token assign-left variable\">backup_status</span><span class=\"token operator\">=</span><span class=\"token string\">\"CREATING\"</span>\n$ <span class=\"token keyword\">while</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$backup_status</span>\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"CREATING\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"... Waiting for backup to complete, backup_status=\"</span><span class=\"token variable\">$backup_status</span> <span class=\"token punctuation\">\\</span>\n  <span class=\"token assign-left variable\">backup_status</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>aws dynamodb describe-backup <span class=\"token punctuation\">\\</span>\n    --backup-arn $backup_arn <span class=\"token punctuation\">\\</span>\n    --region<span class=\"token operator\">=</span>YOUR_REGION_HERE <span class=\"token punctuation\">\\</span>\n  <span class=\"token operator\">|</span> jq <span class=\"token string\">'.BackupDescription.BackupDetails.BackupStatus'</span> -r<span class=\"token variable\">)</span></span><span class=\"token punctuation\">\\</span>\n  <span class=\"token function\">sleep</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token keyword\">done</span> <span class=\"token punctuation\">\\</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Backup complete\"</span>\n<span class=\"token punctuation\">..</span>. Waiting <span class=\"token keyword\">for</span> backup to complete, <span class=\"token assign-left variable\">backup_status</span><span class=\"token operator\">=</span>CREATING\n<span class=\"token punctuation\">..</span>. Waiting <span class=\"token keyword\">for</span> backup to complete, <span class=\"token assign-left variable\">backup_status</span><span class=\"token operator\">=</span>CREATING\n<span class=\"token punctuation\">..</span>. Waiting <span class=\"token keyword\">for</span> backup to complete, <span class=\"token assign-left variable\">backup_status</span><span class=\"token operator\">=</span>CREATING\nBackup complete\n\n$</code></pre></div>\n<h3>Rename the Table</h3>\n<p>With the <code class=\"language-text\">Retain</code> policy and backup in place it's safe to rename the Jobs table and deploy. The first time I did this, I had forgotten to deploy the <code class=\"language-text\">DeletionPolicy: Retain</code> change in my CloudFormation and deleted the original table, along with all the data. <strong>Take backups!</strong></p>\n<p>The entire table definition now looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># app.cloudformation.yaml</span>\n<span class=\"token key atrule\">JobsDynamoDBTableV1</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># Renamed</span>\n\t<span class=\"token key atrule\">Type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'AWS::DynamoDB::Table'</span>\n\t<span class=\"token comment\"># Retain the table when deleting from CF Stack!</span>\n\t<span class=\"token key atrule\">DeletionPolicy</span><span class=\"token punctuation\">:</span> Retain\n\t<span class=\"token key atrule\">Properties</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token key atrule\">TableName</span><span class=\"token punctuation\">:</span> Jobs.v1 <span class=\"token comment\"># Renamed</span>\n\t\t<span class=\"token key atrule\">AttributeDefinitions</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token punctuation\">-</span>\n\t\t\t\t<span class=\"token key atrule\">AttributeName</span><span class=\"token punctuation\">:</span> jobId\n\t\t\t\t<span class=\"token key atrule\">AttributeType</span><span class=\"token punctuation\">:</span> S\n\t\t\t<span class=\"token punctuation\">-</span>\n\t\t\t\t<span class=\"token key atrule\">AttributeName</span><span class=\"token punctuation\">:</span> name\n\t\t\t\t<span class=\"token key atrule\">AttributeType</span><span class=\"token punctuation\">:</span> S\n\t\t\t<span class=\"token comment\"># Required for LocalSecondaryIndex</span>\n\t\t\t<span class=\"token punctuation\">-</span>\n\t\t\t\t<span class=\"token key atrule\">AttributeName</span><span class=\"token punctuation\">:</span> modified\n\t\t\t\t<span class=\"token key atrule\">AttributeType</span><span class=\"token punctuation\">:</span> N\n\t\t<span class=\"token key atrule\">KeySchema</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token punctuation\">-</span>\n\t\t\t\t<span class=\"token key atrule\">AttributeName</span><span class=\"token punctuation\">:</span> jobId\n\t\t\t\t<span class=\"token key atrule\">KeyType</span><span class=\"token punctuation\">:</span> HASH\n\t\t\t<span class=\"token punctuation\">-</span>\n\t\t\t\t<span class=\"token key atrule\">AttributeName</span><span class=\"token punctuation\">:</span> name\n\t\t\t\t<span class=\"token key atrule\">KeyType</span><span class=\"token punctuation\">:</span> RANGE\n\t\t<span class=\"token comment\"># Make modified available as a sort key</span>\n\t\t<span class=\"token key atrule\">LocalSecondaryIndexes</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token punctuation\">-</span>\n\t\t\t\t<span class=\"token key atrule\">IndexName</span><span class=\"token punctuation\">:</span> jobId<span class=\"token punctuation\">-</span>modified<span class=\"token punctuation\">-</span>index\n\t\t\t\t<span class=\"token key atrule\">KeySchema</span><span class=\"token punctuation\">:</span>\n\t\t\t\t\t<span class=\"token punctuation\">-</span>\n\t\t\t\t\t\t<span class=\"token key atrule\">AttributeName</span><span class=\"token punctuation\">:</span> jobId\n\t\t\t\t\t\t<span class=\"token key atrule\">KeyType</span><span class=\"token punctuation\">:</span> HASH\n\t\t\t\t\t<span class=\"token punctuation\">-</span>\n\t\t\t\t\t\t<span class=\"token key atrule\">AttributeName</span><span class=\"token punctuation\">:</span> modified\n\t\t\t\t\t\t<span class=\"token key atrule\">KeyType</span><span class=\"token punctuation\">:</span> RANGE\n\t\t\t\t<span class=\"token key atrule\">Projection</span><span class=\"token punctuation\">:</span> \n\t\t\t\t\t<span class=\"token key atrule\">ProjectionType</span><span class=\"token punctuation\">:</span> ALL\n\t\t<span class=\"token key atrule\">ProvisionedThroughput</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token key atrule\">ReadCapacityUnits</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n\t\t\t<span class=\"token key atrule\">WriteCapacityUnits</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span></code></pre></div>\n<p>Before deploying, update references to the <code class=\"language-text\">Jobs</code> table and <code class=\"language-text\">JobsDynamoDBTable</code> resource to <code class=\"language-text\">Jobs.v1</code> and <code class=\"language-text\">JobsDynamoDBTableV1</code>, respectively throughout your application and CloudFormation script.</p>\n<h2>Deploy and Migrate</h2>\n<p>The deployment will consist of two steps: The deployment its self, then the migration of the Jobs DynamoDB table to the Jobs.v1 table.</p>\n<p>The deployment of the CloudFormation template is simple:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">aws cloudformation deploy --template-file app.cloudformation.yaml --stack-name app</code></pre></div>\n<p>Once completed, the migration from the <code class=\"language-text\">Jobs</code> table to <code class=\"language-text\">Jobs.v1</code> can begin.</p>\n<h3>Copy All Rows from one DynamoDB Table to Another via CLI</h3>\n<p>To copy all the rows from one DynamoDB table to another uses two primary commands with the AWS CLI: <code class=\"language-text\">aws dynamodb scan</code> to retrieve rows from the source table and <code class=\"language-text\">aws dynamodb batch-write-item</code> to write records to the destination.</p>\n<h4>Limitations of <code class=\"language-text\">batch-write-item</code></h4>\n<p>Complicating matters is that <code class=\"language-text\">batch-write-item</code> can perform a maximum of 25 operations per call. Since the source table contains more than 25 records, we'll have to loop through.</p>\n<h4>Paginating Reads, 25 at a Time</h4>\n<p>Our migration script will retrieve 25 items at a time, write them to a file, then use <code class=\"language-text\">batch-write-item</code> to copy them to the destination. To <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-pagination.html\">paginate</a> through the data, both the <code class=\"language-text\">--page-size</code> and <code class=\"language-text\">--max-items</code> commands must be set to 25:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">aws dynamodb scan --profile hvh --region<span class=\"token operator\">=</span>us-east-1 <span class=\"token punctuation\">\\</span>\n  --table-name Jobs <span class=\"token punctuation\">\\</span>\n  --page-size <span class=\"token number\">25</span> <span class=\"token punctuation\">\\</span>\n  --max-items <span class=\"token number\">25</span></code></pre></div>\n<p>This call can be wrapped in a loop to page through the data and the variables needed parsed using <code class=\"language-text\">jq</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># migrate.sh</span>\n<span class=\"token builtin class-name\">set</span> -e\n<span class=\"token assign-left variable\">page</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n<span class=\"token keyword\">while</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span> <span class=\"token comment\"># do .. while equivalent</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"  Scanning page <span class=\"token variable\">$page</span>, up to 25 records in Jobs table\"</span>\n  <span class=\"token assign-left variable\">scan_result</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>aws dynamodb scan --profile hvh --region<span class=\"token operator\">=</span>us-east-1 <span class=\"token punctuation\">\\</span>\n    --table-name Jobs <span class=\"token punctuation\">\\</span>\n    --page-size <span class=\"token number\">25</span> <span class=\"token punctuation\">\\</span>\n    --max-items <span class=\"token number\">25</span> <span class=\"token punctuation\">\\</span>\n    $starting_token<span class=\"token variable\">)</span></span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$scan_result</span>\"</span>\n\n  <span class=\"token comment\"># Get pagination token:</span>\n  <span class=\"token assign-left variable\">next_token</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$scan_result</span>\"</span> <span class=\"token operator\">|</span> jq <span class=\"token string\">'.NextToken'</span> -r<span class=\"token variable\">)</span></span>\n  <span class=\"token comment\"># Set starting_token for next iteration (blank on first iteration)</span>\n  <span class=\"token assign-left variable\">starting_token</span><span class=\"token operator\">=</span><span class=\"token string\">\"--starting-token <span class=\"token variable\">$next_token</span>\"</span>\n\n  <span class=\"token comment\"># Break loop, if no more pages</span>\n  <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$next_token</span>\"</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"null\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token builtin class-name\">break</span>\n  <span class=\"token comment\"># Increment page count</span>\n  <span class=\"token variable\"><span class=\"token punctuation\">((</span>page<span class=\"token operator\">++</span><span class=\"token punctuation\">))</span></span>\n<span class=\"token keyword\">done</span></code></pre></div>\n<h4>Transforming DynamoDB Scan Results to <code class=\"language-text\">PutRequest</code> Elements</h4>\n<p>Each item returned from <code class=\"language-text\">aws dynamodb scan</code> must be transformed into a <code class=\"language-text\">PutRequest</code> element for compatibility with <code class=\"language-text\">batch-write-item</code>. Each set of 25 scan results can be written to a temporary file then passed to <code class=\"language-text\">batch-write-item</code> to perform the insert. The entire, finished script now looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># migrate.sh</span>\n<span class=\"token builtin class-name\">set</span> -e\n<span class=\"token assign-left variable\">page</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Copying all rows from Jobs to Jobs.v1, 25 rows at a time\"</span>\n<span class=\"token keyword\">while</span> <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span> <span class=\"token comment\"># do .. while equivalent</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"  Scanning page <span class=\"token variable\">$page</span>, up to 25 records in Jobs table\"</span>\n    <span class=\"token assign-left variable\">scan_result</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>aws dynamodb scan --profile hvh --region<span class=\"token operator\">=</span>us-east-1 <span class=\"token punctuation\">\\</span>\n        --table-name Jobs <span class=\"token punctuation\">\\</span>\n        --page-size <span class=\"token number\">25</span> <span class=\"token punctuation\">\\</span>\n        --max-items <span class=\"token number\">25</span> <span class=\"token punctuation\">\\</span>\n        $starting_token<span class=\"token variable\">)</span></span>\n\n    <span class=\"token comment\"># Transform the scan result to a PutRequest:</span>\n    <span class=\"token assign-left variable\">put_req_json</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">echo</span> $scan_result <span class=\"token operator\">|</span> jq <span class=\"token string\">'[.Items | .[] | { PutRequest: { Item: . } }]'</span><span class=\"token variable\">)</span></span>\n    <span class=\"token comment\"># Get number of records:</span>\n    <span class=\"token assign-left variable\">rec_count</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">echo</span> $put_req_json <span class=\"token operator\">|</span> jq <span class=\"token string\">'length'</span><span class=\"token variable\">)</span></span>\n    <span class=\"token comment\"># Get pagination token:</span>\n    <span class=\"token assign-left variable\">next_token</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$scan_result</span>\"</span> <span class=\"token operator\">|</span> jq <span class=\"token string\">'.NextToken'</span> -r<span class=\"token variable\">)</span></span>\n    <span class=\"token comment\"># Set starting_token for next iteration (blank on first iteration)</span>\n    <span class=\"token assign-left variable\">starting_token</span><span class=\"token operator\">=</span><span class=\"token string\">\"--starting-token <span class=\"token variable\">$next_token</span>\"</span>\n\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"  Writing <span class=\"token variable\">$rec_count</span> records to temporary file\"</span>\n    <span class=\"token assign-left variable\">tmp_file_name</span><span class=\"token operator\">=</span><span class=\"token string\">\"Jobs.v1.<span class=\"token variable\">$page</span>.json\"</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'{\n        \"Jobs.v1\": '</span>\"<span class=\"token variable\">${put_req_json}</span><span class=\"token string\">\"'\n    }' > \"</span>Jobs.v1.<span class=\"token variable\">$page</span>.json<span class=\"token string\">\"\n\n    echo \"</span>  Writing <span class=\"token variable\">$rec_count</span> to Jobs.v1<span class=\"token string\">\"\n    aws dynamodb batch-write-item \\\n        --region=YOUR_REGION_HERE \\\n        --request-items file://\"</span><span class=\"token variable\">$tmp_file_name</span><span class=\"token string\">\" \\\n    | sed 's/^/  /' # Indent output\n\n    echo \"</span>  Deleting temporary <span class=\"token function\">file</span><span class=\"token string\">\"\n    rm \"</span><span class=\"token variable\">$tmp_file_name</span><span class=\"token string\">\"\n\n    # Break loop, if no more pages\n    [[ \"</span><span class=\"token variable\">$next_token</span><span class=\"token string\">\" != \"</span>null<span class=\"token string\">\" ]] || break\n    # Increment page count\n    <span class=\"token variable\"><span class=\"token punctuation\">((</span>page<span class=\"token operator\">++</span><span class=\"token punctuation\">))</span></span>\ndone\n\necho \"</span>Copied all rows from Jobs to Jobs.v1\"</code></pre></div>\n<h2>Clean Up: Delete the Original Table (optional)</h2>\n<p>The original <code class=\"language-text\">Job</code> table is no longer in use, and may be deleted safely at this point:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">aws dynamodb delete-table <span class=\"token punctuation\">\\</span>\n  --region<span class=\"token operator\">=</span>YOUR_REGION_HERE <span class=\"token punctuation\">\\</span>\n  --table-name Jobs</code></pre></div>\n<p>That's it! The original <code class=\"language-text\">Jobs</code> table has been migrated to <code class=\"language-text\">Jobs.v1</code> with a Local Secondary Index applied and the original table removed.</p>","fields":{"slug":"/aws-dynamodb-local-secondary-index-existing-table-cloudformation/"},"frontmatter":{"title":"DynamoDB & CloudFormation: Add a Local Secondary Index to Existing Table","tags":["aws-cloudformation","aws-dynamodb","aws-cli","jq","database-as-code","infrastructure-as-code"]}},"allMarkdownRemark":{"nodes":[{"excerpt":"Ender 3 Pro 3D Printer Notes The Ender 3 Pro 3D Printer is a great first 3D printer. Filament size: 1.75mm","frontmatter":{"title":"Ender 3 Pro 3D Printer","tags":["3d-printing"],"description":"A small, reliable 3D printer appropriate for home use"},"fields":{"slug":"/3d-printer-ender-3-pro/"}},{"excerpt":"Automate Your Development Environment Setup Starting from a fresh OS installation, manually installing and configuring a full development…","frontmatter":{"title":"Automatically Build a Developer Environment on Windows","tags":["powershell","chocolatey"],"description":"A step-by-step guide to automate tool and framework installation for developers that use Windows"},"fields":{"slug":"/automated-developer-environment/"}},{"excerpt":"Notes on 3D Printing Process to 3D Print a Design Create or download a 3D design, typically as an STL file. \"Slice\" the design with a slicer…","frontmatter":{"title":"3D printing","tags":[],"description":"Learn to 3D print"},"fields":{"slug":"/3d-printing/"}},{"excerpt":"AWS Command Line Interface","frontmatter":{"title":"AWS Command Line Interface (CLI)","tags":["aws"],"description":"The AWS CLI is a tool to manage AWS services via command line"},"fields":{"slug":"/aws-cli/"}},{"excerpt":"AWS CloudFormation","frontmatter":{"title":"AWS CloudFormation","tags":["aws","infrastructure-as-code"],"description":"AWS CloudFormation is a service to model AWS infrastructure as code"},"fields":{"slug":"/aws-cloudformation/"}},{"excerpt":"","frontmatter":{"title":"AWS DynamoDB","tags":["aws","database"],"description":"AWS DynamoDB is a 'NoSQL' key-value and document database"},"fields":{"slug":"/aws-dynamodb/"}},{"excerpt":"AWS Identity and Access Management (IAM) IAM is a global service (no need to set a region) that completely manages all AWS Security \"in the…","frontmatter":{"title":"AWS Identity and Access Management (IAM)","tags":["aws"],"description":"AWS IAM: Identity Access Management for the AWS Cloud"},"fields":{"slug":"/aws-iam/"}},{"excerpt":"Amazon Web Services (AWS)","frontmatter":{"title":"Amazon Web Services (AWS)","tags":[],"description":null},"fields":{"slug":"/aws/"}},{"excerpt":"DynamoDB Local Secondary Index A local secondary index essentially gives DynamoDB tables an additional sort key by which to query data. I…","frontmatter":{"title":"DynamoDB & CloudFormation: Add a Local Secondary Index to Existing Table","tags":["aws-cloudformation","aws-dynamodb","aws-cli","jq","database-as-code","infrastructure-as-code"],"description":null},"fields":{"slug":"/aws-dynamodb-local-secondary-index-existing-table-cloudformation/"}},{"excerpt":"Bash Bash is a Unix shell Bash Command Shortcuts Command Use Example  Show list of previous commands  will show last five commands executed…","frontmatter":{"title":"Bourne Again Shell (Bash)","tags":["shell","terminal"],"description":"A Unix shell"},"fields":{"slug":"/bash/"}},{"excerpt":"The Bullet Journal Method Official Website YouTube Channel Quotes from The Bullet Journal Method \"Perfection is an unnatural and damaging…","frontmatter":{"title":"The Bullet Journal Method by Ryder Carroll","tags":["ryder-carroll","bullet-journaling","book"],"description":"A book by Ryder Carroll, the Bullet Journal Method describes an approach to life management through journals"},"fields":{"slug":"/book-bullet-journal-method/"}},{"excerpt":"Atomic Habits by James Clear Atomic Habits argues that small, daily improvements culminate in huge long-term payoffs. Good financial…","frontmatter":{"title":"Atomic Habits by James Clear","tags":["book"],"description":"A guide to making small, habitual changes to improve your life"},"fields":{"slug":"/book-atomic-habits/"}},{"excerpt":"The Goal: A Business Graphic Novel The Goal: A Business Graphic Novel is an adaptation of the book The Goal: A Process of Ongoing…","frontmatter":{"title":"The Goal: A Business Graphic Novel by Eliyahu Goldratt","tags":["book"],"description":"A business graphic novel to introduce the theory of constraints"},"fields":{"slug":"/book-goal-business-graphic-novel/"}},{"excerpt":"Books","frontmatter":{"title":"Book Notes and Reviews","tags":[],"description":"Notes, quotes, reviews, and summaries of books I've read"},"fields":{"slug":"/book/"}},{"excerpt":"Bullet Journaling Tips Start new custom collections with a mission statement to stay focused on what's important. Five whys is a great…","frontmatter":{"title":"Bullet Journaling Tips & Advice","tags":["bullet-journaling","five-whys"],"description":"Simple tips and advice from lessons learned through years of bullet journaling"},"fields":{"slug":"/bullet-journaling-tips/"}},{"excerpt":"Bullet Journaling Bullet Journaling is a modular set of practices for personal organization. These practices organize schedules, reminders…","frontmatter":{"title":"Bullet Journaling","tags":[],"description":"A method of to organize schedules, reminders, task lists, and brainstorming with into a single notebook"},"fields":{"slug":"/bullet-journaling/"}},{"excerpt":"Carl Sagan Official website Quotes \"Every question is a cry to understand the world\" --Carl Sagan, The Demon-Haunted World: Science as a…","frontmatter":{"title":"Carl Sagan","tags":[],"description":null},"fields":{"slug":"/carl-sagan/"}},{"excerpt":"Never Split the Difference In Never Split the Difference, former FBI negotiator Chris Voss breaks down his approach to negotiation. Key…","frontmatter":{"title":"Never Split the Difference by Chris Voss","tags":["chris-voss","negotiation"],"description":"A book by Chris Voss, Never Split the Difference describes various strategies and tactics for successful negotiation"},"fields":{"slug":"/book-never-split-the-difference/"}},{"excerpt":"Chocolatey Chocolatey is a package manager for Windows, similar to Homebrew for Mac.","frontmatter":{"title":"Chocolatey (Windows Package Manager)","tags":["package-manager"],"description":"Knowledge about Chocolatey: a package manager for managing software on Windows"},"fields":{"slug":"/chocolatey/"}},{"excerpt":"Command Line Interfaces Command-line Interfaces (CLIs) are applications that to process text-based commands, typically entered into a…","frontmatter":{"title":"Command-line Interface (CLI)","tags":["terminal","shell"],"description":"Programs that take commands through terminals and shells"},"fields":{"slug":"/cli/"}},{"excerpt":"Chris Voss Official profile","frontmatter":{"title":"Chris Voss","tags":[],"description":null},"fields":{"slug":"/chris-voss/"}},{"excerpt":"Recipe: Database as Code with Flyway & MySQL on Cloud Foundry This recipe is illustrated in the PAL Tracker example project. 1. Provision…","frontmatter":{"title":"Database as Code: Flyway & MySQL on Cloud Foundry","tags":["cloud-foundry","database-as-code","flyway","mysql","pal-tracker"],"description":null},"fields":{"slug":"/cloud-foundry-database-as-code-flyway/"}},{"excerpt":"Recipe: Configure Spring Boot on Cloud Foundry This recipe is illustrated in the PAL Tracker example project. 1. Inject Environment…","frontmatter":{"title":"Cloud Foundry Spring Boot Environment Basics","tags":["cloud-foundry","gradle","intellij","java","microservices","pal-tracker"],"description":null},"fields":{"slug":"/cloud-foundry-spring-boot-environment/"}},{"excerpt":"Recipe: PCF Cloud Native App This recipe is based on the PAL Tracker example project. 1. Create the PCF Developer Environment Developing…","frontmatter":{"title":"Pivotal Cloud Foundry (PCF) with Spring Boot Basics","tags":["java","spring-boot","microservices","cloud-foundry","pal-tracker","intellij"],"description":null},"fields":{"slug":"/cloud-foundry-spring-boot/"}},{"excerpt":"Recipe: Create, Retrieve, Update, and Delete with Spring MVC This recipe is based on the PAL Tracker example project. 1. Create the Model We…","frontmatter":{"title":"Spring MVC CRUD Operations","tags":["java","intellij","gradle","cloud-foundry","pal-tracker","spring-boot","microservices"],"description":null},"fields":{"slug":"/cloud-foundry-spring-mvc-crud-operations/"}},{"excerpt":"Cloud Foundry","frontmatter":{"title":"Cloud Foundry","tags":[],"description":"Could Foundry: An open-source cloud platform as a service (PaaS)"},"fields":{"slug":"/cloud-foundry/"}},{"excerpt":"Computer Languages Computer Languages are languages used by humans to tell computers what to do. There are multiple types of computer…","frontmatter":{"title":"Computer Languages","tags":[],"description":"Computer Languages: How humans tell computers what to do"},"fields":{"slug":"/computer-language/"}},{"excerpt":"Database as Code","frontmatter":{"title":"Database as Code","tags":["infrastructure-as-code"],"description":"A technique to version-control and automate the deployment of database schemas"},"fields":{"slug":"/database-as-code/"}},{"excerpt":"Databases","frontmatter":{"title":"Databases","tags":[],"description":"Databases: Organized collections of structured data"},"fields":{"slug":"/database/"}},{"excerpt":"Useful Docker Shell Command and \"Shortcuts\" Start/Stop All Docker Containers This example starts then stops all containers: Remove All…","frontmatter":{"title":"Useful Docker Commands","tags":["docker","shell"],"description":null},"fields":{"slug":"/docker-commands/"}},{"excerpt":"Error response from daemon: invalid bind mount spec The call to  using Git Bash on Windows was recently frustrating me when I tried to…","frontmatter":{"title":"Docker: Fix Invalid Bind Mount Spec in Git Bash","tags":["docker","git-bash"],"description":null},"fields":{"slug":"/docker-fix-invalid-bind-mount-spec-gitbash/"}},{"excerpt":"\"Forbidden path outside the build context\" I was recently attempting to Dockerize a Node project, so I added a  folder to the project and…","frontmatter":{"title":"Include Files Outside Docker Build Context","tags":["docker"],"description":null},"fields":{"slug":"/docker-include-files-outside-build-context/"}},{"excerpt":"Electricity Electricity the form of energy (the ability to do work) that results from charged particles (electrons, protons). Measures of…","frontmatter":{"title":"Electricity","tags":["physics"],"description":"Energy that results from charged particles"},"fields":{"slug":"/electricity/"}},{"excerpt":"","frontmatter":{"title":"Docker","tags":[],"description":"A set of tools to build and run containers"},"fields":{"slug":"/docker/"}},{"excerpt":"How to do a Dumbbell Wood Chop","frontmatter":{"title":"Dumbbell Wood Chop","tags":["exercise"],"description":"A core and full-body dumbbell exercise"},"fields":{"slug":"/exercise-dumbbell-wood-chop/"}},{"excerpt":"","frontmatter":{"title":"Frankensteins (Exercise)","tags":["exercise"],"description":"An exercise for hamstring flexibility and lower abdominal muscles"},"fields":{"slug":"/exercise-frankenstein/"}},{"excerpt":"Hip Walk","frontmatter":{"title":"Hip Walks (Exercise)","tags":["exercise"],"description":"An exercise for balance and hip flexibility"},"fields":{"slug":"/exercise-hip-walk/"}},{"excerpt":"Pike Walk","frontmatter":{"title":"Pike Walks (Exercise)","tags":["exercise"],"description":"An exercise for balance and hip flexibility"},"fields":{"slug":"/exercise-pike-walk/"}},{"excerpt":"How to do a Rotational Overhead Press","frontmatter":{"title":"Rotational Overhead Press","tags":["exercise"],"description":"A core and shoulders dumbbell exercise"},"fields":{"slug":"/exercise-rotational-overhead-press/"}},{"excerpt":"Easy Full Body Exercise Routine   Time 20 to 30 minutes Difficulty Easy Equipment Dumbbells This routine can be an easy stand-alone routine…","frontmatter":{"title":"Easy Full Body Exercise Routine","tags":["exercise","exercise-routine","exercise-dumbbell-wood-chop","exercise-rotational-overhead-press","exercise-spider-man","exercise-hip-walk","exercise-frankenstein"],"description":"A simple 20-30 minute full body exercise routine"},"fields":{"slug":"/exercise-routine-full-body-easy/"}},{"excerpt":"Easy Upper Body Exercise Routine   Time 20 to 30 minutes Difficulty Easy Equipment Dumbbells, Yoga Ball This routine can be an easy stand…","frontmatter":{"title":"Easy Upper Body Exercise Routine","tags":["exercise","exercise-routine","exercise-rotational-overhead-press","exercise-dumbbell-wood-chop","exercise-traffic-cop","exercise-yoga-ball-roll","exercise-pike-walk"],"description":"A simple 20-30 minute upper body exercise routine"},"fields":{"slug":"/exercise-routine-upper-body-easy/"}},{"excerpt":"Exercise Routines","frontmatter":{"title":"Exercise Routines","tags":["exercise"],"description":"Exercise routines to improve and maintain physical health"},"fields":{"slug":"/exercise-routine/"}},{"excerpt":"Spider-Mans","frontmatter":{"title":"Spider-Mans (Exercise)","tags":["exercise"],"description":"A core and flexibility exercise"},"fields":{"slug":"/exercise-spider-man/"}},{"excerpt":"Traffic Cops","frontmatter":{"title":"Traffic Cops (Exercise)","tags":["exercise"],"description":"A shoulder flexibility exercise"},"fields":{"slug":"/exercise-traffic-cop/"}},{"excerpt":"Yoga Ball Rolls","frontmatter":{"title":"Yoga Ball Rolls","tags":["exercise"],"description":"A shoulder flexibility and core exercise"},"fields":{"slug":"/exercise-yoga-ball-roll/"}},{"excerpt":"Five Whys Five Whys is a heuristic approach for root-cause analysis. When faced with an opportunity, asking why five times can prove useful…","frontmatter":{"title":"Five Whys","tags":["lean"],"description":"A method for root-cause analysis and problem solving"},"fields":{"slug":"/five-whys/"}},{"excerpt":"Exercise Resources CDC Physical Activity Basics","frontmatter":{"title":"Exercise","tags":[],"description":"Physical activity meant to improve and maintain physical health"},"fields":{"slug":"/exercise/"}},{"excerpt":"Flyway Flyway is a tool to help version database schemas with plain SQL.","frontmatter":{"title":"Flyway","tags":["database-as-code"],"description":"Flyway: A tool to version control database schemas in plain SQL"},"fields":{"slug":"/flyway/"}},{"excerpt":"Useful Git Aliases for Productivity A recent addition to my Automatic Development Environment Setup script were several Git aliases that…","frontmatter":{"title":"Git Aliases","tags":["git","shell"],"description":"Command-line shortcuts for Git"},"fields":{"slug":"/git-aliases/"}},{"excerpt":"Git Bash Git Bash is a Bash emulator and terminal for Windows that includes common Unix utilities. It is packaged with Git for Windows…","frontmatter":{"title":"Git Bash","tags":["bash","git","shell","terminal"],"description":"A Bash emulator and terminal for Windows"},"fields":{"slug":"/git-bash/"}},{"excerpt":"Git Git is a free, open-source distributed version control system.","frontmatter":{"title":"Git","tags":["cli"],"description":"A distributed version-control system to track changes, typically for software development projects"},"fields":{"slug":"/git/"}},{"excerpt":"Go Go is an open-source programming language with memory safety, structural typing, type safety, type inference, built-in package management…","frontmatter":{"title":"Go (Programming Language)","tags":["computer-language"],"description":"An open-source, statically typed, compiled programming language"},"fields":{"slug":"/golang/"}},{"excerpt":"Gradle Build Tool Gradle is build automation tool that automates common software build steps like compile, test, package, deploy, and…","frontmatter":{"title":"Gradle Build Tool","tags":[],"description":null},"fields":{"slug":"/gradle/"}},{"excerpt":"","frontmatter":{"title":"Infrastructure as Code","tags":[],"description":"A technique to version-control and automate the deployment of virtualized infrastructure"},"fields":{"slug":"/infrastructure-as-code/"}},{"excerpt":"IntelliJ IDEA IntelliJ IDEA is a Java IDE, developed by JetBrains.","frontmatter":{"title":"IntelliJ IDE","tags":["java"],"description":null},"fields":{"slug":"/intellij/"}},{"excerpt":"","frontmatter":{"title":"Internet of Things (IoT)","tags":[],"description":"Tools and technologies behind Internet of Things (IoT)"},"fields":{"slug":"/iot/"}},{"excerpt":"Java Java is a general purpose, object-oriented programming language.","frontmatter":{"title":"Java","tags":["computer-language"],"description":"A cross-platform, object-oriented programming language"},"fields":{"slug":"/java/"}},{"excerpt":"jq jq can slice, filter, map, and transform structured JSON data similar to how , ,  is used for plain text.","frontmatter":{"title":"jq","tags":["cli"],"description":"A portable CLI to slice, filter, and map JSON data"},"fields":{"slug":"/jq/"}},{"excerpt":"","frontmatter":{"title":"Lean","tags":[],"description":"A method for methodically maximizing with progressively fewer resources"},"fields":{"slug":"/lean/"}},{"excerpt":"The Linux File System  - Binaries The  folder contains the basic set of binaries available to every user. It contains the binaries for basic…","frontmatter":{"title":"Linux File System","tags":[],"description":"Overview of folders in the root of most Linux distributions"},"fields":{"slug":"/linux-file-system/"}},{"excerpt":"Linux","frontmatter":{"title":"Linux","tags":[],"description":"A free and open-source operating system"},"fields":{"slug":"/linux/"}},{"excerpt":"Mark Twain Quotes \"I've had a lot of worries in my life, most of which never happened.\"","frontmatter":{"title":"Mark Twain Quotes","tags":[],"description":null},"fields":{"slug":"/mark-twain/"}},{"excerpt":"Markdown Markdown is a simple language for writing rich-text documents using plain text.","frontmatter":{"title":"Markdown","tags":["computer-language"],"description":"Knowledge about Markdown"},"fields":{"slug":"/markdown/"}},{"excerpt":"Mermaid Diagrams Official Website Live Editor","frontmatter":{"title":"Mermaid (JavaScript Library)","tags":["computer-language"],"description":"A software architecture in which applications are made up of loosely coupled services"},"fields":{"slug":"/mermaid/"}},{"excerpt":"How to Comment a Markdown File Markdown doesn't include specific syntax for comments, but there is a workaround using the reference style…","frontmatter":{"title":"Markdown Code Comments","tags":["markdown"],"description":null},"fields":{"slug":"/markdown-comments/"}},{"excerpt":"","frontmatter":{"title":"Microservices","tags":[],"description":"A software architecture in which applications are made up of loosely coupled services"},"fields":{"slug":"/microservices/"}},{"excerpt":"","frontmatter":{"title":"MySQL","tags":["database"],"description":"MySQL: An open-source relational database management system (RDBMS)"},"fields":{"slug":"/mysql/"}},{"excerpt":"Negotiation","frontmatter":{"title":"Negotiation","tags":[],"description":"The art and science of reaching agreements"},"fields":{"slug":"/negotiation/"}},{"excerpt":"Ohm's Law Ohm's Law describes the relationship between current (), voltage (), and resistance ():  Given tha values for any two variables…","frontmatter":{"title":"Ohm's Law","tags":["electricity"],"description":"A formula for determining voltage, current, and resistance"},"fields":{"slug":"/ohms-law/"}},{"excerpt":"Package Managers A package manager is a software tool that automates the installation, upgrading, and un-installation of software or…","frontmatter":{"title":"Package Managers","tags":[],"description":"Package Managers: Apps that manage your apps"},"fields":{"slug":"/package-manager/"}},{"excerpt":"PAL Tracker PAL Tracker is an example app used to show basic application management and deployment strategies in Cloud Foundry with Java…","frontmatter":{"title":"PAL Tracker (Example Java Application)","tags":["cloud-foundry","gradle","java","spring-boot"],"description":"An example application to demonstrate application deployment and management strategies in Java, Spring Boot, and Cloud Foundry"},"fields":{"slug":"/pal-tracker/"}},{"excerpt":"Fundamental Terms of Physics Energy is the ability to do work. Work is the energy transferred to an object that causes a displacement. A…","frontmatter":{"title":"Physics","tags":[],"description":"The fundamental nature and properties of matter, energy, and motion"},"fields":{"slug":"/physics/"}},{"excerpt":"Reinhold Niebuhr Quotes \"Father, give us the courage to change what must be altered, serenity to accept what cannot be helped, and insight…","frontmatter":{"title":"Reinhold Niebuhr Quotes","tags":[],"description":"A theologian and ethicist, notable for originating the serenity prayer (among other things)"},"fields":{"slug":"/reinhold-niebuhr/"}},{"excerpt":"Ryder Carroll Official website Twitter","frontmatter":{"title":"Ryder Carroll","tags":[],"description":null},"fields":{"slug":"/ryder-carroll/"}},{"excerpt":"PowerShell PowerShell is a cross-platform command-line shell and scripting language.","frontmatter":{"title":"PowerShell","tags":["computer-language","terminal","shell"],"description":"PowerShell: A command-line shell and scripting language"},"fields":{"slug":"/powershell/"}},{"excerpt":"Serenity Prayer God grant me the serenity to accept the things I cannot change, \nCourage to change the things I can, \nAnd the wisdom to know…","frontmatter":{"title":"Serenity Prayer","tags":["reinhold-niebuhr"],"description":"A prayer for wisdom"},"fields":{"slug":"/serenity-prayer/"}},{"excerpt":"Shells Shells are text-based command processing applications, often used via a terminal.","frontmatter":{"title":"Shells","tags":["terminal"],"description":"Shells process text based commands"},"fields":{"slug":"/shell/"}},{"excerpt":"Spring Boot Spring Boot is an open source Java framework used to develop REST services based on Spring Framework.","frontmatter":{"title":"Spring Boot","tags":["java","spring-framework"],"description":null},"fields":{"slug":"/spring-boot/"}},{"excerpt":"Spring Framework Spring Framework is an application framework and inversion of control container for Java.","frontmatter":{"title":"Spring Framework","tags":["java"],"description":null},"fields":{"slug":"/spring-framework/"}},{"excerpt":"Terminals Terminals are text-based applications read and write to a shell. A \"shell\" and a \"terminal\" may be the same application (such as…","frontmatter":{"title":"Terminals","tags":["shell"],"description":"Terminals are text-based applications read and write to a shell"},"fields":{"slug":"/terminal/"}},{"excerpt":"Test Driven Development (TDD) TDD - Where did it all go wrong?","frontmatter":{"title":"Test Driven Development (TDD)","tags":["unit-testing"],"description":null},"fields":{"slug":"/test-driven-development/"}},{"excerpt":"Example: Add a Property to the Window type in TypeScript Explanation Declaration files (files ending with ) are used to declare types for…","frontmatter":{"title":"TypeScript: Extend the Window (globalThis) Object","tags":["typescript"],"description":"Add custom properties to the Window interface with TypeScript"},"fields":{"slug":"/typescript-extend-window/"}},{"excerpt":"Unit Tests Unit tests are tests that run in isolation from other tests. Unit tests are typically written by developers to test their own…","frontmatter":{"title":"Unit Testing","tags":[],"description":"The art and science of writing unit tests"},"fields":{"slug":"/unit-testing/"}},{"excerpt":"Watt's Law Watt's Law, sometimes called the Power Law, describes the relationship between power (), current (), and voltage ():  Given tha…","frontmatter":{"title":"Watt's Law (Power Law)","tags":["electricity"],"description":"A formula to define the relationship between power, voltage, and current (P=IV)"},"fields":{"slug":"/watts-law/"}},{"excerpt":"TypeScript TypeScript is an open-source language that builds on JavaScript to add static type definitions.","frontmatter":{"title":"TypeScript","tags":["computer-language"],"description":"TypeScript: A programming language that adds optional static typing to JavaScript"},"fields":{"slug":"/typescript/"}}]}},"pageContext":{"slug":"/aws-dynamodb-local-secondary-index-existing-table-cloudformation/"}},"staticQueryHashes":["3794076007","80858887"]}