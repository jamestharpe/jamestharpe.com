{
    "componentChunkName": "component---src-templates-article-tsx",
    "path": "/content-addressed-storage/",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"date\": \"2021-11-28T09:58:25.000Z\",\n  \"description\": \"A method to store information so that it can be retrieved based on content rather than location\",\n  \"tags\": [\"swe-design-patterns\", \"distributed-systems\", \"hash-functions\"],\n  \"title\": \"Content-Addressed Storage (CAS)\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Content-addressed storage (CAS)\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Content-addressed storage (CAS)\"), \" is a method to store information so that it can be retrieved based on content rather than location and is an important aspect of location independence and overall performance optimization in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../distributed-systems/\"\n  }, \"distributed systems\"), \".\"), mdx(\"p\", null, \"Content-addressed storage typically works by \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../hash-functions/\"\n  }, \"hashing\"), \" content to derive an identifier that can be used to retrieve the same content later.\"), mdx(\"h2\", null, \"General benefits of CAS\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Reliable caching\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Simplified data versioning\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Naturally idempotent\")), mdx(\"h2\", null, \"Real-world examples of content-addressed storage\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"../docker/\"\n  }, \"Docker\"), \" hashes each layer of a container image to identify it.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"../git/\"\n  }, \"Git\"), \" uses the hash of each commit as its identity.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"../angular/\"\n  }, \"Angular\"), \" uses output hashing in its compiled output to prevent version mismatches.\")));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/content-addressed-storage/"},"frontmatter":{"title":"Content-Addressed Storage (CAS)","tags":["swe-design-patterns","distributed-systems","hash-functions"]}}},"pageContext":{"slug":"/content-addressed-storage/"}},
    "staticQueryHashes": ["1957148337","3794076007","80858887"]}