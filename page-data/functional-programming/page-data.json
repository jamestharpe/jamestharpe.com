{"componentChunkName":"component---src-templates-article-tsx","path":"/functional-programming/","result":{"data":{"mdx":{"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"date\": \"2020-01-25T12:39:26.000Z\",\n  \"description\": \"A declarative programming paradigm for extracting and transforming data from streams\",\n  \"tags\": [\"computer-science\"],\n  \"title\": \"Functional Programming\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Functional Programming\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Functional programming\"), \" is a declarative programming paradigm in which programs are constructed through the composition of functions, where each function is an expression that returns a value.\"), mdx(\"h2\", null, \"Attributes of Functional Programs\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Attribute\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"First Class Functions\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Functions can be bound to names, treated as variables, passed as arguments, and returned as the results of other functions\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Pure Functions\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Functions are deterministic: They always produce the same output from a given input without performing any side-effects (modifying values outside the function)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Idempotence\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Side-effects (changes to state) produced by a function will occur only once, even if the function is executed multiple times\")))));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/functional-programming/"},"frontmatter":{"description":"A declarative programming paradigm for extracting and transforming data from streams","tags":["computer-science"],"title":"Functional Programming"}}},"pageContext":{"slug":"/functional-programming/"}},"staticQueryHashes":["3794076007","4068398115","80858887"]}