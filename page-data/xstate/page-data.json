{
    "componentChunkName": "component---src-templates-article-tsx",
    "path": "/xstate/",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"date\": \"2020-12-30T18:03:46.000Z\",\n  \"description\": \"A library to create state machines and state charts written in JavaScript\",\n  \"tags\": [\"javascript\", \"state-machines\", \"statecharts\", \"actor-model\"],\n  \"title\": \"XState (JavaScript Library)\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"XState\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://xstate.js.org/\"\n  }, \"XState\"), \" is a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../javascript/\"\n  }, \"JavaScript\"), \" framework for managing \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../state-machines/\"\n  }, \"state machines\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../statecharts/\"\n  }, \"statecharts\"), \".\"), mdx(\"h2\", null, \"Example XState Project: Gas Pump\"), mdx(\"p\", null, \"The \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://codesandbox.io/s/fervent-noyce-yhnrc\"\n  }, mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"gas pump example project\")), \" uses XState to implement a basic gas pump as if it were an integration of three separate applications, each using a statechart unknown to the other applications, but potentially dependent on them. This was important to prove conceptually for potential use in a multi-team enterprise setting.\"), mdx(\"p\", null, \"This was accomplished by using two separate registries:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"A Statechart Registry for each application's statecharts\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"A UI Component Registry to map UI Components (plain HTML & JS - no framework) to available actions\")), mdx(\"p\", null, \"The Statechart Registry is used to assemble a \\\"Super Statechart\\\" to manage shared context and cross-statechart communication. This was easily achieved by virtue of each application's statechart being subjugated to the Super Statechart, which gave each app's statechart a shared context and enabled communication via the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://xstate.js.org/docs/guides/actions.html#send-action\"\n  }, mdx(\"code\", {\n    parentName: \"a\",\n    \"className\": \"language-text\"\n  }, \"send\"), \" action\"), \".\"), mdx(\"p\", null, \"It was also necessary to merge the configuration options, which also provided a rudimentary opportunity to detect conflicts. For example, if two independent statecharts defined a \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"hasCredit\"), \" \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://xstate.js.org/docs/guides/guards.html#guarded-transitions\"\n  }, \"guard\"), \", the conflict needed to be detected to fail the formation of the Super Statechart.\"), mdx(\"h2\", null, \"XState Resources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://xstate.js.org/docs/\"\n  }, \"XState Documentation\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://xstate.js.org/viz/\"\n  }, \"XState Visualizer\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://statecharts.io/\"\n  }, \"XState Statecharts Tools\"))), mdx(\"h3\", null, \"XState Tutorials and Presentations\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://medium.com/angular-athens/working-with-state-machines-in-angular-2817441e26bf\"\n  }, \"Working with State Machines in Angular\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.youtube.com/watch?v=hiT4Q1ntvzg&list=WL&index=8\"\n  }, \"Formal Forms with State Machines by David Khourshid | React Next 2019\"))));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/xstate/"},"frontmatter":{"title":"XState (JavaScript Library)","tags":["javascript","state-machines","statecharts","actor-model"]}}},"pageContext":{"slug":"/xstate/"}},
    "staticQueryHashes": ["1957148337","3794076007","80858887"]}