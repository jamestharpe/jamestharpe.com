{"componentChunkName":"component---src-templates-article-tsx","path":"/state-machines/","result":{"data":{"mdx":{"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"date\": \"2020-12-30T18:07:46.000Z\",\n  \"description\": \"Abstract representations of system state at a given point in time\",\n  \"tags\": [\"computer-science\"],\n  \"title\": \"State Machines\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"State Machines\"), mdx(\"p\", null, \"A \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"state machine\"), \" is an abstract representation of a system's state at a given point in time. A \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"transition\"), \" is the change from one state to another given a set of inputs.\"), mdx(\"p\", null, \"There are two types of state machines: Finite, and infinite. A finite state machine (FSM) has a finite number of states and actions whereas an infinite state machine has an infinite number of states and/or actions. Generally, the term \\\"state machine\\\" refers to a finite state machine.\"), mdx(\"p\", null, \"State machines can be depicted formally in a visual format, which makes them useful for describing complex systems.\"), mdx(\"h2\", null, \"State Machine Resources\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://statecharts.github.io/what-is-a-state-machine.html\"\n  }, \"What is a State Machine?\"))));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/state-machines/"},"frontmatter":{"description":"Abstract representations of system state at a given point in time","tags":["computer-science"],"title":"State Machines"}}},"pageContext":{"slug":"/state-machines/"}},"staticQueryHashes":["3772659826","3794076007","80858887"]}