{"componentChunkName":"component---src-templates-article-tsx","path":"/actor-model/","result":{"data":{"mdx":{"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"date\": \"2021-03-08T14:09:46.000Z\",\n  \"description\": \"A model where an actor is the fundamental unit of computation including processing, storage, and communication\",\n  \"tags\": [\"computer-science\"],\n  \"title\": \"Actor Model\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Actor Model\"), mdx(\"p\", null, \"The \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"actor model\"), \" is a model for computation in which the \\\"actor\\\" is the primitive element of system design (in the actor model, \\\"everything is an actor\\\"). Each actor embodies processing, storage, and communication for a specific purpose.\"), mdx(\"p\", null, \"Each actor in a system can:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Send messages to other actors\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create additional actors\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Change internal state\")), mdx(\"p\", null, \"Each actor has an address to which messages can be sent. A single address can represent multiple actors or a single actor can have multiple addresses.\"), mdx(\"p\", null, \"Messages are delivered at most one time, and the order of delivery is not guaranteed; however, a message can contain an ordered sequence. Additionally, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"futures\"), \" are actors that represents a computation result, potentially before it is computed, so that computation results can be made available at the time of need.\"), mdx(\"h2\", null, \"Video: Hewitt Meijer, and Szyperski: The Actor Model (everything you wanted to know)\"), mdx(\"iframe\", {\n    width: \"560\",\n    height: \"315\",\n    src: \"https://www.youtube.com/embed/1zVdhDx7Tbs\",\n    frameBorder: \"0\",\n    allow: \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\",\n    allowFullScreen: true\n  }));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/actor-model/"},"frontmatter":{"description":"A model where an actor is the fundamental unit of computation including processing, storage, and communication","tags":["computer-science"],"title":"Actor Model"}}},"pageContext":{"slug":"/actor-model/"}},"staticQueryHashes":["3794076007","4068398115","80858887"]}