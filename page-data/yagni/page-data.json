{"componentChunkName":"component---src-templates-article-tsx","path":"/yagni/","result":{"data":{"mdx":{"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"date\": \"2021-10-11T13:27:56.000Z\",\n  \"description\": \"A simple mnemonic to help limit project scope\",\n  \"tags\": [\"requirements\", \"project-management\"],\n  \"title\": \"You Aren't Gonna Need it (YAGNI)\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"You Aren't Gonna Need it (YAGNI)\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"You Aren't Gonna Need it (YAGNI)\"), \" is a mnemonic to help limit scope in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../requirements/\"\n  }, \"requirements\"), \". YAGNI advises that there's no point in building capabilities into \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../product-management/\"\n  }, \"products\"), \" until there is an observable need. Though applicable to virtually any \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../engineering/\"\n  }, \"engineering\"), \" project, YAGNI is especially applicable to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../software-engineering/\"\n  }, \"software\"), \" because it's so easy to change compared to other types of engineering projects.\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/yagni/"},"frontmatter":{"description":"A simple mnemonic to help limit project scope","tags":["requirements","project-management"],"title":"You Aren't Gonna Need it (YAGNI)"}}},"pageContext":{"slug":"/yagni/"}},"staticQueryHashes":["1957148337","3794076007","80858887"]}