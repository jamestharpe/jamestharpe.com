{"componentChunkName":"component---src-templates-article-tsx","path":"/cqrs/","result":{"data":{"mdx":{"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"date\": \"2021-11-27T17:16:25.000Z\",\n  \"description\": \"A software engineering design pattern to separate responsibility between commands and queries\",\n  \"tags\": [\"swe-design-patterns\", \"software-architecture\"],\n  \"title\": \"Command Query Responsibility Segregation (CQRS)\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Command query responsibility segregation (CQRS)\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Command query responsibility segregation (CQRS)\"), \" is a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../software-engineering/\"\n  }, \"software engineering\"), \" design pattern to separate the responsibilities of commands and queries. In this context, a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"command\"), \" is a system call that persists a change and returns no information. A \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"query\"), \" is a system call that returns information and persists no changes. In other words, commands are write operations and queries are read operations. CQRS allows different \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../software-architecture/\"\n  }, \"architectures\"), \" for each type of operation, a commonly desired characteristic in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../distributed-systems/\"\n  }, \"distributed systems\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/cqrs/"},"frontmatter":{"description":"A software engineering design pattern to separate responsibility between commands and queries","tags":["swe-design-patterns","software-architecture"],"title":"Command Query Responsibility Segregation (CQRS)"}}},"pageContext":{"slug":"/cqrs/"}},"staticQueryHashes":["3772659826","3794076007","80858887"]}