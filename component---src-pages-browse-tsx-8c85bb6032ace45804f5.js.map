{"version":3,"file":"component---src-pages-browse-tsx-8c85bb6032ace45804f5.js","mappings":"oLAwEA,UApDkD,SAAC,GAAwB,IAAtBA,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC1D,OACC,qBAAQA,SAAUA,GACjB,qBACCC,MADD,yCAECC,YAAY,0CAEb,0BALD,8BAMC,0BACEH,EAAA,mBACM,qBAAYI,EAAAA,IAAAA,cAAqBC,EAAjC,QADN,KAEK,cACJ,IAAMC,EAAUN,EAAA,mBACf,mBAAUO,EAAAA,OAAAA,OAAAA,IAAyBC,EAAzBD,IAAV,OAED,OACC,sBAAIE,IAAKC,GACR,wBACCC,GAAE,IAAMH,EADT,IAECI,MAAO,CAAEC,SAAa,EAAIL,EAAAA,WAAJ,IAAL,YAEhBF,MAAAA,OAAA,EAAAA,EAAA,qBAA8BQ,EAAAA,EAAAA,IAAUN,EAN5C,c,oHCjCC,SAASM,EAAUC,GACzB,OAAOA,EAAA,gBAED,mBACJC,EAAA,gBAEM,mBAAUA,EAAAA,GAAAA,cAAwBA,EAAAA,OAAlC,MAFN,KADI,UAFC,KAAP,KAWM,SAASC,EAAYC,GAC3B,IAAMC,EAASD,EAAAA,WAAAA,KAAuBA,EAAAA,MAAAA,EAAcA,EAArCA,QAAf,EACA,OAAOC,EAAAA,SAAAA,KAAuBA,EAAAA,MAAAA,GAAvBA,GAAP,EAmBM,SAASC,EAAyB,EAAlC,GAIN,IAAQC,GAAwCC,EAAAA,EAAAA,gBAAhD,qBAkBMC,EAAON,EAAb,GAEME,EAAS,CAEdK,SAAUH,MAAAA,OAAF,EAAEA,EAAA,cAAqB,qCAC9Bf,EAD8B,oCAC9BA,EAD8B,yBAC9BA,EAAAA,SAD8B,MAI/BmB,KAAMJ,MAAAA,OAAF,EAAEA,EAAA,cAAqB,mBAC1BI,MAAAA,OAD0B,EAC1BA,EAAAA,SAAenB,EAAAA,OAAAA,KAAAA,MAAAA,GADW,QAK5B,GAAIa,EAAAA,MAAeA,EAAAA,KAAAA,UAAuBM,MAAAA,OAAvBN,EAAuBM,EAA1C,QACC,MAAM,2DAC4CC,KAAAA,UAD5C,gCAG2BA,KAAA,UAC/BP,EAAA,UAAgB,mBAAOQ,EAAAA,OAAP,UAKnB,OAAOR","sources":["webpack://jamestharpe.com/./src/pages/browse.tsx","webpack://jamestharpe.com/./src/tags.ts"],"sourcesContent":["import { graphql, Link, PageProps } from \"gatsby\";\nimport React, { FC } from \"react\";\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nimport { forHumans } from \"../tags\";\n\ntype BrowsePageData = {\n\tallMdx: {\n\t\ttotalCount: number;\n\t\tgroup: {\n\t\t\ttag: string;\n\t\t\ttotalCount: number;\n\t\t}[];\n\t\tnodes: {\n\t\t\tfields: { slug: string };\n\t\t\tfrontmatter: { title: string; tags: string[] };\n\t\t}[];\n\t};\n};\n\nconst BrowsePage: FC<PageProps<BrowsePageData>> = ({ data, location }) => {\n\treturn (\n\t\t<Layout location={location}>\n\t\t\t<SEO\n\t\t\t\ttitle=\"Browse James's Knowledge Graph: Topics\"\n\t\t\t\tdescription=\"Browse James Tharpe's Knowledge Graph\"\n\t\t\t/>\n\t\t\t<h1>Browse the Knowledge Graph</h1>\n\t\t\t<ul>\n\t\t\t\t{data.allMdx.group\n\t\t\t\t\t.sort((g1, g2) => g1.tag.localeCompare(g2.tag))\n\t\t\t\t\t.map((group, index) => {\n\t\t\t\t\t\tconst article = data.allMdx.nodes.find(\n\t\t\t\t\t\t\t(node) => node.fields.slug === `/${group.tag}/`\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<li key={index}>\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto={`/${group.tag}`}\n\t\t\t\t\t\t\t\t\tstyle={{ fontSize: `${1 + group.totalCount / 100 - 0.01}em` }}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{article?.frontmatter.title || forHumans(group.tag)}\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t</ul>\n\t\t</Layout>\n\t);\n};\n\nexport const query = graphql`\n\tquery Browse {\n\t\tallMdx(filter: { frontmatter: { draft: { ne: true } } }) {\n\t\t\ttotalCount\n\t\t\tgroup(field: frontmatter___tags) {\n\t\t\t\ttag: fieldValue\n\t\t\t\ttotalCount\n\t\t\t}\n\t\t\tnodes {\n\t\t\t\tfields {\n\t\t\t\t\tslug\n\t\t\t\t}\n\t\t\t\tfrontmatter {\n\t\t\t\t\ttitle\n\t\t\t\t\ttags\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n`;\n\nexport default BrowsePage;\n","import { graphql, useStaticQuery } from \"gatsby\";\n\nexport function forHumans(tag: string) {\n\treturn tag\n\t\t.split(\"-\")\n\t\t.map((word) =>\n\t\t\tword\n\t\t\t\t.split(\"/\")\n\t\t\t\t.map((word) => word[0].toUpperCase() + word.substr(1))\n\t\t\t\t.join(\" / \")\n\t\t)\n\t\t.join(\" \");\n}\n\nexport function tagFromSlug(path: string) {\n\tconst result = path.startsWith(\"/\") ? path.slice(1, path.length) : path;\n\treturn result.endsWith(\"/\") ? result.slice(0, -1) : result;\n}\n\ntype KnowledgeNetworkQueryResult = {\n\tallMdx?: {\n\t\tnodes: {\n\t\t\texcerpt: string;\n\t\t\tfields: {\n\t\t\t\tslug: string;\n\t\t\t};\n\t\t\tfrontmatter: {\n\t\t\t\tdescription?: string;\n\t\t\t\ttitle?: string;\n\t\t\t\ttags?: string[];\n\t\t\t};\n\t\t}[];\n\t};\n};\n\nexport function useKnowledgeNetworkQuery(\n\tlocationPathname: string,\n\ttags?: string[]\n) {\n\tconst { allMdx }: KnowledgeNetworkQueryResult = useStaticQuery(graphql`\n\t\tquery KnowledgeNetworkQuery {\n\t\t\tallMdx(filter: { frontmatter: { draft: { ne: true } } }) {\n\t\t\t\tnodes {\n\t\t\t\t\texcerpt\n\t\t\t\t\tfrontmatter {\n\t\t\t\t\t\ttitle\n\t\t\t\t\t\ttags\n\t\t\t\t\t\tdescription\n\t\t\t\t\t}\n\t\t\t\t\tfields {\n\t\t\t\t\t\tslug\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t`);\n\n\tconst slug = tagFromSlug(locationPathname);\n\n\tconst result = {\n\t\t// Tagged with this article's slug\n\t\tarticles: allMdx?.nodes.filter((article) =>\n\t\t\tarticle.frontmatter?.tags?.includes(slug)\n\t\t),\n\t\t// Tagged by this article\n\t\ttags: allMdx?.nodes.filter((article) =>\n\t\t\ttags?.includes(article.fields.slug.slice(1, -1))\n\t\t)\n\t};\n\n\tif (result.tags && result.tags.length !== tags?.length) {\n\t\tthrow new Error(\n\t\t\t`Pages for one or more tags is missing for tag ${JSON.stringify(\n\t\t\t\ttags\n\t\t\t)} on page ${slug}. Received: ${JSON.stringify(\n\t\t\t\tresult.tags.map((t) => t.fields.slug)\n\t\t\t)}`\n\t\t);\n\t}\n\n\treturn result;\n}\n"],"names":["data","location","title","description","g1","g2","article","node","group","key","index","to","style","fontSize","forHumans","tag","word","tagFromSlug","path","result","useKnowledgeNetworkQuery","allMdx","useStaticQuery","slug","articles","tags","JSON","t"],"sourceRoot":""}