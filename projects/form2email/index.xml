<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Form2email on James Tharpe</title>
    <link>https://www.jamestharpe.com/projects/form2email/</link>
    <description>Recent content in Form2email on James Tharpe</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 17 Dec 2017 12:10:14 -0400</lastBuildDate>
    
	<atom:link href="https://www.jamestharpe.com/projects/form2email/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Serverless Framework: Contact form with TypeScript on AWS</title>
      <link>https://www.jamestharpe.com/serverless-aws-backend/</link>
      <pubDate>Sun, 17 Dec 2017 12:10:14 -0400</pubDate>
      
      <guid>https://www.jamestharpe.com/serverless-aws-backend/</guid>
      <description>Create a Backend for a Static Frontend We recently launched the Crawlity website which, like jamestharpe.com, uses Hugo to generate a static site. There&amp;rsquo;s no database or template engine running on the server - just static files. Unlike jamestharpe.com, crawlity.com needs a back-end to accept contact form submissions. So how does one create a dynamic back-end for a static, &amp;ldquo;serverless&amp;rdquo; front-end?
Short answer: With the Serverless Framework!
Serverless Framework, or simply &amp;ldquo;Serverless&amp;rdquo;, is a provider-agnostic framework for defining the functions and events that make up your application.</description>
    </item>
    
    <item>
      <title>Serverless Framework with TypeScript and AWS: Getting Started</title>
      <link>https://www.jamestharpe.com/serverless-typescript-getting-started/</link>
      <pubDate>Sun, 10 Dec 2017 18:08:22 -0500</pubDate>
      
      <guid>https://www.jamestharpe.com/serverless-typescript-getting-started/</guid>
      <description>Serverless and TypeScript Serverless Framework, or simply &amp;ldquo;Serverless&amp;rdquo;, is an excellent provider-agnostic framework for defining the functions and events that make up your service. Once defined your events and functions are defined, Serverless deploys your service to the target cloud provider by automatically provisioning the required infrastructure and deploying the application to it.
While getting started, I found that most Serverless Framework examples are in JavaScript. However, I prefer the strong-typing and smarter tooling of TypeScript so I made it my mission to write a simple Serverless microservice using Serverless and TypeScript.</description>
    </item>
    
  </channel>
</rss>