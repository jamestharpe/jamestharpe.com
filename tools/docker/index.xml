<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on James Tharpe</title>
    <link>https://www.jamestharpe.com/tools/docker/</link>
    <description>Recent content in Docker on James Tharpe</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright &amp;copy; James Tharpe; All rights reserved.</copyright>
    <lastBuildDate>Tue, 07 Nov 2017 13:44:06 -0500</lastBuildDate>
    
	<atom:link href="https://www.jamestharpe.com/tools/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Docker: Fix Invalid Bind Mount Spec Git Bash</title>
      <link>https://www.jamestharpe.com/docker-fix-invalid-bind-mount-spec-gitbash/</link>
      <pubDate>Tue, 07 Nov 2017 13:44:06 -0500</pubDate>
      
      <guid>https://www.jamestharpe.com/docker-fix-invalid-bind-mount-spec-gitbash/</guid>
      <description>Error response from daemon: invalid bind mount spec The call to docker run using Git Bash on Windows was recently frustrating me when I tried to specify a volume using -v:
$ docker run -it -v /c/Users/james/Code/my-application:/app james/testcontainer sh C:\Program Files\Docker\Docker\Resources\bin\docker.exe: Error response from daemon: invalid bind mount spec &amp;quot;/C/Users/james/Code/my-application;C:\\Program Files\\Git\\app&amp;quot;: invalid volume specification: &#39;/C/Users/james/Code/my-app;C:\Program Files\Git\app&#39;: invalid mount config for type &amp;quot;bind&amp;quot;: invalid mount path: &#39;\Program Files\Git\app&#39; mount path must be absolute.</description>
    </item>
    
    <item>
      <title>Include Files Outside Docker Build Context</title>
      <link>https://www.jamestharpe.com/include-files-outside-docker-build-context/</link>
      <pubDate>Thu, 26 Oct 2017 17:33:25 -0400</pubDate>
      
      <guid>https://www.jamestharpe.com/include-files-outside-docker-build-context/</guid>
      <description>&amp;ldquo;Forbidden path outside the build context&amp;rdquo; I was recently attempting to use Dockerize a Node project, so I added a docker folder to the project and created a simple Dockerfile to get started:
FROM node:alpine WORKDIR /app COPY ../ ./ RUN npm install EXPOSE 80 ENTRYPOINT [ &amp;quot;npm&amp;quot;, &amp;quot;start&amp;quot; ]  However, when I tried to build the image, I got the following output:
$ docker build -t nodeapp .</description>
    </item>
    
    <item>
      <title>Useful Docker Shortcut Commands</title>
      <link>https://www.jamestharpe.com/useful-docker-shortcut-commands/</link>
      <pubDate>Mon, 04 Sep 2017 06:24:27 -0400</pubDate>
      
      <guid>https://www.jamestharpe.com/useful-docker-shortcut-commands/</guid>
      <description>Docker Shell Command &amp;ldquo;Shortcuts&amp;rdquo; I&amp;rsquo;ve been working with Docker a lot lately and have found it useful to note down a few &amp;ldquo;shortcut&amp;rdquo; commands to maintain my local images and containers, until I have them memorized. Here they are.
Start/Stop All Docker Containers This example starts then stops all containers:
$ docker start $(docker ps -aq) a12b34c5d678 b23c46d6e789 c34d57e7f790 $ docker stop $(docker ps -q) a12b34c5d678 b23c46d6e789 c34d57e7f790  Remove All Docker Images This example removes all Docker images:</description>
    </item>
    
  </channel>
</rss>