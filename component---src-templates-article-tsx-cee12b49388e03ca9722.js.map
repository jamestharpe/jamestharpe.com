{"version":3,"sources":["webpack:///./src/components/related-list.tsx","webpack:///./src/components/related-network.tsx","webpack:///./src/templates/article.tsx","webpack:///./src/tags.ts"],"names":["RelatedList","location","title","tags","related","useKnowledgeNetworkQuery","articles","length","map","article","key","fields","slug","to","frontmatter","description","excerpt","RelatedNetwork","widthConstraint","maximum","color","border","background","highlight","hover","font","nodes","a","id","label","tag","tagFromSlug","shape","concat","t","pathname","Math","ceil","reduce","prev","curr","current","filter","n","includes","from","pageQuery","ArticleTemplate","markdownRemark","data","dangerouslySetInnerHTML","__html","html","forHumans","split","word","toUpperCase","substr","join","path","result","startsWith","slice","endsWith","allMarkdownRemark","useStaticQuery","Error","JSON","stringify"],"mappings":"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","file":"component---src-templates-article-tsx-cee12b49388e03ca9722.js","sourcesContent":["import { WindowLocation } from \"@reach/router\";\nimport { Link } from \"gatsby\";\nimport React from \"react\";\nimport { useKnowledgeNetworkQuery } from \"../tags\";\n\ntype RelatedListProps = {\n\tlocation: WindowLocation;\n\ttitle?: string;\n\ttags?: string[];\n};\n\nconst RelatedList: React.FC<RelatedListProps> = ({ location, title, tags }) => {\n\tconst related = useKnowledgeNetworkQuery(location, tags);\n\treturn (\n\t\t<>\n\t\t\t{/* Related - Articles */}\n\t\t\t{!!related.articles?.length && (\n\t\t\t\t<article>\n\t\t\t\t\t<h2>More Knowledge on {title}</h2>\n\t\t\t\t\t{related.articles.map((article) => (\n\t\t\t\t\t\t<section key={article.fields.slug}>\n\t\t\t\t\t\t\t<Link to={article.fields.slug}>\n\t\t\t\t\t\t\t\t<h3>{article.frontmatter.title}</h3>\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t<p>{article.frontmatter.description || article.excerpt}</p>\n\t\t\t\t\t\t</section>\n\t\t\t\t\t))}\n\t\t\t\t</article>\n\t\t\t)}\n\t\t\t{/* Related - Tags */}\n\t\t\t{!!related.tags?.length && (\n\t\t\t\t<article>\n\t\t\t\t\t<h2>Topics related to {title}</h2>\n\t\t\t\t\t{related.tags.map((article) => (\n\t\t\t\t\t\t<section key={article.fields.slug}>\n\t\t\t\t\t\t\t<Link to={article.fields.slug}>\n\t\t\t\t\t\t\t\t<h3>{article.frontmatter.title}</h3>\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t<p>{article.frontmatter.description || article.excerpt}</p>\n\t\t\t\t\t\t</section>\n\t\t\t\t\t))}\n\t\t\t\t</article>\n\t\t\t)}\n\t\t</>\n\t);\n};\n\nexport default RelatedList;\n","import { WindowLocation } from \"@reach/router\";\nimport React from \"react\";\nimport { tagFromSlug, useKnowledgeNetworkQuery } from \"../tags\";\n\ntype RelatedNetworkProps = {\n\tlocation: WindowLocation;\n\ttitle?: string;\n\ttags?: string[];\n};\n\nconst RelatedNetwork: React.FC<RelatedNetworkProps> = ({\n\tlocation,\n\ttitle,\n\ttags\n}) => {\n\tconst widthConstraint = {\n\t\tmaximum: 150\n\t};\n\tconst color = {\n\t\tborder: \"#FAB84C\",\n\t\tbackground: \"#7CCB7D\",\n\t\thighlight: { border: \"#314A5E\", background: \"#B6E2B7\" },\n\t\thover: { border: \"#314A5E\", background: \"#B6E2B7\" },\n\t\tfont: {\n\t\t\tcolor: \"#411811\"\n\t\t}\n\t};\n\tconst related = useKnowledgeNetworkQuery(location, tags);\n\tconst nodes = (\n\t\trelated.articles?.map((a) => {\n\t\t\treturn {\n\t\t\t\tid: a.fields.slug,\n\t\t\t\tlabel: a.frontmatter.title,\n\t\t\t\ttitle: a.frontmatter.description,\n\t\t\t\tslug: a.fields.slug,\n\t\t\t\ttag: tagFromSlug(a.fields.slug),\n\t\t\t\ttags: a.frontmatter.tags,\n\t\t\t\tshape: \"box\",\n\t\t\t\twidthConstraint,\n\t\t\t\tcolor\n\t\t\t};\n\t\t}) || []\n\t)\n\t\t.concat(\n\t\t\trelated.tags?.map((t) => {\n\t\t\t\treturn {\n\t\t\t\t\tid: t.fields.slug,\n\t\t\t\t\tlabel: t.frontmatter.title,\n\t\t\t\t\ttitle: t.frontmatter.description,\n\t\t\t\t\tslug: t.fields.slug,\n\t\t\t\t\ttag: tagFromSlug(t.fields.slug),\n\t\t\t\t\ttags: t.frontmatter.tags,\n\t\t\t\t\tshape: \"ellipse\",\n\t\t\t\t\twidthConstraint,\n\t\t\t\t\tcolor\n\t\t\t\t};\n\t\t\t}) || []\n\t\t)\n\t\t.concat([\n\t\t\t{\n\t\t\t\tid: location.pathname,\n\t\t\t\tlabel: title,\n\t\t\t\ttitle: \"This article\",\n\t\t\t\tslug: location.pathname,\n\t\t\t\ttag: tagFromSlug(location.pathname),\n\t\t\t\ttags,\n\t\t\t\tshape: \"circle\",\n\t\t\t\twidthConstraint,\n\t\t\t\tcolor\n\t\t\t}\n\t\t]);\n\n\tconst approxLinesOfText = Math.ceil(\n\t\tnodes.reduce((prev, curr) => prev + (curr.label?.length || 0), 0) / 14\n\t);\n\n\tconst edges = nodes.reduce<{ to: string; from: string }[]>((prev, current) => {\n\t\treturn prev.concat(\n\t\t\tnodes\n\t\t\t\t.filter((n) => current.tags?.includes(n.tag))\n\t\t\t\t.map((n) => {\n\t\t\t\t\treturn { from: n.id, to: current.id, length: 175 };\n\t\t\t\t}) || []\n\t\t);\n\t}, []);\n\n\tconst options = {\n\t\tautoResize: true,\n\t\tlayout: {\n\t\t\thierarchical: false\n\t\t},\n\t\tedges: {\n\t\t\tcolor: \"#411811\"\n\t\t}\n\t\t// height: `${100 * nodes.length}px`,\n\t\t// width: `100%`\n\t};\n\tconst events = {\n\t\tselect: function (event: { nodes: string[] }) {\n\t\t\tif (event.nodes?.length === 1) {\n\t\t\t\twindow.location.href = event.nodes[0];\n\t\t\t}\n\t\t\t// console.log(\"event\", event);\n\t\t}\n\t};\n\n\treturn (\n\t\t<article>\n\t\t\t{/* <h2>{title} Knowledge Graph</h2>\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\theight: `${2 * (approxLinesOfText + edges.length)}em`,\n\t\t\t\t\twidth: `${8 * nodes.length + 8}em`,\n\t\t\t\t\tmaxWidth: \"100%\",\n\t\t\t\t\tminWidth: \"30%\",\n\t\t\t\t\tmaxHeight: \"512px\"\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<Graph graph={{ nodes, edges }} options={options} events={events} />\n\t\t\t</div> */}\n\t\t</article>\n\t);\n};\n\nexport default RelatedNetwork;\n","import { graphql, PageProps } from \"gatsby\";\nimport React, { FC } from \"react\";\nimport Layout from \"../components/layout\";\nimport RelatedList from \"../components/related-list\";\nimport RelatedNetwork from \"../components/related-network\";\nimport SEO from \"../components/seo\";\n\ntype ArticleTemplateData = {\n\tmarkdownRemark: {\n\t\thtml: string;\n\t\ttitle: string;\n\t\tfields: {\n\t\t\tslug: string;\n\t\t};\n\t\tfrontmatter: {\n\t\t\tdescription?: string;\n\t\t\ttags?: string[];\n\t\t\ttitle?: string;\n\t\t};\n\t};\n};\n\nconst ArticleTemplate: FC<PageProps<ArticleTemplateData>> = ({\n\tdata: { markdownRemark },\n\tlocation\n}) => {\n\treturn (\n\t\t<Layout location={location}>\n\t\t\t<SEO\n\t\t\t\ttitle={markdownRemark.frontmatter.title}\n\t\t\t\tdescription={markdownRemark.frontmatter.description || \"\"}\n\t\t\t/>\n\t\t\t<div dangerouslySetInnerHTML={{ __html: markdownRemark.html }} />\n\t\t\t<RelatedList\n\t\t\t\tlocation={location}\n\t\t\t\ttags={markdownRemark.frontmatter.tags}\n\t\t\t\ttitle={markdownRemark.frontmatter.title}\n\t\t\t/>\n\t\t\t<RelatedNetwork\n\t\t\t\tlocation={location}\n\t\t\t\ttags={markdownRemark.frontmatter.tags}\n\t\t\t\ttitle={markdownRemark.frontmatter.title}\n\t\t\t/>\n\t\t</Layout>\n\t);\n};\n\nexport default ArticleTemplate;\n\nexport const pageQuery = graphql`\n\tquery($slug: String!) {\n\t\tmarkdownRemark(fields: { slug: { eq: $slug } }) {\n\t\t\thtml\n\t\t\tfields {\n\t\t\t\tslug\n\t\t\t}\n\t\t\tfrontmatter {\n\t\t\t\ttitle\n\t\t\t\ttags\n\t\t\t}\n\t\t}\n\t}\n`;\n","import { WindowLocation } from \"@reach/router\";\nimport { graphql, useStaticQuery } from \"gatsby\";\n\nexport function forHumans(tag: string) {\n\treturn tag\n\t\t.split(\"-\")\n\t\t.map((word) =>\n\t\t\tword\n\t\t\t\t.split(\"/\")\n\t\t\t\t.map((word) => word[0].toUpperCase() + word.substr(1))\n\t\t\t\t.join(\" / \")\n\t\t)\n\t\t.join(\" \");\n}\n\nexport function tagFromSlug(path: string) {\n\tconst result = path.startsWith(\"/\") ? path.slice(1, path.length) : path;\n\treturn result.endsWith(\"/\") ? result.slice(0, -1) : result;\n}\n\ntype KnowledgeNetworkQueryResult = {\n\tallMarkdownRemark?: {\n\t\tnodes: {\n\t\t\texcerpt: string;\n\t\t\tfields: {\n\t\t\t\tslug: string;\n\t\t\t};\n\t\t\tfrontmatter: {\n\t\t\t\tdescription?: string;\n\t\t\t\ttitle?: string;\n\t\t\t\ttags?: string[];\n\t\t\t};\n\t\t}[];\n\t};\n};\n\nexport function useKnowledgeNetworkQuery(\n\tlocation: WindowLocation,\n\ttags?: string[]\n) {\n\tconst {\n\t\tallMarkdownRemark\n\t}: KnowledgeNetworkQueryResult = useStaticQuery(graphql`\n\t\tquery KnowledgeNetworkQuery {\n\t\t\tallMarkdownRemark(filter: { frontmatter: { draft: { ne: true } } }) {\n\t\t\t\tnodes {\n\t\t\t\t\texcerpt\n\t\t\t\t\tfrontmatter {\n\t\t\t\t\t\ttitle\n\t\t\t\t\t\ttags\n\t\t\t\t\t\tdescription\n\t\t\t\t\t}\n\t\t\t\t\tfields {\n\t\t\t\t\t\tslug\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t`);\n\n\tconst slug = tagFromSlug(location.pathname);\n\n\tconst result = {\n\t\t// Tagged with this article's slug\n\t\tarticles: allMarkdownRemark?.nodes.filter((article) =>\n\t\t\tarticle.frontmatter?.tags?.includes(slug)\n\t\t),\n\t\t// Tagged by this article\n\t\ttags: allMarkdownRemark?.nodes.filter((article) =>\n\t\t\ttags?.includes(article.fields.slug.slice(1, -1))\n\t\t)\n\t};\n\n\tif (result.tags && result.tags.length !== tags?.length) {\n\t\tthrow new Error(\n\t\t\t`Pages for one or more tags is missing for tag ${JSON.stringify(\n\t\t\t\ttags\n\t\t\t)} on page ${slug}. Received: ${JSON.stringify(\n\t\t\t\tresult.tags.map((t) => t.fields.slug)\n\t\t\t)}`\n\t\t);\n\t}\n\n\treturn result;\n}\n"],"sourceRoot":""}