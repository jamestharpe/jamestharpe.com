{"version":3,"sources":["webpack:///./src/pages/browse.tsx","webpack:///./src/tags.ts"],"names":["query","BrowsePage","data","location","title","description","allMarkdownRemark","group","sort","g1","g2","tag","localeCompare","map","to","style","fontSize","totalCount","nodes","find","node","fields","slug","frontmatter","split","word","toUpperCase","substr","join"],"mappings":"uMAoBA,IA0BaA,EAAQ,aAoBNC,UA9CmC,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,SAAT,OACjD,kBAAC,IAAD,CAAQA,SAAUA,GACjB,kBAAC,IAAD,CACCC,MAAM,yCACNC,YAAY,0CAEb,0DACA,4BACEH,EAAKI,kBAAkBC,MACtBC,MAAK,SAACC,EAAIC,GAAL,OAAYD,EAAGE,IAAIC,cAAcF,EAAGC,QACzCE,KAAI,SAACN,GAAD,aACJ,4BACC,kBAAC,OAAD,CACCO,GAAE,IAAMP,EAAMI,IACdI,MAAO,CAAEC,SAAa,EAAIT,EAAMU,WAAa,IAAM,IAAlC,QAEhB,UAAAf,EAAKI,kBAAkBY,MAAMC,MAC7B,SAACC,GAAD,OAAUA,EAAKC,OAAOC,OAAZ,IAAyBf,EAAMI,IAA/B,cADV,eAEEY,YAAYnB,QAAmBG,EAAMI,ICpC5Ca,MAAM,KACNX,KAAI,SAACY,GAAD,OACJA,EACED,MAAM,KACNX,KAAI,SAACY,GAAD,OAAUA,EAAK,GAAGC,cAAgBD,EAAKE,OAAO,MAClDC,KAAK,UAEPA,KAAK","file":"component---src-pages-browse-tsx-3b4de4f04e2be8586c70.js","sourcesContent":["import { graphql, Link, PageProps } from \"gatsby\";\nimport React, { FC } from \"react\";\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nimport { forHumans } from \"../tags\";\n\ntype BrowsePageData = {\n\tallMarkdownRemark: {\n\t\ttotalCount: number;\n\t\tgroup: {\n\t\t\ttag: string;\n\t\t\ttotalCount: number;\n\t\t}[];\n\t\tnodes: {\n\t\t\tfields: { slug: string };\n\t\t\tfrontmatter: { title: string };\n\t\t}[];\n\t};\n};\n\nconst BrowsePage: FC<PageProps<BrowsePageData>> = ({ data, location }) => (\n\t<Layout location={location}>\n\t\t<SEO\n\t\t\ttitle=\"Browse James's Knowledge Graph: Topics\"\n\t\t\tdescription=\"Browse James Tharpe's Knowledge Graph\"\n\t\t/>\n\t\t<h1>Browse the Knowledge Graph</h1>\n\t\t<ul>\n\t\t\t{data.allMarkdownRemark.group\n\t\t\t\t.sort((g1, g2) => g1.tag.localeCompare(g2.tag))\n\t\t\t\t.map((group) => (\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\tto={`/${group.tag}`}\n\t\t\t\t\t\t\tstyle={{ fontSize: `${1 + group.totalCount / 100 - 0.01}em` }}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{data.allMarkdownRemark.nodes.find(\n\t\t\t\t\t\t\t\t(node) => node.fields.slug === `/${group.tag}/`\n\t\t\t\t\t\t\t)?.frontmatter.title || forHumans(group.tag)}\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</li>\n\t\t\t\t))}\n\t\t</ul>\n\t</Layout>\n);\n\nexport const query = graphql`\n\tquery Browse {\n\t\tallMarkdownRemark(filter: { frontmatter: { draft: { ne: false } } }) {\n\t\t\ttotalCount\n\t\t\tgroup(field: frontmatter___tags) {\n\t\t\t\ttag: fieldValue\n\t\t\t\ttotalCount\n\t\t\t}\n\t\t\tnodes {\n\t\t\t\tfields {\n\t\t\t\t\tslug\n\t\t\t\t}\n\t\t\t\tfrontmatter {\n\t\t\t\t\ttitle\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n`;\n\nexport default BrowsePage;\n","export function forHumans(tag: string) {\n\treturn tag\n\t\t.split(\"-\")\n\t\t.map((word) =>\n\t\t\tword\n\t\t\t\t.split(\"/\")\n\t\t\t\t.map((word) => word[0].toUpperCase() + word.substr(1))\n\t\t\t\t.join(\" / \")\n\t\t)\n\t\t.join(\" \");\n}\n"],"sourceRoot":""}